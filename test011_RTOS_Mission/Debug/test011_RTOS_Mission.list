
test011_RTOS_Mission.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800afb0  0800afb0  0001afb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b518  0800b518  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b518  0800b518  0001b518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b520  0800b520  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b520  0800b520  0001b520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004260  200001d8  0800b700  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004438  0800b700  00024438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001657b  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c4  00000000  00000000  000367c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  00039c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea0  00000000  00000000  0003af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000193d8  00000000  00000000  0003be18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015399  00000000  00000000  000551f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099206  00000000  00000000  0006a589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006474  00000000  00000000  00103790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00109c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af98 	.word	0x0800af98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800af98 	.word	0x0800af98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <vApplicationGetIdleTaskMemory+0x2c>)
 8001010:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <vApplicationGetIdleTaskMemory+0x30>)
 8001016:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200001f4 	.word	0x200001f4
 8001030:	20000294 	.word	0x20000294

08001034 <microDelay>:
/* USER CODE BEGIN 0 */
int mode = 0;
int step = 0;
int d;
int spinning = 0;
void microDelay(int us) {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	htim2.Instance->CNT = 0;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <microDelay+0x2c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
	while((htim2.Instance->CNT < us));
 8001044:	bf00      	nop
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <microDelay+0x2c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	429a      	cmp	r2, r3
 8001050:	d3f9      	bcc.n	8001046 <microDelay+0x12>
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	20000494 	.word	0x20000494

08001064 <Trigger>:
void Trigger()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106e:	480b      	ldr	r0, [pc, #44]	; (800109c <Trigger+0x38>)
 8001070:	f001 f85a 	bl	8002128 <HAL_GPIO_WritePin>
	microDelay(10);
 8001074:	200a      	movs	r0, #10
 8001076:	f7ff ffdd 	bl	8001034 <microDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <Trigger+0x38>)
 8001082:	f001 f851 	bl	8002128 <HAL_GPIO_WritePin>
	microDelay(10);
 8001086:	200a      	movs	r0, #10
 8001088:	f7ff ffd4 	bl	8001034 <microDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <Trigger+0x38>)
 8001094:	f001 f848 	bl	8002128 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <HAL_GPIO_EXTI_Callback>:
double dist;
int t1 = 0, t2 = 0;
int angle = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == Echo_Pin)
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010b0:	d126      	bne.n	8001100 <HAL_GPIO_EXTI_Callback+0x60>
	{
		if(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 1)
 80010b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b6:	4816      	ldr	r0, [pc, #88]	; (8001110 <HAL_GPIO_EXTI_Callback+0x70>)
 80010b8:	f001 f81e 	bl	80020f8 <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d106      	bne.n	80010d0 <HAL_GPIO_EXTI_Callback+0x30>
		{
			//htim2.Instance->CNT = 0;
			t1 = htim2.Instance->CNT;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_GPIO_EXTI_Callback+0x74>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_GPIO_EXTI_Callback+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
//	{
//		angle = 45 * 2048 / 360;
//		spinning = 1;
//	}

}
 80010ce:	e017      	b.n	8001100 <HAL_GPIO_EXTI_Callback+0x60>
			t2 = htim2.Instance->CNT;
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_GPIO_EXTI_Callback+0x74>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_GPIO_EXTI_Callback+0x7c>)
 80010da:	601a      	str	r2, [r3, #0]
			dist = (t2 - t1) * 0.17;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_GPIO_EXTI_Callback+0x7c>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_GPIO_EXTI_Callback+0x78>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa24 	bl	8000534 <__aeabi_i2d>
 80010ec:	a306      	add	r3, pc, #24	; (adr r3, 8001108 <HAL_GPIO_EXTI_Callback+0x68>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fa89 	bl	8000608 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4909      	ldr	r1, [pc, #36]	; (8001120 <HAL_GPIO_EXTI_Callback+0x80>)
 80010fc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	5c28f5c3 	.word	0x5c28f5c3
 800110c:	3fc5c28f 	.word	0x3fc5c28f
 8001110:	40020000 	.word	0x40020000
 8001114:	20000494 	.word	0x20000494
 8001118:	20000540 	.word	0x20000540
 800111c:	20000544 	.word	0x20000544
 8001120:	20000538 	.word	0x20000538

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b09e      	sub	sp, #120	; 0x78
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f000 fd3d 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f881 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f000 f95f 	bl	80013f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001136:	f000 f933 	bl	80013a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800113a:	f000 f8e5 	bl	8001308 <MX_TIM2_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800113e:	2300      	movs	r3, #0
 8001140:	673b      	str	r3, [r7, #112]	; 0x70
 8001142:	2300      	movs	r3, #0
 8001144:	677b      	str	r3, [r7, #116]	; 0x74
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8001146:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800114a:	2101      	movs	r1, #1
 800114c:	4618      	mov	r0, r3
 800114e:	f002 feae 	bl	8003eae <osSemaphoreCreate>
 8001152:	4603      	mov	r3, r0
 8001154:	4a2c      	ldr	r2, [pc, #176]	; (8001208 <main+0xe4>)
 8001156:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, myStartTask01, osPriorityAboveNormal, 0, 128);
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <main+0xe8>)
 800115a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800115e:	461d      	mov	r5, r3
 8001160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001164:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001168:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 800116c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fe3b 	bl	8003dee <osThreadCreate>
 8001178:	4603      	mov	r3, r0
 800117a:	4a25      	ldr	r2, [pc, #148]	; (8001210 <main+0xec>)
 800117c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, myStartTask02, osPriorityNormal, 0, 128);
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <main+0xf0>)
 8001180:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001184:	461d      	mov	r5, r3
 8001186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800118e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001192:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fe28 	bl	8003dee <osThreadCreate>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <main+0xf4>)
 80011a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, myStartTask03, osPriorityBelowNormal, 0, 128);
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <main+0xf8>)
 80011a6:	f107 041c 	add.w	r4, r7, #28
 80011aa:	461d      	mov	r5, r3
 80011ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fe15 	bl	8003dee <osThreadCreate>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a16      	ldr	r2, [pc, #88]	; (8001220 <main+0xfc>)
 80011c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, myStartTask04, osPriorityLow, 0, 512);
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <main+0x100>)
 80011cc:	463c      	mov	r4, r7
 80011ce:	461d      	mov	r5, r3
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80011dc:	463b      	mov	r3, r7
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fe04 	bl	8003dee <osThreadCreate>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <main+0x104>)
 80011ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ProgramStart("FreeRTOS Mission");
 80011ec:	480f      	ldr	r0, [pc, #60]	; (800122c <main+0x108>)
 80011ee:	f000 fa5b 	bl	80016a8 <ProgramStart>
  HAL_TIM_Base_Start(&htim2);
 80011f2:	480f      	ldr	r0, [pc, #60]	; (8001230 <main+0x10c>)
 80011f4:	f001 fce4 	bl	8002bc0 <HAL_TIM_Base_Start>
  osSemaphoreRelease(myBinarySem01Handle);
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <main+0xe4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 fed7 	bl	8003fb0 <osSemaphoreRelease>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001202:	f002 fded 	bl	8003de0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001206:	e7fe      	b.n	8001206 <main+0xe2>
 8001208:	20000534 	.word	0x20000534
 800120c:	0800afd0 	.word	0x0800afd0
 8001210:	20000524 	.word	0x20000524
 8001214:	0800aff8 	.word	0x0800aff8
 8001218:	20000528 	.word	0x20000528
 800121c:	0800b020 	.word	0x0800b020
 8001220:	2000052c 	.word	0x2000052c
 8001224:	0800b048 	.word	0x0800b048
 8001228:	20000530 	.word	0x20000530
 800122c:	0800afb0 	.word	0x0800afb0
 8001230:	20000494 	.word	0x20000494

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	; 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f006 faae 	bl	80077a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <SystemClock_Config+0xcc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <SystemClock_Config+0xcc>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <SystemClock_Config+0xcc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <SystemClock_Config+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a21      	ldr	r2, [pc, #132]	; (8001304 <SystemClock_Config+0xd0>)
 800127e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <SystemClock_Config+0xd0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012a4:	2310      	movs	r3, #16
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012ae:	2304      	movs	r3, #4
 80012b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b2:	2304      	movs	r3, #4
 80012b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 ff66 	bl	800218c <HAL_RCC_OscConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012c6:	f000 f9a1 	bl	800160c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ca:	230f      	movs	r3, #15
 80012cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ce:	2302      	movs	r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2102      	movs	r1, #2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 f9c8 	bl	800267c <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012f2:	f000 f98b 	bl	800160c <Error_Handler>
  }
}
 80012f6:	bf00      	nop
 80012f8:	3750      	adds	r7, #80	; 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40007000 	.word	0x40007000

08001308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM2_Init+0x94>)
 8001326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_TIM2_Init+0x94>)
 800132e:	2253      	movs	r2, #83	; 0x53
 8001330:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM2_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM2_Init+0x94>)
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_TIM2_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM2_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_TIM2_Init+0x94>)
 800134e:	f001 fbe7 	bl	8002b20 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001358:	f000 f958 	bl	800160c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM2_Init+0x94>)
 800136a:	f001 fdd5 	bl	8002f18 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001374:	f000 f94a 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM2_Init+0x94>)
 8001386:	f001 ffdd 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 f93c 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000494 	.word	0x20000494

080013a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART2_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d8:	f002 f836 	bl	8003448 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f913 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200004dc 	.word	0x200004dc
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b48      	ldr	r3, [pc, #288]	; (8001530 <MX_GPIO_Init+0x13c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a47      	ldr	r2, [pc, #284]	; (8001530 <MX_GPIO_Init+0x13c>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b45      	ldr	r3, [pc, #276]	; (8001530 <MX_GPIO_Init+0x13c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <MX_GPIO_Init+0x13c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a40      	ldr	r2, [pc, #256]	; (8001530 <MX_GPIO_Init+0x13c>)
 8001430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <MX_GPIO_Init+0x13c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <MX_GPIO_Init+0x13c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a39      	ldr	r2, [pc, #228]	; (8001530 <MX_GPIO_Init+0x13c>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <MX_GPIO_Init+0x13c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <MX_GPIO_Init+0x13c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a32      	ldr	r2, [pc, #200]	; (8001530 <MX_GPIO_Init+0x13c>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <MX_GPIO_Init+0x13c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trig_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001480:	482c      	ldr	r0, [pc, #176]	; (8001534 <MX_GPIO_Init+0x140>)
 8001482:	f000 fe51 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN4_Pin|IN1_Pin|IN3_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800148c:	482a      	ldr	r0, [pc, #168]	; (8001538 <MX_GPIO_Init+0x144>)
 800148e:	f000 fe4b 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001498:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4824      	ldr	r0, [pc, #144]	; (800153c <MX_GPIO_Init+0x148>)
 80014aa:	f000 fca1 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Trig_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Trig_Pin;
 80014ae:	f44f 7390 	mov.w	r3, #288	; 0x120
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	481b      	ldr	r0, [pc, #108]	; (8001534 <MX_GPIO_Init+0x140>)
 80014c8:	f000 fc92 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN4_Pin IN1_Pin IN3_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|IN1_Pin|IN3_Pin|IN2_Pin;
 80014cc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4814      	ldr	r0, [pc, #80]	; (8001538 <MX_GPIO_Init+0x144>)
 80014e6:	f000 fc83 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 80014ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014f0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_GPIO_Init+0x140>)
 8001502:	f000 fc75 	bl	8001df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2105      	movs	r1, #5
 800150a:	2017      	movs	r0, #23
 800150c:	f000 fc46 	bl	8001d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001510:	2017      	movs	r0, #23
 8001512:	f000 fc5f 	bl	8001dd4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	2028      	movs	r0, #40	; 0x28
 800151c:	f000 fc3e 	bl	8001d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001520:	2028      	movs	r0, #40	; 0x28
 8001522:	f000 fc57 	bl	8001dd4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	40020400 	.word	0x40020400
 800153c:	40020800 	.word	0x40020800

08001540 <myStartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_myStartTask01 */
void myStartTask01(void const * argument)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <myStartTask01+0x38>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fce0 	bl	8003f14 <osSemaphoreWait>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d104      	bne.n	8001564 <myStartTask01+0x24>
	  {
		  Trigger();
 800155a:	f7ff fd83 	bl	8001064 <Trigger>
		  osDelay(60);
 800155e:	203c      	movs	r0, #60	; 0x3c
 8001560:	f002 fc91 	bl	8003e86 <osDelay>
	  }
	  osSemaphoreRelease(myBinarySem01Handle);
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <myStartTask01+0x38>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fd21 	bl	8003fb0 <osSemaphoreRelease>
    osDelay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f002 fc89 	bl	8003e86 <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001574:	e7e8      	b.n	8001548 <myStartTask01+0x8>
 8001576:	bf00      	nop
 8001578:	20000534 	.word	0x20000534

0800157c <myStartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myStartTask02 */
void myStartTask02(void const * argument)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myStartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001584:	2001      	movs	r0, #1
 8001586:	f002 fc7e 	bl	8003e86 <osDelay>
 800158a:	e7fb      	b.n	8001584 <myStartTask02+0x8>

0800158c <myStartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myStartTask03 */
void myStartTask03(void const * argument)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myStartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f002 fc76 	bl	8003e86 <osDelay>
 800159a:	e7fb      	b.n	8001594 <myStartTask03+0x8>

0800159c <myStartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myStartTask04 */
void myStartTask04(void const * argument)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myStartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK){
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <myStartTask04+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 fcb2 	bl	8003f14 <osSemaphoreWait>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10d      	bne.n	80015d2 <myStartTask04+0x36>
		  printf("Current distance : %6.2f\r\n", dist);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <myStartTask04+0x44>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <myStartTask04+0x48>)
 80015be:	f005 fedd 	bl	800737c <iprintf>
		  osSemaphoreRelease(myBinarySem01Handle);
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <myStartTask04+0x40>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fcf2 	bl	8003fb0 <osSemaphoreRelease>
		  osDelay(50);
 80015cc:	2032      	movs	r0, #50	; 0x32
 80015ce:	f002 fc5a 	bl	8003e86 <osDelay>
	  }

    osDelay(1);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f002 fc57 	bl	8003e86 <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK){
 80015d8:	e7e4      	b.n	80015a4 <myStartTask04+0x8>
 80015da:	bf00      	nop
 80015dc:	20000534 	.word	0x20000534
 80015e0:	20000538 	.word	0x20000538
 80015e4:	0800b064 	.word	0x0800b064

080015e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015fa:	f000 faf7 	bl	8001bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40014400 	.word	0x40014400

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001614:	e7fe      	b.n	8001614 <Error_Handler+0x8>
	...

08001618 <__io_getchar>:
extern UART_HandleTypeDef huart2;
//int *hi2c = NULL;
//I2C_HandleTypeDef *hi2c = NULL;

int __io_getchar(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	char ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 800161e:	bf00      	nop
 8001620:	1df9      	adds	r1, r7, #7
 8001622:	230a      	movs	r3, #10
 8001624:	2201      	movs	r2, #1
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <__io_getchar+0x44>)
 8001628:	f001 ffe9 	bl	80035fe <HAL_UART_Receive>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f6      	bne.n	8001620 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10);	//Echo
 8001632:	1df9      	adds	r1, r7, #7
 8001634:	230a      	movs	r3, #10
 8001636:	2201      	movs	r2, #1
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <__io_getchar+0x44>)
 800163a:	f001 ff55 	bl	80034e8 <HAL_UART_Transmit>
	if(ch == '\r')
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b0d      	cmp	r3, #13
 8001642:	d105      	bne.n	8001650 <__io_getchar+0x38>
		HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8001644:	230a      	movs	r3, #10
 8001646:	2201      	movs	r2, #1
 8001648:	4905      	ldr	r1, [pc, #20]	; (8001660 <__io_getchar+0x48>)
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <__io_getchar+0x44>)
 800164c:	f001 ff4c 	bl	80034e8 <HAL_UART_Transmit>
	return ch;
 8001650:	79fb      	ldrb	r3, [r7, #7]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200004dc 	.word	0x200004dc
 8001660:	0800b080 	.word	0x0800b080

08001664 <__io_putchar>:
int __io_putchar(int ch)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 800166c:	1d39      	adds	r1, r7, #4
 800166e:	230a      	movs	r3, #10
 8001670:	2201      	movs	r2, #1
 8001672:	4804      	ldr	r0, [pc, #16]	; (8001684 <__io_putchar+0x20>)
 8001674:	f001 ff38 	bl	80034e8 <HAL_UART_Transmit>
	return ch;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200004dc 	.word	0x200004dc

08001688 <StandBy>:

void StandBy()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 800168c:	bf00      	nop
 800168e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <StandBy+0x1c>)
 8001694:	f000 fd30 	bl	80020f8 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f7      	bne.n	800168e <StandBy+0x6>
}
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020800 	.word	0x40020800

080016a8 <ProgramStart>:

void ProgramStart(char * str)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	//printf("\033[2J\033[0;0H");
	cls();
 80016b0:	f000 f820 	bl	80016f4 <cls>
	Cursor(0, 0);
 80016b4:	2100      	movs	r1, #0
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 f826 	bl	8001708 <Cursor>
	printf("Program Name - %s\r\n", str);
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	480a      	ldr	r0, [pc, #40]	; (80016e8 <ProgramStart+0x40>)
 80016c0:	f005 fe5c 	bl	800737c <iprintf>
	printf("Press Blue-Button(B1) to Start...\r\n");
 80016c4:	4809      	ldr	r0, [pc, #36]	; (80016ec <ProgramStart+0x44>)
 80016c6:	f005 febf 	bl	8007448 <puts>
	StandBy();
 80016ca:	f7ff ffdd 	bl	8001688 <StandBy>
	setvbuf(stdin, NULL, _IONBF, 0);	//scanf buffer clear
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <ProgramStart+0x48>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6858      	ldr	r0, [r3, #4]
 80016d4:	2300      	movs	r3, #0
 80016d6:	2202      	movs	r2, #2
 80016d8:	2100      	movs	r1, #0
 80016da:	f005 febd 	bl	8007458 <setvbuf>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0800b084 	.word	0x0800b084
 80016ec:	0800b098 	.word	0x0800b098
 80016f0:	20000068 	.word	0x20000068

080016f4 <cls>:

void cls()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	printf("\033[2J");
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <cls+0x10>)
 80016fa:	f005 fe3f 	bl	800737c <iprintf>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	0800b0bc 	.word	0x0800b0bc

08001708 <Cursor>:

void Cursor(int x, int y)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 8001712:	f107 000c 	add.w	r0, r7, #12
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	4906      	ldr	r1, [pc, #24]	; (8001734 <Cursor+0x2c>)
 800171c:	f005 ff4a 	bl	80075b4 <siprintf>
	puts(buf);   		//or printf("%s", buf);
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4618      	mov	r0, r3
 8001726:	f005 fe8f 	bl	8007448 <puts>
}
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	0800b0c4 	.word	0x0800b0c4

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_MspInit+0x54>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_MspInit+0x54>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_MspInit+0x54>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_MspInit+0x54>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_MspInit+0x54>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_MspInit+0x54>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	210f      	movs	r1, #15
 800177a:	f06f 0001 	mvn.w	r0, #1
 800177e:	f000 fb0d 	bl	8001d9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a0:	d10d      	bne.n	80017be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_TIM_Base_MspInit+0x3c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_TIM_Base_MspInit+0x3c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_TIM_Base_MspInit+0x3c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <HAL_UART_MspInit+0x84>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d12b      	bne.n	800184a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_UART_MspInit+0x88>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a17      	ldr	r2, [pc, #92]	; (8001858 <HAL_UART_MspInit+0x88>)
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_UART_MspInit+0x88>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_UART_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <HAL_UART_MspInit+0x88>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_UART_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800182a:	230c      	movs	r3, #12
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183a:	2307      	movs	r3, #7
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <HAL_UART_MspInit+0x8c>)
 8001846:	f000 fad3 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40004400 	.word	0x40004400
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000

08001860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <HAL_InitTick+0xd0>)
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <HAL_InitTick+0xd0>)
 800187a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187e:	6453      	str	r3, [r2, #68]	; 0x44
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_InitTick+0xd0>)
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800188c:	f107 020c 	add.w	r2, r7, #12
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f001 f910 	bl	8002abc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800189c:	f001 f8fa 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 80018a0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	4a23      	ldr	r2, [pc, #140]	; (8001934 <HAL_InitTick+0xd4>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0c9b      	lsrs	r3, r3, #18
 80018ac:	3b01      	subs	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_InitTick+0xd8>)
 80018b2:	4a22      	ldr	r2, [pc, #136]	; (800193c <HAL_InitTick+0xdc>)
 80018b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_InitTick+0xd8>)
 80018b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018bc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <HAL_InitTick+0xd8>)
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_InitTick+0xd8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_InitTick+0xd8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_InitTick+0xd8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80018d6:	4818      	ldr	r0, [pc, #96]	; (8001938 <HAL_InitTick+0xd8>)
 80018d8:	f001 f922 	bl	8002b20 <HAL_TIM_Base_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80018e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d11b      	bne.n	8001922 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80018ea:	4813      	ldr	r0, [pc, #76]	; (8001938 <HAL_InitTick+0xd8>)
 80018ec:	f001 f9c2 	bl	8002c74 <HAL_TIM_Base_Start_IT>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80018f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d111      	bne.n	8001922 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018fe:	2019      	movs	r0, #25
 8001900:	f000 fa68 	bl	8001dd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	d808      	bhi.n	800191c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800190a:	2200      	movs	r2, #0
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	2019      	movs	r0, #25
 8001910:	f000 fa44 	bl	8001d9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_InitTick+0xe0>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e002      	b.n	8001922 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001926:	4618      	mov	r0, r3
 8001928:	3730      	adds	r7, #48	; 0x30
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	431bde83 	.word	0x431bde83
 8001938:	20000548 	.word	0x20000548
 800193c:	40014400 	.word	0x40014400
 8001940:	20000004 	.word	0x20000004

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Echo_Pin);
 8001974:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001978:	f000 fbf0 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001986:	f001 f9d7 	bl	8002d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000548 	.word	0x20000548

08001994 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001998:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800199c:	f000 fbde 	bl	800215c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_kill>:

int _kill(int pid, int sig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019be:	f005 ff99 	bl	80078f4 <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2216      	movs	r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_exit>:

void _exit (int status)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e6:	e7fe      	b.n	80019e6 <_exit+0x12>

080019e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e00a      	b.n	8001a10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019fa:	f7ff fe0d 	bl	8001618 <__io_getchar>
 80019fe:	4601      	mov	r1, r0
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	b2ca      	uxtb	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf0      	blt.n	80019fa <_read+0x12>
  }

  return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e009      	b.n	8001a48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe11 	bl	8001664 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf1      	blt.n	8001a34 <_write+0x12>
  }
  return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_close>:

int _close(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a82:	605a      	str	r2, [r3, #4]
  return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_isatty>:

int _isatty(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f005 fefe 	bl	80078f4 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20020000 	.word	0x20020000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	20000590 	.word	0x20000590
 8001b2c:	20004438 	.word	0x20004438

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b58:	f7ff ffea 	bl	8001b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b5e:	490d      	ldr	r1, [pc, #52]	; (8001b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b74:	4c0a      	ldr	r4, [pc, #40]	; (8001ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b82:	f005 febd 	bl	8007900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff facd 	bl	8001124 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b98:	0800b528 	.word	0x0800b528
  ldr r2, =_sbss
 8001b9c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ba0:	20004438 	.word	0x20004438

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f8d8 	bl	8001d86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f7ff fe42 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fdac 	bl	8001738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x20>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_IncTick+0x24>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_IncTick+0x24>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008
 8001c10:	20000594 	.word	0x20000594

08001c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return uwTick;
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <HAL_GetTick+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000594 	.word	0x20000594

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <__NVIC_EnableIRQ+0x38>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff4c 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dae:	f7ff ff61 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001db2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	6978      	ldr	r0, [r7, #20]
 8001dba:	f7ff ffb1 	bl	8001d20 <NVIC_EncodePriority>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff80 	bl	8001ccc <__NVIC_SetPriority>
}
 8001dcc:	bf00      	nop
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff54 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e159      	b.n	80020c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f040 8148 	bne.w	80020ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d005      	beq.n	8001e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d130      	bne.n	8001ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 0201 	and.w	r2, r3, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d017      	beq.n	8001ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d123      	bne.n	8001f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	69b9      	ldr	r1, [r7, #24]
 8001f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0203 	and.w	r2, r3, #3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a2 	beq.w	80020ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b57      	ldr	r3, [pc, #348]	; (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a56      	ldr	r2, [pc, #344]	; (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b54      	ldr	r3, [pc, #336]	; (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f92:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_GPIO_Init+0x2ec>)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	220f      	movs	r2, #15
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a49      	ldr	r2, [pc, #292]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d019      	beq.n	8001ff2 <HAL_GPIO_Init+0x202>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a48      	ldr	r2, [pc, #288]	; (80020e4 <HAL_GPIO_Init+0x2f4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0x1fe>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a47      	ldr	r2, [pc, #284]	; (80020e8 <HAL_GPIO_Init+0x2f8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00d      	beq.n	8001fea <HAL_GPIO_Init+0x1fa>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a46      	ldr	r2, [pc, #280]	; (80020ec <HAL_GPIO_Init+0x2fc>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <HAL_GPIO_Init+0x1f6>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a45      	ldr	r2, [pc, #276]	; (80020f0 <HAL_GPIO_Init+0x300>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_GPIO_Init+0x1f2>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e008      	b.n	8001ff4 <HAL_GPIO_Init+0x204>
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x204>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e004      	b.n	8001ff4 <HAL_GPIO_Init+0x204>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_Init+0x204>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x204>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	f002 0203 	and.w	r2, r2, #3
 8001ffa:	0092      	lsls	r2, r2, #2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002004:	4935      	ldr	r1, [pc, #212]	; (80020dc <HAL_GPIO_Init+0x2ec>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_GPIO_Init+0x304>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002036:	4a2f      	ldr	r2, [pc, #188]	; (80020f4 <HAL_GPIO_Init+0x304>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_GPIO_Init+0x304>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002060:	4a24      	ldr	r2, [pc, #144]	; (80020f4 <HAL_GPIO_Init+0x304>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002066:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_GPIO_Init+0x304>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800208a:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <HAL_GPIO_Init+0x304>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_GPIO_Init+0x304>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b4:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <HAL_GPIO_Init+0x304>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3301      	adds	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b0f      	cmp	r3, #15
 80020c4:	f67f aea2 	bls.w	8001e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40013c00 	.word	0x40013c00

080020f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e001      	b.n	800211a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002138:	787b      	ldrb	r3, [r7, #1]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002144:	e003      	b.n	800214e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	041a      	lsls	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	619a      	str	r2, [r3, #24]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ff90 	bl	80010a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40013c00 	.word	0x40013c00

0800218c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e267      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d075      	beq.n	8002296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021aa:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d00c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b6:	4b85      	ldr	r3, [pc, #532]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d112      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c2:	4b82      	ldr	r3, [pc, #520]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ce:	d10b      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	4b7e      	ldr	r3, [pc, #504]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d05b      	beq.n	8002294 <HAL_RCC_OscConfig+0x108>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d157      	bne.n	8002294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e242      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f0:	d106      	bne.n	8002200 <HAL_RCC_OscConfig+0x74>
 80021f2:	4b76      	ldr	r3, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a75      	ldr	r2, [pc, #468]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e01d      	b.n	800223c <HAL_RCC_OscConfig+0xb0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x98>
 800220a:	4b70      	ldr	r3, [pc, #448]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6f      	ldr	r2, [pc, #444]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b6d      	ldr	r3, [pc, #436]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6c      	ldr	r2, [pc, #432]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0xb0>
 8002224:	4b69      	ldr	r3, [pc, #420]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a68      	ldr	r2, [pc, #416]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 800222a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b66      	ldr	r3, [pc, #408]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a65      	ldr	r2, [pc, #404]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fce6 	bl	8001c14 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fce2 	bl	8001c14 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e207      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0xc0>
 800226a:	e014      	b.n	8002296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fcd2 	bl	8001c14 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7ff fcce 	bl	8001c14 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1f3      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	4b51      	ldr	r3, [pc, #324]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0xe8>
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d063      	beq.n	800236a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022a2:	4b4a      	ldr	r3, [pc, #296]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d11c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ba:	4b44      	ldr	r3, [pc, #272]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d116      	bne.n	80022f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x152>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e1c7      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4937      	ldr	r1, [pc, #220]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	e03a      	b.n	800236a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fc:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <HAL_RCC_OscConfig+0x244>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7ff fc87 	bl	8001c14 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230a:	f7ff fc83 	bl	8001c14 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1a8      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002328:	4b28      	ldr	r3, [pc, #160]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4925      	ldr	r1, [pc, #148]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
 800233c:	e015      	b.n	800236a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_OscConfig+0x244>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7ff fc66 	bl	8001c14 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234c:	f7ff fc62 	bl	8001c14 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e187      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d036      	beq.n	80023e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d016      	beq.n	80023ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_RCC_OscConfig+0x248>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7ff fc46 	bl	8001c14 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238c:	f7ff fc42 	bl	8001c14 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e167      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80023a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x200>
 80023aa:	e01b      	b.n	80023e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_OscConfig+0x248>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7ff fc2f 	bl	8001c14 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	e00e      	b.n	80023d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ba:	f7ff fc2b 	bl	8001c14 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d907      	bls.n	80023d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e150      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
 80023cc:	40023800 	.word	0x40023800
 80023d0:	42470000 	.word	0x42470000
 80023d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80023da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ea      	bne.n	80023ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8097 	beq.w	8002520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f6:	4b81      	ldr	r3, [pc, #516]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10f      	bne.n	8002422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b7d      	ldr	r3, [pc, #500]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a7c      	ldr	r2, [pc, #496]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b7a      	ldr	r3, [pc, #488]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	4b77      	ldr	r3, [pc, #476]	; (8002600 <HAL_RCC_OscConfig+0x474>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d118      	bne.n	8002460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242e:	4b74      	ldr	r3, [pc, #464]	; (8002600 <HAL_RCC_OscConfig+0x474>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a73      	ldr	r2, [pc, #460]	; (8002600 <HAL_RCC_OscConfig+0x474>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243a:	f7ff fbeb 	bl	8001c14 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7ff fbe7 	bl	8001c14 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e10c      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_OscConfig+0x474>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x2ea>
 8002468:	4b64      	ldr	r3, [pc, #400]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a63      	ldr	r2, [pc, #396]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e01c      	b.n	80024b0 <HAL_RCC_OscConfig+0x324>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b05      	cmp	r3, #5
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x30c>
 800247e:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a5e      	ldr	r2, [pc, #376]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
 800248a:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	4a5b      	ldr	r2, [pc, #364]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6713      	str	r3, [r2, #112]	; 0x70
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0x324>
 8002498:	4b58      	ldr	r3, [pc, #352]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a57      	ldr	r2, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
 80024a4:	4b55      	ldr	r3, [pc, #340]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	4a54      	ldr	r2, [pc, #336]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80024aa:	f023 0304 	bic.w	r3, r3, #4
 80024ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d015      	beq.n	80024e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7ff fbac 	bl	8001c14 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7ff fba8 	bl	8001c14 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0cb      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d6:	4b49      	ldr	r3, [pc, #292]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0ee      	beq.n	80024c0 <HAL_RCC_OscConfig+0x334>
 80024e2:	e014      	b.n	800250e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e4:	f7ff fb96 	bl	8001c14 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f7ff fb92 	bl	8001c14 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e0b5      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002502:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ee      	bne.n	80024ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002514:	4b39      	ldr	r3, [pc, #228]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	4a38      	ldr	r2, [pc, #224]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800251a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a1 	beq.w	800266c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800252a:	4b34      	ldr	r3, [pc, #208]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d05c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d141      	bne.n	80025c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_RCC_OscConfig+0x478>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff fb66 	bl	8001c14 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff fb62 	bl	8001c14 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e087      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b27      	ldr	r3, [pc, #156]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	019b      	lsls	r3, r3, #6
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	3b01      	subs	r3, #1
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	491b      	ldr	r1, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCC_OscConfig+0x478>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7ff fb3b 	bl	8001c14 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a2:	f7ff fb37 	bl	8001c14 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e05c      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x416>
 80025c0:	e054      	b.n	800266c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_RCC_OscConfig+0x478>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fb24 	bl	8001c14 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7ff fb20 	bl	8001c14 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e045      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x444>
 80025ee:	e03d      	b.n	800266c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e038      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
 80025fc:	40023800 	.word	0x40023800
 8002600:	40007000 	.word	0x40007000
 8002604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x4ec>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d028      	beq.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d121      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d11a      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800263e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002640:	4293      	cmp	r3, r2
 8002642:	d111      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800

0800267c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0cc      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b68      	ldr	r3, [pc, #416]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d90c      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b65      	ldr	r3, [pc, #404]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b63      	ldr	r3, [pc, #396]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0b8      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d0:	4b59      	ldr	r3, [pc, #356]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a58      	ldr	r2, [pc, #352]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b50      	ldr	r3, [pc, #320]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	494d      	ldr	r1, [pc, #308]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d044      	beq.n	800279c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d119      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d003      	beq.n	800273a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002736:	2b03      	cmp	r3, #3
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e067      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4934      	ldr	r1, [pc, #208]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7ff fa52 	bl	8001c14 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7ff fa4e 	bl	8001c14 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e04f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d20c      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e032      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4916      	ldr	r1, [pc, #88]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	490e      	ldr	r1, [pc, #56]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002802:	f000 f821 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490a      	ldr	r1, [pc, #40]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	fa22 f303 	lsr.w	r3, r2, r3
 800281a:	4a09      	ldr	r2, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1c8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff f81c 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00
 8002838:	40023800 	.word	0x40023800
 800283c:	0800b0d8 	.word	0x0800b0d8
 8002840:	20000000 	.word	0x20000000
 8002844:	20000004 	.word	0x20000004

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800284c:	b094      	sub	sp, #80	; 0x50
 800284e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002860:	4b79      	ldr	r3, [pc, #484]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d00d      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x40>
 800286c:	2b08      	cmp	r3, #8
 800286e:	f200 80e1 	bhi.w	8002a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x34>
 8002876:	2b04      	cmp	r3, #4
 8002878:	d003      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0x3a>
 800287a:	e0db      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x204>)
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002880:	e0db      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002882:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002886:	e0d8      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002888:	4b6f      	ldr	r3, [pc, #444]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002890:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002892:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d063      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289e:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	2200      	movs	r2, #0
 80028a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30
 80028b2:	2300      	movs	r3, #0
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
 80028b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028ba:	4622      	mov	r2, r4
 80028bc:	462b      	mov	r3, r5
 80028be:	f04f 0000 	mov.w	r0, #0
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	0159      	lsls	r1, r3, #5
 80028c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028cc:	0150      	lsls	r0, r2, #5
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4621      	mov	r1, r4
 80028d4:	1a51      	subs	r1, r2, r1
 80028d6:	6139      	str	r1, [r7, #16]
 80028d8:	4629      	mov	r1, r5
 80028da:	eb63 0301 	sbc.w	r3, r3, r1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028ec:	4659      	mov	r1, fp
 80028ee:	018b      	lsls	r3, r1, #6
 80028f0:	4651      	mov	r1, sl
 80028f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f6:	4651      	mov	r1, sl
 80028f8:	018a      	lsls	r2, r1, #6
 80028fa:	4651      	mov	r1, sl
 80028fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002900:	4659      	mov	r1, fp
 8002902:	eb63 0901 	sbc.w	r9, r3, r1
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	4623      	mov	r3, r4
 8002920:	eb18 0303 	adds.w	r3, r8, r3
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	462b      	mov	r3, r5
 8002928:	eb49 0303 	adc.w	r3, r9, r3
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800293a:	4629      	mov	r1, r5
 800293c:	024b      	lsls	r3, r1, #9
 800293e:	4621      	mov	r1, r4
 8002940:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002944:	4621      	mov	r1, r4
 8002946:	024a      	lsls	r2, r1, #9
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294e:	2200      	movs	r2, #0
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
 8002952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002958:	f7fe f99e 	bl	8000c98 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4613      	mov	r3, r2
 8002962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002964:	e058      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	2200      	movs	r2, #0
 800296e:	4618      	mov	r0, r3
 8002970:	4611      	mov	r1, r2
 8002972:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002976:	623b      	str	r3, [r7, #32]
 8002978:	2300      	movs	r3, #0
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	0159      	lsls	r1, r3, #5
 800298e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002992:	0150      	lsls	r0, r2, #5
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4641      	mov	r1, r8
 800299a:	ebb2 0a01 	subs.w	sl, r2, r1
 800299e:	4649      	mov	r1, r9
 80029a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b8:	ebb2 040a 	subs.w	r4, r2, sl
 80029bc:	eb63 050b 	sbc.w	r5, r3, fp
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	00eb      	lsls	r3, r5, #3
 80029ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ce:	00e2      	lsls	r2, r4, #3
 80029d0:	4614      	mov	r4, r2
 80029d2:	461d      	mov	r5, r3
 80029d4:	4643      	mov	r3, r8
 80029d6:	18e3      	adds	r3, r4, r3
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	464b      	mov	r3, r9
 80029dc:	eb45 0303 	adc.w	r3, r5, r3
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ee:	4629      	mov	r1, r5
 80029f0:	028b      	lsls	r3, r1, #10
 80029f2:	4621      	mov	r1, r4
 80029f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f8:	4621      	mov	r1, r4
 80029fa:	028a      	lsls	r2, r1, #10
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a02:	2200      	movs	r2, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	61fa      	str	r2, [r7, #28]
 8002a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0c:	f7fe f944 	bl	8000c98 <__aeabi_uldivmod>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4613      	mov	r3, r2
 8002a16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	3301      	adds	r3, #1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a32:	e002      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3750      	adds	r7, #80	; 0x50
 8002a40:	46bd      	mov	sp, r7
 8002a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	00f42400 	.word	0x00f42400
 8002a50:	007a1200 	.word	0x007a1200

08002a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000000 	.word	0x20000000

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a70:	f7ff fff0 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0a9b      	lsrs	r3, r3, #10
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	0800b0e8 	.word	0x0800b0e8

08002a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a98:	f7ff ffdc 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	0b5b      	lsrs	r3, r3, #13
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	4903      	ldr	r1, [pc, #12]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	0800b0e8 	.word	0x0800b0e8

08002abc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	220f      	movs	r2, #15
 8002aca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_GetClockConfig+0x5c>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0203 	and.w	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <HAL_RCC_GetClockConfig+0x5c>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_RCC_GetClockConfig+0x5c>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <HAL_RCC_GetClockConfig+0x5c>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_RCC_GetClockConfig+0x60>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0207 	and.w	r2, r3, #7
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	601a      	str	r2, [r3, #0]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40023c00 	.word	0x40023c00

08002b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e041      	b.n	8002bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fe22 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4610      	mov	r0, r2
 8002b60:	f000 faca 	bl	80030f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d001      	beq.n	8002bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e03c      	b.n	8002c52 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_TIM_Base_Start+0xa0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d018      	beq.n	8002c1c <HAL_TIM_Base_Start+0x5c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf2:	d013      	beq.n	8002c1c <HAL_TIM_Base_Start+0x5c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_TIM_Base_Start+0xa4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00e      	beq.n	8002c1c <HAL_TIM_Base_Start+0x5c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_TIM_Base_Start+0xa8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d009      	beq.n	8002c1c <HAL_TIM_Base_Start+0x5c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_TIM_Base_Start+0xac>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_TIM_Base_Start+0x5c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <HAL_TIM_Base_Start+0xb0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d111      	bne.n	8002c40 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d010      	beq.n	8002c50 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3e:	e007      	b.n	8002c50 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40000800 	.word	0x40000800
 8002c6c:	40000c00 	.word	0x40000c00
 8002c70:	40014000 	.word	0x40014000

08002c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d001      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e044      	b.n	8002d16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_TIM_Base_Start_IT+0xb0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d018      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d013      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <HAL_TIM_Base_Start_IT+0xb4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <HAL_TIM_Base_Start_IT+0xb8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <HAL_TIM_Base_Start_IT+0xbc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <HAL_TIM_Base_Start_IT+0xc0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d111      	bne.n	8002d04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d010      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d02:	e007      	b.n	8002d14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40010000 	.word	0x40010000
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40000800 	.word	0x40000800
 8002d30:	40000c00 	.word	0x40000c00
 8002d34:	40014000 	.word	0x40014000

08002d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d020      	beq.n	8002d9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01b      	beq.n	8002d9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0202 	mvn.w	r2, #2
 8002d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f999 	bl	80030ba <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f98b 	bl	80030a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f99c 	bl	80030ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d020      	beq.n	8002de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01b      	beq.n	8002de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0204 	mvn.w	r2, #4
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f973 	bl	80030ba <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f965 	bl	80030a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f976 	bl	80030ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d020      	beq.n	8002e34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0208 	mvn.w	r2, #8
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2204      	movs	r2, #4
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f94d 	bl	80030ba <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f93f 	bl	80030a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f950 	bl	80030ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d020      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0210 	mvn.w	r2, #16
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2208      	movs	r2, #8
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f927 	bl	80030ba <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f919 	bl	80030a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f92a 	bl	80030ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0201 	mvn.w	r2, #1
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fe fba2 	bl	80015e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00c      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fab6 	bl	8003434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8fb 	bl	80030e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00c      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0220 	mvn.w	r2, #32
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fa88 	bl	8003420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_TIM_ConfigClockSource+0x1c>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e0b4      	b.n	800309e <HAL_TIM_ConfigClockSource+0x186>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6c:	d03e      	beq.n	8002fec <HAL_TIM_ConfigClockSource+0xd4>
 8002f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f72:	f200 8087 	bhi.w	8003084 <HAL_TIM_ConfigClockSource+0x16c>
 8002f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7a:	f000 8086 	beq.w	800308a <HAL_TIM_ConfigClockSource+0x172>
 8002f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f82:	d87f      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x16c>
 8002f84:	2b70      	cmp	r3, #112	; 0x70
 8002f86:	d01a      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0xa6>
 8002f88:	2b70      	cmp	r3, #112	; 0x70
 8002f8a:	d87b      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x16c>
 8002f8c:	2b60      	cmp	r3, #96	; 0x60
 8002f8e:	d050      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0x11a>
 8002f90:	2b60      	cmp	r3, #96	; 0x60
 8002f92:	d877      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x16c>
 8002f94:	2b50      	cmp	r3, #80	; 0x50
 8002f96:	d03c      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0xfa>
 8002f98:	2b50      	cmp	r3, #80	; 0x50
 8002f9a:	d873      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d058      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x13a>
 8002fa0:	2b40      	cmp	r3, #64	; 0x40
 8002fa2:	d86f      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa4:	2b30      	cmp	r3, #48	; 0x30
 8002fa6:	d064      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa8:	2b30      	cmp	r3, #48	; 0x30
 8002faa:	d86b      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x16c>
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d060      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x15a>
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d867      	bhi.n	8003084 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d05c      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x15a>
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d05a      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x15a>
 8002fbc:	e062      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fce:	f000 f999 	bl	8003304 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	609a      	str	r2, [r3, #8]
      break;
 8002fea:	e04f      	b.n	800308c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ffc:	f000 f982 	bl	8003304 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800300e:	609a      	str	r2, [r3, #8]
      break;
 8003010:	e03c      	b.n	800308c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800301e:	461a      	mov	r2, r3
 8003020:	f000 f8f6 	bl	8003210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2150      	movs	r1, #80	; 0x50
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f94f 	bl	80032ce <TIM_ITRx_SetConfig>
      break;
 8003030:	e02c      	b.n	800308c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800303e:	461a      	mov	r2, r3
 8003040:	f000 f915 	bl	800326e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2160      	movs	r1, #96	; 0x60
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f93f 	bl	80032ce <TIM_ITRx_SetConfig>
      break;
 8003050:	e01c      	b.n	800308c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800305e:	461a      	mov	r2, r3
 8003060:	f000 f8d6 	bl	8003210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2140      	movs	r1, #64	; 0x40
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f92f 	bl	80032ce <TIM_ITRx_SetConfig>
      break;
 8003070:	e00c      	b.n	800308c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	4610      	mov	r0, r2
 800307e:	f000 f926 	bl	80032ce <TIM_ITRx_SetConfig>
      break;
 8003082:	e003      	b.n	800308c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      break;
 8003088:	e000      	b.n	800308c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800308a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a3a      	ldr	r2, [pc, #232]	; (80031f4 <TIM_Base_SetConfig+0xfc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00f      	beq.n	8003130 <TIM_Base_SetConfig+0x38>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003116:	d00b      	beq.n	8003130 <TIM_Base_SetConfig+0x38>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a37      	ldr	r2, [pc, #220]	; (80031f8 <TIM_Base_SetConfig+0x100>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <TIM_Base_SetConfig+0x38>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a36      	ldr	r2, [pc, #216]	; (80031fc <TIM_Base_SetConfig+0x104>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_Base_SetConfig+0x38>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a35      	ldr	r2, [pc, #212]	; (8003200 <TIM_Base_SetConfig+0x108>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d108      	bne.n	8003142 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2b      	ldr	r2, [pc, #172]	; (80031f4 <TIM_Base_SetConfig+0xfc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01b      	beq.n	8003182 <TIM_Base_SetConfig+0x8a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003150:	d017      	beq.n	8003182 <TIM_Base_SetConfig+0x8a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a28      	ldr	r2, [pc, #160]	; (80031f8 <TIM_Base_SetConfig+0x100>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <TIM_Base_SetConfig+0x8a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <TIM_Base_SetConfig+0x104>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00f      	beq.n	8003182 <TIM_Base_SetConfig+0x8a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a26      	ldr	r2, [pc, #152]	; (8003200 <TIM_Base_SetConfig+0x108>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00b      	beq.n	8003182 <TIM_Base_SetConfig+0x8a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a25      	ldr	r2, [pc, #148]	; (8003204 <TIM_Base_SetConfig+0x10c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <TIM_Base_SetConfig+0x8a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a24      	ldr	r2, [pc, #144]	; (8003208 <TIM_Base_SetConfig+0x110>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_Base_SetConfig+0x8a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a23      	ldr	r2, [pc, #140]	; (800320c <TIM_Base_SetConfig+0x114>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d108      	bne.n	8003194 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <TIM_Base_SetConfig+0xfc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d103      	bne.n	80031c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d105      	bne.n	80031e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f023 0201 	bic.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	611a      	str	r2, [r3, #16]
  }
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40010000 	.word	0x40010000
 80031f8:	40000400 	.word	0x40000400
 80031fc:	40000800 	.word	0x40000800
 8003200:	40000c00 	.word	0x40000c00
 8003204:	40014000 	.word	0x40014000
 8003208:	40014400 	.word	0x40014400
 800320c:	40014800 	.word	0x40014800

08003210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f023 0201 	bic.w	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800323a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 030a 	bic.w	r3, r3, #10
 800324c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800326e:	b480      	push	{r7}
 8003270:	b087      	sub	sp, #28
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f023 0210 	bic.w	r2, r3, #16
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	031b      	lsls	r3, r3, #12
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f043 0307 	orr.w	r3, r3, #7
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800331e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	021a      	lsls	r2, r3, #8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	431a      	orrs	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4313      	orrs	r3, r2
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003358:	2302      	movs	r3, #2
 800335a:	e050      	b.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1c      	ldr	r2, [pc, #112]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d013      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a18      	ldr	r2, [pc, #96]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a16      	ldr	r2, [pc, #88]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10c      	bne.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40014000 	.word	0x40014000

08003420 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e042      	b.n	80034e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fe f9ae 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2224      	movs	r2, #36	; 0x24
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800348a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fa09 	bl	80038a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b20      	cmp	r3, #32
 8003506:	d175      	bne.n	80035f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_UART_Transmit+0x2c>
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e06e      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2221      	movs	r2, #33	; 0x21
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003526:	f7fe fb75 	bl	8001c14 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d108      	bne.n	8003554 <HAL_UART_Transmit+0x6c>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	e003      	b.n	800355c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800355c:	e02e      	b.n	80035bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f8df 	bl	800372c <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e03a      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003594:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	3302      	adds	r3, #2
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	e007      	b.n	80035ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3301      	adds	r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1cb      	bne.n	800355e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2140      	movs	r1, #64	; 0x40
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f8ab 	bl	800372c <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b08a      	sub	sp, #40	; 0x28
 8003602:	af02      	add	r7, sp, #8
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	f040 8081 	bne.w	8003722 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_UART_Receive+0x2e>
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e079      	b.n	8003724 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2222      	movs	r2, #34	; 0x22
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003644:	f7fe fae6 	bl	8001c14 <HAL_GetTick>
 8003648:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365e:	d108      	bne.n	8003672 <HAL_UART_Receive+0x74>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d104      	bne.n	8003672 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e003      	b.n	800367a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800367a:	e047      	b.n	800370c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2200      	movs	r2, #0
 8003684:	2120      	movs	r1, #32
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f850 	bl	800372c <UART_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e042      	b.n	8003724 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10c      	bne.n	80036be <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	3302      	adds	r3, #2
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	e01f      	b.n	80036fe <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c6:	d007      	beq.n	80036d8 <HAL_UART_Receive+0xda>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <HAL_UART_Receive+0xe8>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e008      	b.n	80036f8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	3301      	adds	r3, #1
 80036fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1b2      	bne.n	800367c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
  }
}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800373c:	e03b      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d037      	beq.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003746:	f7fe fa65 	bl	8001c14 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	429a      	cmp	r2, r3
 8003754:	d302      	bcc.n	800375c <UART_WaitOnFlagUntilTimeout+0x30>
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e03a      	b.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d023      	beq.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d020      	beq.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d01d      	beq.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d116      	bne.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f81d 	bl	80037de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2208      	movs	r2, #8
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00f      	b.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4013      	ands	r3, r2
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d0b4      	beq.n	800373e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037de:	b480      	push	{r7}
 80037e0:	b095      	sub	sp, #84	; 0x54
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003806:	643a      	str	r2, [r7, #64]	; 0x40
 8003808:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800380c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e5      	bne.n	80037e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3314      	adds	r3, #20
 8003820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	61fb      	str	r3, [r7, #28]
   return(result);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	64bb      	str	r3, [r7, #72]	; 0x48
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3314      	adds	r3, #20
 8003838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800383a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e5      	bne.n	800381a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	2b01      	cmp	r3, #1
 8003854:	d119      	bne.n	800388a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	60bb      	str	r3, [r7, #8]
   return(result);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f023 0310 	bic.w	r3, r3, #16
 800386c:	647b      	str	r3, [r7, #68]	; 0x44
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003876:	61ba      	str	r2, [r7, #24]
 8003878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	613b      	str	r3, [r7, #16]
   return(result);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e5      	bne.n	8003856 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003898:	bf00      	nop
 800389a:	3754      	adds	r7, #84	; 0x54
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a8:	b0c0      	sub	sp, #256	; 0x100
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	68d9      	ldr	r1, [r3, #12]
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	ea40 0301 	orr.w	r3, r0, r1
 80038cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	431a      	orrs	r2, r3
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038fc:	f021 010c 	bic.w	r1, r1, #12
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800390a:	430b      	orrs	r3, r1
 800390c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391e:	6999      	ldr	r1, [r3, #24]
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	ea40 0301 	orr.w	r3, r0, r1
 800392a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b8f      	ldr	r3, [pc, #572]	; (8003b70 <UART_SetConfig+0x2cc>)
 8003934:	429a      	cmp	r2, r3
 8003936:	d005      	beq.n	8003944 <UART_SetConfig+0xa0>
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b8d      	ldr	r3, [pc, #564]	; (8003b74 <UART_SetConfig+0x2d0>)
 8003940:	429a      	cmp	r2, r3
 8003942:	d104      	bne.n	800394e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003944:	f7ff f8a6 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 8003948:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800394c:	e003      	b.n	8003956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800394e:	f7ff f88d 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003952:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003960:	f040 810c 	bne.w	8003b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003968:	2200      	movs	r2, #0
 800396a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800396e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003976:	4622      	mov	r2, r4
 8003978:	462b      	mov	r3, r5
 800397a:	1891      	adds	r1, r2, r2
 800397c:	65b9      	str	r1, [r7, #88]	; 0x58
 800397e:	415b      	adcs	r3, r3
 8003980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003986:	4621      	mov	r1, r4
 8003988:	eb12 0801 	adds.w	r8, r2, r1
 800398c:	4629      	mov	r1, r5
 800398e:	eb43 0901 	adc.w	r9, r3, r1
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800399e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039a6:	4690      	mov	r8, r2
 80039a8:	4699      	mov	r9, r3
 80039aa:	4623      	mov	r3, r4
 80039ac:	eb18 0303 	adds.w	r3, r8, r3
 80039b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039b4:	462b      	mov	r3, r5
 80039b6:	eb49 0303 	adc.w	r3, r9, r3
 80039ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039d2:	460b      	mov	r3, r1
 80039d4:	18db      	adds	r3, r3, r3
 80039d6:	653b      	str	r3, [r7, #80]	; 0x50
 80039d8:	4613      	mov	r3, r2
 80039da:	eb42 0303 	adc.w	r3, r2, r3
 80039de:	657b      	str	r3, [r7, #84]	; 0x54
 80039e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039e8:	f7fd f956 	bl	8000c98 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4b61      	ldr	r3, [pc, #388]	; (8003b78 <UART_SetConfig+0x2d4>)
 80039f2:	fba3 2302 	umull	r2, r3, r3, r2
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	011c      	lsls	r4, r3, #4
 80039fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	1891      	adds	r1, r2, r2
 8003a12:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a14:	415b      	adcs	r3, r3
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a22:	4649      	mov	r1, r9
 8003a24:	eb43 0b01 	adc.w	fp, r3, r1
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a3c:	4692      	mov	sl, r2
 8003a3e:	469b      	mov	fp, r3
 8003a40:	4643      	mov	r3, r8
 8003a42:	eb1a 0303 	adds.w	r3, sl, r3
 8003a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	18db      	adds	r3, r3, r3
 8003a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a6e:	4613      	mov	r3, r2
 8003a70:	eb42 0303 	adc.w	r3, r2, r3
 8003a74:	647b      	str	r3, [r7, #68]	; 0x44
 8003a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a7e:	f7fd f90b 	bl	8000c98 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <UART_SetConfig+0x2d4>)
 8003a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2264      	movs	r2, #100	; 0x64
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	1acb      	subs	r3, r1, r3
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a9e:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <UART_SetConfig+0x2d4>)
 8003aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003aac:	441c      	add	r4, r3
 8003aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	1891      	adds	r1, r2, r2
 8003ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ac8:	415b      	adcs	r3, r3
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	1851      	adds	r1, r2, r1
 8003ad4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	414b      	adcs	r3, r1
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ae8:	4659      	mov	r1, fp
 8003aea:	00cb      	lsls	r3, r1, #3
 8003aec:	4651      	mov	r1, sl
 8003aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af2:	4651      	mov	r1, sl
 8003af4:	00ca      	lsls	r2, r1, #3
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	4642      	mov	r2, r8
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b04:	464b      	mov	r3, r9
 8003b06:	460a      	mov	r2, r1
 8003b08:	eb42 0303 	adc.w	r3, r2, r3
 8003b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b24:	460b      	mov	r3, r1
 8003b26:	18db      	adds	r3, r3, r3
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b3a:	f7fd f8ad 	bl	8000c98 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <UART_SetConfig+0x2d4>)
 8003b44:	fba3 1302 	umull	r1, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	2164      	movs	r1, #100	; 0x64
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	3332      	adds	r3, #50	; 0x32
 8003b56:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <UART_SetConfig+0x2d4>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	f003 0207 	and.w	r2, r3, #7
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4422      	add	r2, r4
 8003b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b6c:	e106      	b.n	8003d7c <UART_SetConfig+0x4d8>
 8003b6e:	bf00      	nop
 8003b70:	40011000 	.word	0x40011000
 8003b74:	40011400 	.word	0x40011400
 8003b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b80:	2200      	movs	r2, #0
 8003b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b8e:	4642      	mov	r2, r8
 8003b90:	464b      	mov	r3, r9
 8003b92:	1891      	adds	r1, r2, r2
 8003b94:	6239      	str	r1, [r7, #32]
 8003b96:	415b      	adcs	r3, r3
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b9e:	4641      	mov	r1, r8
 8003ba0:	1854      	adds	r4, r2, r1
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	eb43 0501 	adc.w	r5, r3, r1
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	00eb      	lsls	r3, r5, #3
 8003bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb6:	00e2      	lsls	r2, r4, #3
 8003bb8:	4614      	mov	r4, r2
 8003bba:	461d      	mov	r5, r3
 8003bbc:	4643      	mov	r3, r8
 8003bbe:	18e3      	adds	r3, r4, r3
 8003bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bc4:	464b      	mov	r3, r9
 8003bc6:	eb45 0303 	adc.w	r3, r5, r3
 8003bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bea:	4629      	mov	r1, r5
 8003bec:	008b      	lsls	r3, r1, #2
 8003bee:	4621      	mov	r1, r4
 8003bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	008a      	lsls	r2, r1, #2
 8003bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bfc:	f7fd f84c 	bl	8000c98 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <UART_SetConfig+0x4e4>)
 8003c06:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	011c      	lsls	r4, r3, #4
 8003c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	1891      	adds	r1, r2, r2
 8003c26:	61b9      	str	r1, [r7, #24]
 8003c28:	415b      	adcs	r3, r3
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c30:	4641      	mov	r1, r8
 8003c32:	1851      	adds	r1, r2, r1
 8003c34:	6139      	str	r1, [r7, #16]
 8003c36:	4649      	mov	r1, r9
 8003c38:	414b      	adcs	r3, r1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c48:	4659      	mov	r1, fp
 8003c4a:	00cb      	lsls	r3, r1, #3
 8003c4c:	4651      	mov	r1, sl
 8003c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c52:	4651      	mov	r1, sl
 8003c54:	00ca      	lsls	r2, r1, #3
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	189b      	adds	r3, r3, r2
 8003c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c64:	464b      	mov	r3, r9
 8003c66:	460a      	mov	r2, r1
 8003c68:	eb42 0303 	adc.w	r3, r2, r3
 8003c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c88:	4649      	mov	r1, r9
 8003c8a:	008b      	lsls	r3, r1, #2
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c92:	4641      	mov	r1, r8
 8003c94:	008a      	lsls	r2, r1, #2
 8003c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c9a:	f7fc fffd 	bl	8000c98 <__aeabi_uldivmod>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4b38      	ldr	r3, [pc, #224]	; (8003d88 <UART_SetConfig+0x4e4>)
 8003ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	2264      	movs	r2, #100	; 0x64
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	1acb      	subs	r3, r1, r3
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	3332      	adds	r3, #50	; 0x32
 8003cb8:	4a33      	ldr	r2, [pc, #204]	; (8003d88 <UART_SetConfig+0x4e4>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc4:	441c      	add	r4, r3
 8003cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cca:	2200      	movs	r2, #0
 8003ccc:	673b      	str	r3, [r7, #112]	; 0x70
 8003cce:	677a      	str	r2, [r7, #116]	; 0x74
 8003cd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	1891      	adds	r1, r2, r2
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	1851      	adds	r1, r2, r1
 8003ce8:	6039      	str	r1, [r7, #0]
 8003cea:	4649      	mov	r1, r9
 8003cec:	414b      	adcs	r3, r1
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	00cb      	lsls	r3, r1, #3
 8003d00:	4651      	mov	r1, sl
 8003d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d06:	4651      	mov	r1, sl
 8003d08:	00ca      	lsls	r2, r1, #3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4642      	mov	r2, r8
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d16:	464b      	mov	r3, r9
 8003d18:	460a      	mov	r2, r1
 8003d1a:	eb42 0303 	adc.w	r3, r2, r3
 8003d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	663b      	str	r3, [r7, #96]	; 0x60
 8003d2a:	667a      	str	r2, [r7, #100]	; 0x64
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d38:	4649      	mov	r1, r9
 8003d3a:	008b      	lsls	r3, r1, #2
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d42:	4641      	mov	r1, r8
 8003d44:	008a      	lsls	r2, r1, #2
 8003d46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d4a:	f7fc ffa5 	bl	8000c98 <__aeabi_uldivmod>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <UART_SetConfig+0x4e4>)
 8003d54:	fba3 1302 	umull	r1, r3, r3, r2
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	2164      	movs	r1, #100	; 0x64
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	3332      	adds	r3, #50	; 0x32
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <UART_SetConfig+0x4e4>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	f003 020f 	and.w	r2, r3, #15
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4422      	add	r2, r4
 8003d7a:	609a      	str	r2, [r3, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d82:	46bd      	mov	sp, r7
 8003d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d88:	51eb851f 	.word	0x51eb851f

08003d8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d9e:	2b84      	cmp	r3, #132	; 0x84
 8003da0:	d005      	beq.n	8003dae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003da2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	3303      	adds	r3, #3
 8003dac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003dae:	68fb      	ldr	r3, [r7, #12]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dc2:	f3ef 8305 	mrs	r3, IPSR
 8003dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8003dc8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003de4:	f001 f926 	bl	8005034 <vTaskStartScheduler>
  
  return osOK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	bd80      	pop	{r7, pc}

08003dee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df0:	b089      	sub	sp, #36	; 0x24
 8003df2:	af04      	add	r7, sp, #16
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <osThreadCreate+0x54>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01c      	beq.n	8003e42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685c      	ldr	r4, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691e      	ldr	r6, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ffb6 	bl	8003d8c <makeFreeRtosPriority>
 8003e20:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e2a:	9202      	str	r2, [sp, #8]
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	9100      	str	r1, [sp, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4632      	mov	r2, r6
 8003e34:	4629      	mov	r1, r5
 8003e36:	4620      	mov	r0, r4
 8003e38:	f000 ff1e 	bl	8004c78 <xTaskCreateStatic>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e01c      	b.n	8003e7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685c      	ldr	r4, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e4e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ff98 	bl	8003d8c <makeFreeRtosPriority>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	f107 030c 	add.w	r3, r7, #12
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	9200      	str	r2, [sp, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	4632      	mov	r2, r6
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f000 ff60 	bl	8004d32 <xTaskCreate>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d001      	beq.n	8003e7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <osDelay+0x16>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	e000      	b.n	8003e9e <osDelay+0x18>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 f894 	bl	8004fcc <vTaskDelay>
  
  return osOK;
 8003ea4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b086      	sub	sp, #24
 8003eb2:	af02      	add	r7, sp, #8
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00f      	beq.n	8003ee0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d10a      	bne.n	8003edc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2203      	movs	r2, #3
 8003ecc:	9200      	str	r2, [sp, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f000 f9be 	bl	8004254 <xQueueGenericCreateStatic>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	e016      	b.n	8003f0a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e014      	b.n	8003f0a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d110      	bne.n	8003f08 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	2100      	movs	r1, #0
 8003eea:	2001      	movs	r0, #1
 8003eec:	f000 fa2a 	bl	8004344 <xQueueGenericCreate>
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <osSemaphoreCreate+0x56>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2200      	movs	r2, #0
 8003efc:	2100      	movs	r1, #0
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fa7a 	bl	80043f8 <xQueueGenericSend>
      return sema;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	e000      	b.n	8003f0a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003f08:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	e03a      	b.n	8003fa2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	d103      	bne.n	8003f40 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003f38:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e009      	b.n	8003f54 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d006      	beq.n	8003f54 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <osSemaphoreWait+0x40>
      ticks = 1;
 8003f50:	2301      	movs	r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003f54:	f7ff ff32 	bl	8003dbc <inHandlerMode>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d017      	beq.n	8003f8e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003f5e:	f107 0308 	add.w	r3, r7, #8
 8003f62:	461a      	mov	r2, r3
 8003f64:	2100      	movs	r1, #0
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fcde 	bl	8004928 <xQueueReceiveFromISR>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d001      	beq.n	8003f76 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003f72:	23ff      	movs	r3, #255	; 0xff
 8003f74:	e015      	b.n	8003fa2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d011      	beq.n	8003fa0 <osSemaphoreWait+0x8c>
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <osSemaphoreWait+0x98>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	e008      	b.n	8003fa0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fbbd 	bl	8004710 <xQueueSemaphoreTake>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d001      	beq.n	8003fa0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003f9c:	23ff      	movs	r3, #255	; 0xff
 8003f9e:	e000      	b.n	8003fa2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003fc0:	f7ff fefc 	bl	8003dbc <inHandlerMode>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003fca:	f107 0308 	add.w	r3, r7, #8
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fb0f 	bl	80045f4 <xQueueGiveFromISR>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d001      	beq.n	8003fe0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003fdc:	23ff      	movs	r3, #255	; 0xff
 8003fde:	e017      	b.n	8004010 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d013      	beq.n	800400e <osSemaphoreRelease+0x5e>
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <osSemaphoreRelease+0x68>)
 8003fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	e00a      	b.n	800400e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f9fa 	bl	80043f8 <xQueueGenericSend>
 8004004:	4603      	mov	r3, r0
 8004006:	2b01      	cmp	r3, #1
 8004008:	d001      	beq.n	800400e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800400a:	23ff      	movs	r3, #255	; 0xff
 800400c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f103 0208 	add.w	r2, r3, #8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f04f 32ff 	mov.w	r2, #4294967295
 8004034:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f103 0208 	add.w	r2, r3, #8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f103 0208 	add.w	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	601a      	str	r2, [r3, #0]
}
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d103      	bne.n	80040de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	e00c      	b.n	80040f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3308      	adds	r3, #8
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e002      	b.n	80040ec <vListInsert+0x2e>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d2f6      	bcs.n	80040e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	601a      	str	r2, [r3, #0]
}
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6892      	ldr	r2, [r2, #8]
 8004146:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6852      	ldr	r2, [r2, #4]
 8004150:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	429a      	cmp	r2, r3
 800415a:	d103      	bne.n	8004164 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	1e5a      	subs	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80041ae:	f001 fea1 	bl	8005ef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	441a      	add	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	3b01      	subs	r3, #1
 80041e0:	68f9      	ldr	r1, [r7, #12]
 80041e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	441a      	add	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	22ff      	movs	r2, #255	; 0xff
 80041f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	22ff      	movs	r2, #255	; 0xff
 80041fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d114      	bne.n	800422e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01a      	beq.n	8004242 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3310      	adds	r3, #16
 8004210:	4618      	mov	r0, r3
 8004212:	f001 f961 	bl	80054d8 <xTaskRemoveFromEventList>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d012      	beq.n	8004242 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <xQueueGenericReset+0xcc>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	e009      	b.n	8004242 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3310      	adds	r3, #16
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fef2 	bl	800401c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3324      	adds	r3, #36	; 0x24
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff feed 	bl	800401c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004242:	f001 fe87 	bl	8005f54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004246:	2301      	movs	r3, #1
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08e      	sub	sp, #56	; 0x38
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <xQueueGenericCreateStatic+0x52>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <xQueueGenericCreateStatic+0x56>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xQueueGenericCreateStatic+0x58>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	623b      	str	r3, [r7, #32]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <xQueueGenericCreateStatic+0x7e>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <xQueueGenericCreateStatic+0x82>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <xQueueGenericCreateStatic+0x84>
 80042d6:	2300      	movs	r3, #0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	61fb      	str	r3, [r7, #28]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042f2:	2348      	movs	r3, #72	; 0x48
 80042f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b48      	cmp	r3, #72	; 0x48
 80042fa:	d00a      	beq.n	8004312 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	61bb      	str	r3, [r7, #24]
}
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004312:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00d      	beq.n	800433a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004326:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f83f 	bl	80043b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800433c:	4618      	mov	r0, r3
 800433e:	3730      	adds	r7, #48	; 0x30
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	613b      	str	r3, [r7, #16]
}
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	3348      	adds	r3, #72	; 0x48
 800437c:	4618      	mov	r0, r3
 800437e:	f001 fedb 	bl	8006138 <pvPortMalloc>
 8004382:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d011      	beq.n	80043ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3348      	adds	r3, #72	; 0x48
 8004392:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800439c:	79fa      	ldrb	r2, [r7, #7]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f805 	bl	80043b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043ae:	69bb      	ldr	r3, [r7, #24]
	}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d103      	bne.n	80043d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e002      	b.n	80043da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043e6:	2101      	movs	r1, #1
 80043e8:	69b8      	ldr	r0, [r7, #24]
 80043ea:	f7ff fecb 	bl	8004184 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08e      	sub	sp, #56	; 0x38
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004406:	2300      	movs	r3, #0
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10a      	bne.n	800442a <xQueueGenericSend+0x32>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <xQueueGenericSend+0x40>
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <xQueueGenericSend+0x44>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <xQueueGenericSend+0x46>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <xQueueGenericSend+0x60>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d103      	bne.n	8004466 <xQueueGenericSend+0x6e>
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <xQueueGenericSend+0x72>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <xQueueGenericSend+0x74>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <xQueueGenericSend+0x8e>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	623b      	str	r3, [r7, #32]
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004486:	f001 f9e7 	bl	8005858 <xTaskGetSchedulerState>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <xQueueGenericSend+0x9e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <xQueueGenericSend+0xa2>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <xQueueGenericSend+0xa4>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	61fb      	str	r3, [r7, #28]
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044b6:	f001 fd1d 	bl	8005ef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <xQueueGenericSend+0xd4>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d129      	bne.n	8004520 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044d2:	f000 fac1 	bl	8004a58 <prvCopyDataToQueue>
 80044d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d010      	beq.n	8004502 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	3324      	adds	r3, #36	; 0x24
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fff7 	bl	80054d8 <xTaskRemoveFromEventList>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044f0:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <xQueueGenericSend+0x1f8>)
 80044f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	e00a      	b.n	8004518 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004508:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <xQueueGenericSend+0x1f8>)
 800450a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004518:	f001 fd1c 	bl	8005f54 <vPortExitCritical>
				return pdPASS;
 800451c:	2301      	movs	r3, #1
 800451e:	e063      	b.n	80045e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004526:	f001 fd15 	bl	8005f54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800452a:	2300      	movs	r3, #0
 800452c:	e05c      	b.n	80045e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004534:	f107 0314 	add.w	r3, r7, #20
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f82f 	bl	800559c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800453e:	2301      	movs	r3, #1
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004542:	f001 fd07 	bl	8005f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004546:	f000 fddf 	bl	8005108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800454a:	f001 fcd3 	bl	8005ef4 <vPortEnterCritical>
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004554:	b25b      	sxtb	r3, r3
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d103      	bne.n	8004564 <xQueueGenericSend+0x16c>
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800456a:	b25b      	sxtb	r3, r3
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d103      	bne.n	800457a <xQueueGenericSend+0x182>
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800457a:	f001 fceb 	bl	8005f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800457e:	1d3a      	adds	r2, r7, #4
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f81e 	bl	80055c8 <xTaskCheckForTimeOut>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d124      	bne.n	80045dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004594:	f000 fb58 	bl	8004c48 <prvIsQueueFull>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d018      	beq.n	80045d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	3310      	adds	r3, #16
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 ff72 	bl	8005490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ae:	f000 fae3 	bl	8004b78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045b2:	f000 fdb7 	bl	8005124 <xTaskResumeAll>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f47f af7c 	bne.w	80044b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <xQueueGenericSend+0x1f8>)
 80045c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	e772      	b.n	80044b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045d2:	f000 fad1 	bl	8004b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045d6:	f000 fda5 	bl	8005124 <xTaskResumeAll>
 80045da:	e76c      	b.n	80044b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045de:	f000 facb 	bl	8004b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045e2:	f000 fd9f 	bl	8005124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3738      	adds	r7, #56	; 0x38
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08e      	sub	sp, #56	; 0x38
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	623b      	str	r3, [r7, #32]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <xQueueGiveFromISR+0x48>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	61fb      	str	r3, [r7, #28]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <xQueueGiveFromISR+0x58>
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <xQueueGiveFromISR+0x5c>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <xQueueGiveFromISR+0x5e>
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <xQueueGiveFromISR+0x78>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	61bb      	str	r3, [r7, #24]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800466c:	f001 fd24 	bl	80060b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004670:	f3ef 8211 	mrs	r2, BASEPRI
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	617a      	str	r2, [r7, #20]
 8004686:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004688:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800468a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004698:	429a      	cmp	r2, r3
 800469a:	d22b      	bcs.n	80046f4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d112      	bne.n	80046de <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d016      	beq.n	80046ee <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	3324      	adds	r3, #36	; 0x24
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 ff07 	bl	80054d8 <xTaskRemoveFromEventList>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	e007      	b.n	80046ee <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046e2:	3301      	adds	r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	b25a      	sxtb	r2, r3
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046ee:	2301      	movs	r3, #1
 80046f0:	637b      	str	r3, [r7, #52]	; 0x34
 80046f2:	e001      	b.n	80046f8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004702:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004706:	4618      	mov	r0, r3
 8004708:	3738      	adds	r7, #56	; 0x38
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08e      	sub	sp, #56	; 0x38
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004722:	2300      	movs	r3, #0
 8004724:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	623b      	str	r3, [r7, #32]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	61fb      	str	r3, [r7, #28]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004760:	f001 f87a 	bl	8005858 <xTaskGetSchedulerState>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <xQueueSemaphoreTake+0x60>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <xQueueSemaphoreTake+0x64>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <xQueueSemaphoreTake+0x66>
 8004774:	2300      	movs	r3, #0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	61bb      	str	r3, [r7, #24]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004790:	f001 fbb0 	bl	8005ef4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	2b00      	cmp	r3, #0
 800479e:	d024      	beq.n	80047ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	1e5a      	subs	r2, r3, #1
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80047b0:	f001 f9fa 	bl	8005ba8 <pvTaskIncrementMutexHeldCount>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00f      	beq.n	80047e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	3310      	adds	r3, #16
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fe86 	bl	80054d8 <xTaskRemoveFromEventList>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047d2:	4b54      	ldr	r3, [pc, #336]	; (8004924 <xQueueSemaphoreTake+0x214>)
 80047d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047e2:	f001 fbb7 	bl	8005f54 <vPortExitCritical>
				return pdPASS;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e097      	b.n	800491a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d111      	bne.n	8004814 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	617b      	str	r3, [r7, #20]
}
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800480c:	f001 fba2 	bl	8005f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004810:	2300      	movs	r3, #0
 8004812:	e082      	b.n	800491a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800481a:	f107 030c 	add.w	r3, r7, #12
 800481e:	4618      	mov	r0, r3
 8004820:	f000 febc 	bl	800559c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004828:	f001 fb94 	bl	8005f54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800482c:	f000 fc6c 	bl	8005108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004830:	f001 fb60 	bl	8005ef4 <vPortEnterCritical>
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800483a:	b25b      	sxtb	r3, r3
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d103      	bne.n	800484a <xQueueSemaphoreTake+0x13a>
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004850:	b25b      	sxtb	r3, r3
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	d103      	bne.n	8004860 <xQueueSemaphoreTake+0x150>
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004860:	f001 fb78 	bl	8005f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004864:	463a      	mov	r2, r7
 8004866:	f107 030c 	add.w	r3, r7, #12
 800486a:	4611      	mov	r1, r2
 800486c:	4618      	mov	r0, r3
 800486e:	f000 feab 	bl	80055c8 <xTaskCheckForTimeOut>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d132      	bne.n	80048de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800487a:	f000 f9cf 	bl	8004c1c <prvIsQueueEmpty>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d026      	beq.n	80048d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800488c:	f001 fb32 	bl	8005ef4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fffd 	bl	8005894 <xTaskPriorityInherit>
 800489a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800489c:	f001 fb5a 	bl	8005f54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	3324      	adds	r3, #36	; 0x24
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	4611      	mov	r1, r2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fdf1 	bl	8005490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048b0:	f000 f962 	bl	8004b78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048b4:	f000 fc36 	bl	8005124 <xTaskResumeAll>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f47f af68 	bne.w	8004790 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80048c0:	4b18      	ldr	r3, [pc, #96]	; (8004924 <xQueueSemaphoreTake+0x214>)
 80048c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	e75e      	b.n	8004790 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80048d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048d4:	f000 f950 	bl	8004b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048d8:	f000 fc24 	bl	8005124 <xTaskResumeAll>
 80048dc:	e758      	b.n	8004790 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80048de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048e0:	f000 f94a 	bl	8004b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048e4:	f000 fc1e 	bl	8005124 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048ea:	f000 f997 	bl	8004c1c <prvIsQueueEmpty>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f43f af4d 	beq.w	8004790 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00d      	beq.n	8004918 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80048fc:	f001 fafa 	bl	8005ef4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004902:	f000 f891 	bl	8004a28 <prvGetDisinheritPriorityAfterTimeout>
 8004906:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800490e:	4618      	mov	r0, r3
 8004910:	f001 f8bc 	bl	8005a8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004914:	f001 fb1e 	bl	8005f54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004918:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800491a:	4618      	mov	r0, r3
 800491c:	3738      	adds	r7, #56	; 0x38
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08e      	sub	sp, #56	; 0x38
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	623b      	str	r3, [r7, #32]
}
 8004950:	bf00      	nop
 8004952:	e7fe      	b.n	8004952 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <xQueueReceiveFromISR+0x3a>
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <xQueueReceiveFromISR+0x3e>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <xQueueReceiveFromISR+0x40>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	61fb      	str	r3, [r7, #28]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004982:	f001 fb99 	bl	80060b8 <vPortValidateInterruptPriority>
	__asm volatile
 8004986:	f3ef 8211 	mrs	r2, BASEPRI
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	61ba      	str	r2, [r7, #24]
 800499c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800499e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d02f      	beq.n	8004a0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049bc:	f000 f8b6 	bl	8004b2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	1e5a      	subs	r2, r3, #1
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80049c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d112      	bne.n	80049f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	3310      	adds	r3, #16
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fd7a 	bl	80054d8 <xTaskRemoveFromEventList>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00e      	beq.n	8004a08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e007      	b.n	8004a08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80049f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049fc:	3301      	adds	r3, #1
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	b25a      	sxtb	r2, r3
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0c:	e001      	b.n	8004a12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f383 8811 	msr	BASEPRI, r3
}
 8004a1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3738      	adds	r7, #56	; 0x38
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d006      	beq.n	8004a46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f1c3 0307 	rsb	r3, r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e001      	b.n	8004a4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
	}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d14d      	bne.n	8004b1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 ff7c 	bl	8005980 <xTaskPriorityDisinherit>
 8004a88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
 8004a90:	e043      	b.n	8004b1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d119      	bne.n	8004acc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6858      	ldr	r0, [r3, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	f002 ff53 	bl	800794e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	441a      	add	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d32b      	bcc.n	8004b1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	e026      	b.n	8004b1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68d8      	ldr	r0, [r3, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	f002 ff39 	bl	800794e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	425b      	negs	r3, r3
 8004ae6:	441a      	add	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d207      	bcs.n	8004b08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	425b      	negs	r3, r3
 8004b02:	441a      	add	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d105      	bne.n	8004b1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b22:	697b      	ldr	r3, [r7, #20]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d018      	beq.n	8004b70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	441a      	add	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d303      	bcc.n	8004b60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68d9      	ldr	r1, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6838      	ldr	r0, [r7, #0]
 8004b6c:	f002 feef 	bl	800794e <memcpy>
	}
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b80:	f001 f9b8 	bl	8005ef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b8c:	e011      	b.n	8004bb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d012      	beq.n	8004bbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3324      	adds	r3, #36	; 0x24
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fc9c 	bl	80054d8 <xTaskRemoveFromEventList>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ba6:	f000 fd71 	bl	800568c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	dce9      	bgt.n	8004b8e <prvUnlockQueue+0x16>
 8004bba:	e000      	b.n	8004bbe <prvUnlockQueue+0x46>
					break;
 8004bbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	22ff      	movs	r2, #255	; 0xff
 8004bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bc6:	f001 f9c5 	bl	8005f54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bca:	f001 f993 	bl	8005ef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bd6:	e011      	b.n	8004bfc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d012      	beq.n	8004c06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3310      	adds	r3, #16
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fc77 	bl	80054d8 <xTaskRemoveFromEventList>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bf0:	f000 fd4c 	bl	800568c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bf4:	7bbb      	ldrb	r3, [r7, #14]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dce9      	bgt.n	8004bd8 <prvUnlockQueue+0x60>
 8004c04:	e000      	b.n	8004c08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	22ff      	movs	r2, #255	; 0xff
 8004c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c10:	f001 f9a0 	bl	8005f54 <vPortExitCritical>
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c24:	f001 f966 	bl	8005ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e001      	b.n	8004c3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c3a:	f001 f98b 	bl	8005f54 <vPortExitCritical>

	return xReturn;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c50:	f001 f950 	bl	8005ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d102      	bne.n	8004c66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e001      	b.n	8004c6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c6a:	f001 f973 	bl	8005f54 <vPortExitCritical>

	return xReturn;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08e      	sub	sp, #56	; 0x38
 8004c7c:	af04      	add	r7, sp, #16
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	623b      	str	r3, [r7, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xTaskCreateStatic+0x46>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	61fb      	str	r3, [r7, #28]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cbe:	23a0      	movs	r3, #160	; 0xa0
 8004cc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2ba0      	cmp	r3, #160	; 0xa0
 8004cc6:	d00a      	beq.n	8004cde <xTaskCreateStatic+0x66>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	61bb      	str	r3, [r7, #24]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01e      	beq.n	8004d24 <xTaskCreateStatic+0xac>
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01b      	beq.n	8004d24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9303      	str	r3, [sp, #12]
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	9302      	str	r3, [sp, #8]
 8004d06:	f107 0314 	add.w	r3, r7, #20
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f850 	bl	8004dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d1e:	f000 f8eb 	bl	8004ef8 <prvAddNewTaskToReadyList>
 8004d22:	e001      	b.n	8004d28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d28:	697b      	ldr	r3, [r7, #20]
	}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3728      	adds	r7, #40	; 0x28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b08c      	sub	sp, #48	; 0x30
 8004d36:	af04      	add	r7, sp, #16
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 f9f6 	bl	8006138 <pvPortMalloc>
 8004d4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00e      	beq.n	8004d72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d54:	20a0      	movs	r0, #160	; 0xa0
 8004d56:	f001 f9ef 	bl	8006138 <pvPortMalloc>
 8004d5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
 8004d68:	e005      	b.n	8004d76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d6a:	6978      	ldr	r0, [r7, #20]
 8004d6c:	f001 fab0 	bl	80062d0 <vPortFree>
 8004d70:	e001      	b.n	8004d76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d017      	beq.n	8004dac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d84:	88fa      	ldrh	r2, [r7, #6]
 8004d86:	2300      	movs	r3, #0
 8004d88:	9303      	str	r3, [sp, #12]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	9302      	str	r3, [sp, #8]
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f80e 	bl	8004dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004da0:	69f8      	ldr	r0, [r7, #28]
 8004da2:	f000 f8a9 	bl	8004ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004da6:	2301      	movs	r3, #1
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e002      	b.n	8004db2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dac:	f04f 33ff 	mov.w	r3, #4294967295
 8004db0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004db2:	69bb      	ldr	r3, [r7, #24]
	}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f023 0307 	bic.w	r3, r3, #7
 8004de2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	617b      	str	r3, [r7, #20]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01f      	beq.n	8004e4a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	e012      	b.n	8004e36 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	7819      	ldrb	r1, [r3, #0]
 8004e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3334      	adds	r3, #52	; 0x34
 8004e20:	460a      	mov	r2, r1
 8004e22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d006      	beq.n	8004e3e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	3301      	adds	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2b0f      	cmp	r3, #15
 8004e3a:	d9e9      	bls.n	8004e10 <prvInitialiseNewTask+0x54>
 8004e3c:	e000      	b.n	8004e40 <prvInitialiseNewTask+0x84>
			{
				break;
 8004e3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e48:	e003      	b.n	8004e52 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	2b06      	cmp	r3, #6
 8004e56:	d901      	bls.n	8004e5c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e58:	2306      	movs	r3, #6
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e66:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	3304      	adds	r3, #4
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff f8f2 	bl	800405c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	3318      	adds	r3, #24
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff f8ed 	bl	800405c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	f1c3 0207 	rsb	r2, r3, #7
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	334c      	adds	r3, #76	; 0x4c
 8004eac:	224c      	movs	r2, #76	; 0x4c
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f002 fc77 	bl	80077a4 <memset>
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	4a0c      	ldr	r2, [pc, #48]	; (8004eec <prvInitialiseNewTask+0x130>)
 8004eba:	651a      	str	r2, [r3, #80]	; 0x50
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	4a0c      	ldr	r2, [pc, #48]	; (8004ef0 <prvInitialiseNewTask+0x134>)
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	4a0b      	ldr	r2, [pc, #44]	; (8004ef4 <prvInitialiseNewTask+0x138>)
 8004ec6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	69b8      	ldr	r0, [r7, #24]
 8004ece:	f000 fee5 	bl	8005c9c <pxPortInitialiseStack>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ee4:	bf00      	nop
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	200042ec 	.word	0x200042ec
 8004ef0:	20004354 	.word	0x20004354
 8004ef4:	200043bc 	.word	0x200043bc

08004ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f00:	f000 fff8 	bl	8005ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f04:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <prvAddNewTaskToReadyList+0xb8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	4a29      	ldr	r2, [pc, #164]	; (8004fb0 <prvAddNewTaskToReadyList+0xb8>)
 8004f0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f0e:	4b29      	ldr	r3, [pc, #164]	; (8004fb4 <prvAddNewTaskToReadyList+0xbc>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f16:	4a27      	ldr	r2, [pc, #156]	; (8004fb4 <prvAddNewTaskToReadyList+0xbc>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f1c:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <prvAddNewTaskToReadyList+0xb8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d110      	bne.n	8004f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f24:	f000 fbd6 	bl	80056d4 <prvInitialiseTaskLists>
 8004f28:	e00d      	b.n	8004f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f2a:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <prvAddNewTaskToReadyList+0xc0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f32:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <prvAddNewTaskToReadyList+0xbc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d802      	bhi.n	8004f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f40:	4a1c      	ldr	r2, [pc, #112]	; (8004fb4 <prvAddNewTaskToReadyList+0xbc>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <prvAddNewTaskToReadyList+0xc4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <prvAddNewTaskToReadyList+0xc4>)
 8004f4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	2201      	movs	r2, #1
 8004f56:	409a      	lsls	r2, r3
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <prvAddNewTaskToReadyList+0xc8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <prvAddNewTaskToReadyList+0xc8>)
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <prvAddNewTaskToReadyList+0xcc>)
 8004f70:	441a      	add	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7ff f87c 	bl	8004076 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f7e:	f000 ffe9 	bl	8005f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f82:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <prvAddNewTaskToReadyList+0xc0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00e      	beq.n	8004fa8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <prvAddNewTaskToReadyList+0xbc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d207      	bcs.n	8004fa8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <prvAddNewTaskToReadyList+0xd0>)
 8004f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000698 	.word	0x20000698
 8004fb4:	20000598 	.word	0x20000598
 8004fb8:	200006a4 	.word	0x200006a4
 8004fbc:	200006b4 	.word	0x200006b4
 8004fc0:	200006a0 	.word	0x200006a0
 8004fc4:	2000059c 	.word	0x2000059c
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d017      	beq.n	800500e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <vTaskDelay+0x60>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <vTaskDelay+0x30>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	60bb      	str	r3, [r7, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ffc:	f000 f884 	bl	8005108 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005000:	2100      	movs	r1, #0
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fde4 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005008:	f000 f88c 	bl	8005124 <xTaskResumeAll>
 800500c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d107      	bne.n	8005024 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <vTaskDelay+0x64>)
 8005016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	200006c0 	.word	0x200006c0
 8005030:	e000ed04 	.word	0xe000ed04

08005034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005042:	463a      	mov	r2, r7
 8005044:	1d39      	adds	r1, r7, #4
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	4618      	mov	r0, r3
 800504c:	f7fb ffd8 	bl	8001000 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	9202      	str	r2, [sp, #8]
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	2300      	movs	r3, #0
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	2300      	movs	r3, #0
 8005060:	460a      	mov	r2, r1
 8005062:	4921      	ldr	r1, [pc, #132]	; (80050e8 <vTaskStartScheduler+0xb4>)
 8005064:	4821      	ldr	r0, [pc, #132]	; (80050ec <vTaskStartScheduler+0xb8>)
 8005066:	f7ff fe07 	bl	8004c78 <xTaskCreateStatic>
 800506a:	4603      	mov	r3, r0
 800506c:	4a20      	ldr	r2, [pc, #128]	; (80050f0 <vTaskStartScheduler+0xbc>)
 800506e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005070:	4b1f      	ldr	r3, [pc, #124]	; (80050f0 <vTaskStartScheduler+0xbc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005078:	2301      	movs	r3, #1
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e001      	b.n	8005082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d11b      	bne.n	80050c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	613b      	str	r3, [r7, #16]
}
 800509a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800509c:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <vTaskStartScheduler+0xc0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	334c      	adds	r3, #76	; 0x4c
 80050a2:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <vTaskStartScheduler+0xc4>)
 80050a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050a6:	4b15      	ldr	r3, [pc, #84]	; (80050fc <vTaskStartScheduler+0xc8>)
 80050a8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050ae:	4b14      	ldr	r3, [pc, #80]	; (8005100 <vTaskStartScheduler+0xcc>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <vTaskStartScheduler+0xd0>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050ba:	f000 fe79 	bl	8005db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050be:	e00e      	b.n	80050de <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d10a      	bne.n	80050de <vTaskStartScheduler+0xaa>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	60fb      	str	r3, [r7, #12]
}
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <vTaskStartScheduler+0xa8>
}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	0800b0d0 	.word	0x0800b0d0
 80050ec:	080056a5 	.word	0x080056a5
 80050f0:	200006bc 	.word	0x200006bc
 80050f4:	20000598 	.word	0x20000598
 80050f8:	20000068 	.word	0x20000068
 80050fc:	200006b8 	.word	0x200006b8
 8005100:	200006a4 	.word	0x200006a4
 8005104:	2000069c 	.word	0x2000069c

08005108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <vTaskSuspendAll+0x18>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3301      	adds	r3, #1
 8005112:	4a03      	ldr	r2, [pc, #12]	; (8005120 <vTaskSuspendAll+0x18>)
 8005114:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005116:	bf00      	nop
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	200006c0 	.word	0x200006c0

08005124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005132:	4b41      	ldr	r3, [pc, #260]	; (8005238 <xTaskResumeAll+0x114>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <xTaskResumeAll+0x2c>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	603b      	str	r3, [r7, #0]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005150:	f000 fed0 	bl	8005ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005154:	4b38      	ldr	r3, [pc, #224]	; (8005238 <xTaskResumeAll+0x114>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3b01      	subs	r3, #1
 800515a:	4a37      	ldr	r2, [pc, #220]	; (8005238 <xTaskResumeAll+0x114>)
 800515c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800515e:	4b36      	ldr	r3, [pc, #216]	; (8005238 <xTaskResumeAll+0x114>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d161      	bne.n	800522a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005166:	4b35      	ldr	r3, [pc, #212]	; (800523c <xTaskResumeAll+0x118>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d05d      	beq.n	800522a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800516e:	e02e      	b.n	80051ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005170:	4b33      	ldr	r3, [pc, #204]	; (8005240 <xTaskResumeAll+0x11c>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3318      	adds	r3, #24
 800517c:	4618      	mov	r0, r3
 800517e:	f7fe ffd7 	bl	8004130 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3304      	adds	r3, #4
 8005186:	4618      	mov	r0, r3
 8005188:	f7fe ffd2 	bl	8004130 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	2201      	movs	r2, #1
 8005192:	409a      	lsls	r2, r3
 8005194:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <xTaskResumeAll+0x120>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4313      	orrs	r3, r2
 800519a:	4a2a      	ldr	r2, [pc, #168]	; (8005244 <xTaskResumeAll+0x120>)
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4a27      	ldr	r2, [pc, #156]	; (8005248 <xTaskResumeAll+0x124>)
 80051ac:	441a      	add	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fe ff5e 	bl	8004076 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <xTaskResumeAll+0x128>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d302      	bcc.n	80051ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80051c8:	4b21      	ldr	r3, [pc, #132]	; (8005250 <xTaskResumeAll+0x12c>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ce:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <xTaskResumeAll+0x11c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1cc      	bne.n	8005170 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051dc:	f000 fb1c 	bl	8005818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051e0:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <xTaskResumeAll+0x130>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d010      	beq.n	800520e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051ec:	f000 f836 	bl	800525c <xTaskIncrementTick>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80051f6:	4b16      	ldr	r3, [pc, #88]	; (8005250 <xTaskResumeAll+0x12c>)
 80051f8:	2201      	movs	r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3b01      	subs	r3, #1
 8005200:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f1      	bne.n	80051ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005208:	4b12      	ldr	r3, [pc, #72]	; (8005254 <xTaskResumeAll+0x130>)
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800520e:	4b10      	ldr	r3, [pc, #64]	; (8005250 <xTaskResumeAll+0x12c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005216:	2301      	movs	r3, #1
 8005218:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800521a:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <xTaskResumeAll+0x134>)
 800521c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800522a:	f000 fe93 	bl	8005f54 <vPortExitCritical>

	return xAlreadyYielded;
 800522e:	68bb      	ldr	r3, [r7, #8]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	200006c0 	.word	0x200006c0
 800523c:	20000698 	.word	0x20000698
 8005240:	20000658 	.word	0x20000658
 8005244:	200006a0 	.word	0x200006a0
 8005248:	2000059c 	.word	0x2000059c
 800524c:	20000598 	.word	0x20000598
 8005250:	200006ac 	.word	0x200006ac
 8005254:	200006a8 	.word	0x200006a8
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005266:	4b4e      	ldr	r3, [pc, #312]	; (80053a0 <xTaskIncrementTick+0x144>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f040 808e 	bne.w	800538c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005270:	4b4c      	ldr	r3, [pc, #304]	; (80053a4 <xTaskIncrementTick+0x148>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005278:	4a4a      	ldr	r2, [pc, #296]	; (80053a4 <xTaskIncrementTick+0x148>)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d120      	bne.n	80052c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005284:	4b48      	ldr	r3, [pc, #288]	; (80053a8 <xTaskIncrementTick+0x14c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	603b      	str	r3, [r7, #0]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <xTaskIncrementTick+0x46>
 80052a4:	4b40      	ldr	r3, [pc, #256]	; (80053a8 <xTaskIncrementTick+0x14c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	4b40      	ldr	r3, [pc, #256]	; (80053ac <xTaskIncrementTick+0x150>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a3e      	ldr	r2, [pc, #248]	; (80053a8 <xTaskIncrementTick+0x14c>)
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	4a3e      	ldr	r2, [pc, #248]	; (80053ac <xTaskIncrementTick+0x150>)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	4b3d      	ldr	r3, [pc, #244]	; (80053b0 <xTaskIncrementTick+0x154>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	4a3c      	ldr	r2, [pc, #240]	; (80053b0 <xTaskIncrementTick+0x154>)
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	f000 faa9 	bl	8005818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052c6:	4b3b      	ldr	r3, [pc, #236]	; (80053b4 <xTaskIncrementTick+0x158>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d348      	bcc.n	8005362 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052d0:	4b35      	ldr	r3, [pc, #212]	; (80053a8 <xTaskIncrementTick+0x14c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052da:	4b36      	ldr	r3, [pc, #216]	; (80053b4 <xTaskIncrementTick+0x158>)
 80052dc:	f04f 32ff 	mov.w	r2, #4294967295
 80052e0:	601a      	str	r2, [r3, #0]
					break;
 80052e2:	e03e      	b.n	8005362 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e4:	4b30      	ldr	r3, [pc, #192]	; (80053a8 <xTaskIncrementTick+0x14c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d203      	bcs.n	8005304 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052fc:	4a2d      	ldr	r2, [pc, #180]	; (80053b4 <xTaskIncrementTick+0x158>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005302:	e02e      	b.n	8005362 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	3304      	adds	r3, #4
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe ff11 	bl	8004130 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	3318      	adds	r3, #24
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe ff08 	bl	8004130 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	2201      	movs	r2, #1
 8005326:	409a      	lsls	r2, r3
 8005328:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <xTaskIncrementTick+0x15c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4313      	orrs	r3, r2
 800532e:	4a22      	ldr	r2, [pc, #136]	; (80053b8 <xTaskIncrementTick+0x15c>)
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <xTaskIncrementTick+0x160>)
 8005340:	441a      	add	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	3304      	adds	r3, #4
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f7fe fe94 	bl	8004076 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <xTaskIncrementTick+0x164>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	429a      	cmp	r2, r3
 800535a:	d3b9      	bcc.n	80052d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005360:	e7b6      	b.n	80052d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005362:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <xTaskIncrementTick+0x164>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4914      	ldr	r1, [pc, #80]	; (80053bc <xTaskIncrementTick+0x160>)
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d901      	bls.n	800537e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800537a:	2301      	movs	r3, #1
 800537c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800537e:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <xTaskIncrementTick+0x168>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005386:	2301      	movs	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e004      	b.n	8005396 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <xTaskIncrementTick+0x16c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3301      	adds	r3, #1
 8005392:	4a0d      	ldr	r2, [pc, #52]	; (80053c8 <xTaskIncrementTick+0x16c>)
 8005394:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005396:	697b      	ldr	r3, [r7, #20]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	200006c0 	.word	0x200006c0
 80053a4:	2000069c 	.word	0x2000069c
 80053a8:	20000650 	.word	0x20000650
 80053ac:	20000654 	.word	0x20000654
 80053b0:	200006b0 	.word	0x200006b0
 80053b4:	200006b8 	.word	0x200006b8
 80053b8:	200006a0 	.word	0x200006a0
 80053bc:	2000059c 	.word	0x2000059c
 80053c0:	20000598 	.word	0x20000598
 80053c4:	200006ac 	.word	0x200006ac
 80053c8:	200006a8 	.word	0x200006a8

080053cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053d2:	4b29      	ldr	r3, [pc, #164]	; (8005478 <vTaskSwitchContext+0xac>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053da:	4b28      	ldr	r3, [pc, #160]	; (800547c <vTaskSwitchContext+0xb0>)
 80053dc:	2201      	movs	r2, #1
 80053de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053e0:	e044      	b.n	800546c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80053e2:	4b26      	ldr	r3, [pc, #152]	; (800547c <vTaskSwitchContext+0xb0>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <vTaskSwitchContext+0xb4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	fab3 f383 	clz	r3, r3
 80053f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80053f6:	7afb      	ldrb	r3, [r7, #11]
 80053f8:	f1c3 031f 	rsb	r3, r3, #31
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	4921      	ldr	r1, [pc, #132]	; (8005484 <vTaskSwitchContext+0xb8>)
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	607b      	str	r3, [r7, #4]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <vTaskSwitchContext+0x5a>
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4a14      	ldr	r2, [pc, #80]	; (8005484 <vTaskSwitchContext+0xb8>)
 8005434:	4413      	add	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3308      	adds	r3, #8
 800544a:	429a      	cmp	r2, r3
 800544c:	d104      	bne.n	8005458 <vTaskSwitchContext+0x8c>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	605a      	str	r2, [r3, #4]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <vTaskSwitchContext+0xbc>)
 8005460:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <vTaskSwitchContext+0xbc>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	334c      	adds	r3, #76	; 0x4c
 8005468:	4a08      	ldr	r2, [pc, #32]	; (800548c <vTaskSwitchContext+0xc0>)
 800546a:	6013      	str	r3, [r2, #0]
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	200006c0 	.word	0x200006c0
 800547c:	200006ac 	.word	0x200006ac
 8005480:	200006a0 	.word	0x200006a0
 8005484:	2000059c 	.word	0x2000059c
 8005488:	20000598 	.word	0x20000598
 800548c:	20000068 	.word	0x20000068

08005490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	60fb      	str	r3, [r7, #12]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054b6:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <vTaskPlaceOnEventList+0x44>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3318      	adds	r3, #24
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fe fdfd 	bl	80040be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054c4:	2101      	movs	r1, #1
 80054c6:	6838      	ldr	r0, [r7, #0]
 80054c8:	f000 fb82 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
}
 80054cc:	bf00      	nop
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000598 	.word	0x20000598

080054d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60fb      	str	r3, [r7, #12]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	3318      	adds	r3, #24
 8005508:	4618      	mov	r0, r3
 800550a:	f7fe fe11 	bl	8004130 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800550e:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <xTaskRemoveFromEventList+0xac>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d11c      	bne.n	8005550 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	3304      	adds	r3, #4
 800551a:	4618      	mov	r0, r3
 800551c:	f7fe fe08 	bl	8004130 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	2201      	movs	r2, #1
 8005526:	409a      	lsls	r2, r3
 8005528:	4b17      	ldr	r3, [pc, #92]	; (8005588 <xTaskRemoveFromEventList+0xb0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4313      	orrs	r3, r2
 800552e:	4a16      	ldr	r2, [pc, #88]	; (8005588 <xTaskRemoveFromEventList+0xb0>)
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4a13      	ldr	r2, [pc, #76]	; (800558c <xTaskRemoveFromEventList+0xb4>)
 8005540:	441a      	add	r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f7fe fd94 	bl	8004076 <vListInsertEnd>
 800554e:	e005      	b.n	800555c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	3318      	adds	r3, #24
 8005554:	4619      	mov	r1, r3
 8005556:	480e      	ldr	r0, [pc, #56]	; (8005590 <xTaskRemoveFromEventList+0xb8>)
 8005558:	f7fe fd8d 	bl	8004076 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <xTaskRemoveFromEventList+0xbc>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	429a      	cmp	r2, r3
 8005568:	d905      	bls.n	8005576 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800556a:	2301      	movs	r3, #1
 800556c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <xTaskRemoveFromEventList+0xc0>)
 8005570:	2201      	movs	r2, #1
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e001      	b.n	800557a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800557a:	697b      	ldr	r3, [r7, #20]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	200006c0 	.word	0x200006c0
 8005588:	200006a0 	.word	0x200006a0
 800558c:	2000059c 	.word	0x2000059c
 8005590:	20000658 	.word	0x20000658
 8005594:	20000598 	.word	0x20000598
 8005598:	200006ac 	.word	0x200006ac

0800559c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <vTaskInternalSetTimeOutState+0x24>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <vTaskInternalSetTimeOutState+0x28>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	605a      	str	r2, [r3, #4]
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	200006b0 	.word	0x200006b0
 80055c4:	2000069c 	.word	0x2000069c

080055c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	613b      	str	r3, [r7, #16]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	60fb      	str	r3, [r7, #12]
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800560a:	f000 fc73 	bl	8005ef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800560e:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <xTaskCheckForTimeOut+0xbc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d102      	bne.n	800562e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005628:	2300      	movs	r3, #0
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	e023      	b.n	8005676 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b15      	ldr	r3, [pc, #84]	; (8005688 <xTaskCheckForTimeOut+0xc0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d007      	beq.n	800564a <xTaskCheckForTimeOut+0x82>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	429a      	cmp	r2, r3
 8005642:	d302      	bcc.n	800564a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005644:	2301      	movs	r3, #1
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	e015      	b.n	8005676 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	429a      	cmp	r2, r3
 8005652:	d20b      	bcs.n	800566c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	1ad2      	subs	r2, r2, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff ff9b 	bl	800559c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	e004      	b.n	8005676 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005672:	2301      	movs	r3, #1
 8005674:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005676:	f000 fc6d 	bl	8005f54 <vPortExitCritical>

	return xReturn;
 800567a:	69fb      	ldr	r3, [r7, #28]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	2000069c 	.word	0x2000069c
 8005688:	200006b0 	.word	0x200006b0

0800568c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005690:	4b03      	ldr	r3, [pc, #12]	; (80056a0 <vTaskMissedYield+0x14>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	200006ac 	.word	0x200006ac

080056a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056ac:	f000 f852 	bl	8005754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <prvIdleTask+0x28>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d9f9      	bls.n	80056ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80056b8:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <prvIdleTask+0x2c>)
 80056ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056c8:	e7f0      	b.n	80056ac <prvIdleTask+0x8>
 80056ca:	bf00      	nop
 80056cc:	2000059c 	.word	0x2000059c
 80056d0:	e000ed04 	.word	0xe000ed04

080056d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056da:	2300      	movs	r3, #0
 80056dc:	607b      	str	r3, [r7, #4]
 80056de:	e00c      	b.n	80056fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4a12      	ldr	r2, [pc, #72]	; (8005734 <prvInitialiseTaskLists+0x60>)
 80056ec:	4413      	add	r3, r2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fc94 	bl	800401c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3301      	adds	r3, #1
 80056f8:	607b      	str	r3, [r7, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d9ef      	bls.n	80056e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005700:	480d      	ldr	r0, [pc, #52]	; (8005738 <prvInitialiseTaskLists+0x64>)
 8005702:	f7fe fc8b 	bl	800401c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005706:	480d      	ldr	r0, [pc, #52]	; (800573c <prvInitialiseTaskLists+0x68>)
 8005708:	f7fe fc88 	bl	800401c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800570c:	480c      	ldr	r0, [pc, #48]	; (8005740 <prvInitialiseTaskLists+0x6c>)
 800570e:	f7fe fc85 	bl	800401c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005712:	480c      	ldr	r0, [pc, #48]	; (8005744 <prvInitialiseTaskLists+0x70>)
 8005714:	f7fe fc82 	bl	800401c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005718:	480b      	ldr	r0, [pc, #44]	; (8005748 <prvInitialiseTaskLists+0x74>)
 800571a:	f7fe fc7f 	bl	800401c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <prvInitialiseTaskLists+0x78>)
 8005720:	4a05      	ldr	r2, [pc, #20]	; (8005738 <prvInitialiseTaskLists+0x64>)
 8005722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <prvInitialiseTaskLists+0x7c>)
 8005726:	4a05      	ldr	r2, [pc, #20]	; (800573c <prvInitialiseTaskLists+0x68>)
 8005728:	601a      	str	r2, [r3, #0]
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	2000059c 	.word	0x2000059c
 8005738:	20000628 	.word	0x20000628
 800573c:	2000063c 	.word	0x2000063c
 8005740:	20000658 	.word	0x20000658
 8005744:	2000066c 	.word	0x2000066c
 8005748:	20000684 	.word	0x20000684
 800574c:	20000650 	.word	0x20000650
 8005750:	20000654 	.word	0x20000654

08005754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800575a:	e019      	b.n	8005790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800575c:	f000 fbca 	bl	8005ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005760:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <prvCheckTasksWaitingTermination+0x50>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe fcdf 	bl	8004130 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005772:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <prvCheckTasksWaitingTermination+0x54>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3b01      	subs	r3, #1
 8005778:	4a0b      	ldr	r2, [pc, #44]	; (80057a8 <prvCheckTasksWaitingTermination+0x54>)
 800577a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800577c:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <prvCheckTasksWaitingTermination+0x58>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3b01      	subs	r3, #1
 8005782:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <prvCheckTasksWaitingTermination+0x58>)
 8005784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005786:	f000 fbe5 	bl	8005f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f810 	bl	80057b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005790:	4b06      	ldr	r3, [pc, #24]	; (80057ac <prvCheckTasksWaitingTermination+0x58>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e1      	bne.n	800575c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	2000066c 	.word	0x2000066c
 80057a8:	20000698 	.word	0x20000698
 80057ac:	20000680 	.word	0x20000680

080057b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	334c      	adds	r3, #76	; 0x4c
 80057bc:	4618      	mov	r0, r3
 80057be:	f002 f80d 	bl	80077dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d108      	bne.n	80057de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fd7d 	bl	80062d0 <vPortFree>
				vPortFree( pxTCB );
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fd7a 	bl	80062d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057dc:	e018      	b.n	8005810 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d103      	bne.n	80057f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fd71 	bl	80062d0 <vPortFree>
	}
 80057ee:	e00f      	b.n	8005810 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d00a      	beq.n	8005810 <prvDeleteTCB+0x60>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	60fb      	str	r3, [r7, #12]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <prvDeleteTCB+0x5e>
	}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581e:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <prvResetNextTaskUnblockTime+0x38>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <prvResetNextTaskUnblockTime+0x3c>)
 800582a:	f04f 32ff 	mov.w	r2, #4294967295
 800582e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005830:	e008      	b.n	8005844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005832:	4b07      	ldr	r3, [pc, #28]	; (8005850 <prvResetNextTaskUnblockTime+0x38>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4a04      	ldr	r2, [pc, #16]	; (8005854 <prvResetNextTaskUnblockTime+0x3c>)
 8005842:	6013      	str	r3, [r2, #0]
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20000650 	.word	0x20000650
 8005854:	200006b8 	.word	0x200006b8

08005858 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800585e:	4b0b      	ldr	r3, [pc, #44]	; (800588c <xTaskGetSchedulerState+0x34>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005866:	2301      	movs	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	e008      	b.n	800587e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800586c:	4b08      	ldr	r3, [pc, #32]	; (8005890 <xTaskGetSchedulerState+0x38>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005874:	2302      	movs	r3, #2
 8005876:	607b      	str	r3, [r7, #4]
 8005878:	e001      	b.n	800587e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800587e:	687b      	ldr	r3, [r7, #4]
	}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	200006a4 	.word	0x200006a4
 8005890:	200006c0 	.word	0x200006c0

08005894 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d05e      	beq.n	8005968 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ae:	4b31      	ldr	r3, [pc, #196]	; (8005974 <xTaskPriorityInherit+0xe0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d24e      	bcs.n	8005956 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	db06      	blt.n	80058ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c0:	4b2c      	ldr	r3, [pc, #176]	; (8005974 <xTaskPriorityInherit+0xe0>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	f1c3 0207 	rsb	r2, r3, #7
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6959      	ldr	r1, [r3, #20]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4a26      	ldr	r2, [pc, #152]	; (8005978 <xTaskPriorityInherit+0xe4>)
 80058e0:	4413      	add	r3, r2
 80058e2:	4299      	cmp	r1, r3
 80058e4:	d12f      	bne.n	8005946 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fc20 	bl	8004130 <uxListRemove>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	2201      	movs	r2, #1
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43da      	mvns	r2, r3
 8005902:	4b1e      	ldr	r3, [pc, #120]	; (800597c <xTaskPriorityInherit+0xe8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4013      	ands	r3, r2
 8005908:	4a1c      	ldr	r2, [pc, #112]	; (800597c <xTaskPriorityInherit+0xe8>)
 800590a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800590c:	4b19      	ldr	r3, [pc, #100]	; (8005974 <xTaskPriorityInherit+0xe0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	2201      	movs	r2, #1
 800591c:	409a      	lsls	r2, r3
 800591e:	4b17      	ldr	r3, [pc, #92]	; (800597c <xTaskPriorityInherit+0xe8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4313      	orrs	r3, r2
 8005924:	4a15      	ldr	r2, [pc, #84]	; (800597c <xTaskPriorityInherit+0xe8>)
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4a10      	ldr	r2, [pc, #64]	; (8005978 <xTaskPriorityInherit+0xe4>)
 8005936:	441a      	add	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f7fe fb99 	bl	8004076 <vListInsertEnd>
 8005944:	e004      	b.n	8005950 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <xTaskPriorityInherit+0xe0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005950:	2301      	movs	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e008      	b.n	8005968 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <xTaskPriorityInherit+0xe0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	429a      	cmp	r2, r3
 8005962:	d201      	bcs.n	8005968 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005964:	2301      	movs	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005968:	68fb      	ldr	r3, [r7, #12]
	}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000598 	.word	0x20000598
 8005978:	2000059c 	.word	0x2000059c
 800597c:	200006a0 	.word	0x200006a0

08005980 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d06e      	beq.n	8005a74 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005996:	4b3a      	ldr	r3, [pc, #232]	; (8005a80 <xTaskPriorityDisinherit+0x100>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	429a      	cmp	r2, r3
 800599e:	d00a      	beq.n	80059b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	60fb      	str	r3, [r7, #12]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	60bb      	str	r3, [r7, #8]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d8:	1e5a      	subs	r2, r3, #1
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d044      	beq.n	8005a74 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d140      	bne.n	8005a74 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fb9a 	bl	8004130 <uxListRemove>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d115      	bne.n	8005a2e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	491f      	ldr	r1, [pc, #124]	; (8005a84 <xTaskPriorityDisinherit+0x104>)
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xTaskPriorityDisinherit+0xae>
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43da      	mvns	r2, r3
 8005a24:	4b18      	ldr	r3, [pc, #96]	; (8005a88 <xTaskPriorityDisinherit+0x108>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <xTaskPriorityDisinherit+0x108>)
 8005a2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	f1c3 0207 	rsb	r2, r3, #7
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	2201      	movs	r2, #1
 8005a48:	409a      	lsls	r2, r3
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <xTaskPriorityDisinherit+0x108>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	4a0d      	ldr	r2, [pc, #52]	; (8005a88 <xTaskPriorityDisinherit+0x108>)
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <xTaskPriorityDisinherit+0x104>)
 8005a62:	441a      	add	r2, r3
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f7fe fb03 	bl	8004076 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a70:	2301      	movs	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a74:	697b      	ldr	r3, [r7, #20]
	}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000598 	.word	0x20000598
 8005a84:	2000059c 	.word	0x2000059c
 8005a88:	200006a0 	.word	0x200006a0

08005a8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d077      	beq.n	8005b94 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	60fb      	str	r3, [r7, #12]
}
 8005abe:	bf00      	nop
 8005ac0:	e7fe      	b.n	8005ac0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d902      	bls.n	8005ad2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	61fb      	str	r3, [r7, #28]
 8005ad0:	e002      	b.n	8005ad8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d058      	beq.n	8005b94 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d153      	bne.n	8005b94 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005aec:	4b2b      	ldr	r3, [pc, #172]	; (8005b9c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d10a      	bne.n	8005b0c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	60bb      	str	r3, [r7, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	db04      	blt.n	8005b2a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f1c3 0207 	rsb	r2, r3, #7
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	6959      	ldr	r1, [r3, #20]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	4299      	cmp	r1, r3
 8005b3e:	d129      	bne.n	8005b94 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fe faf3 	bl	8004130 <uxListRemove>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	2201      	movs	r2, #1
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43da      	mvns	r2, r3
 8005b5c:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4013      	ands	r3, r2
 8005b62:	4a10      	ldr	r2, [pc, #64]	; (8005ba4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b64:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	409a      	lsls	r2, r3
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	4a0b      	ldr	r2, [pc, #44]	; (8005ba4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4a06      	ldr	r2, [pc, #24]	; (8005ba0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005b86:	441a      	add	r2, r3
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f7fe fa71 	bl	8004076 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b94:	bf00      	nop
 8005b96:	3720      	adds	r7, #32
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000598 	.word	0x20000598
 8005ba0:	2000059c 	.word	0x2000059c
 8005ba4:	200006a0 	.word	0x200006a0

08005ba8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005bac:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005bb4:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bba:	3201      	adds	r2, #1
 8005bbc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005bbe:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
	}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000598 	.word	0x20000598

08005bd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be0:	4b28      	ldr	r3, [pc, #160]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe faa2 	bl	8004130 <uxListRemove>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10b      	bne.n	8005c0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005bf2:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43da      	mvns	r2, r3
 8005c00:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4013      	ands	r3, r2
 8005c06:	4a20      	ldr	r2, [pc, #128]	; (8005c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d10a      	bne.n	8005c28 <prvAddCurrentTaskToDelayedList+0x58>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d007      	beq.n	8005c28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c18:	4b1a      	ldr	r3, [pc, #104]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4619      	mov	r1, r3
 8005c20:	481a      	ldr	r0, [pc, #104]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c22:	f7fe fa28 	bl	8004076 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c26:	e026      	b.n	8005c76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c30:	4b14      	ldr	r3, [pc, #80]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d209      	bcs.n	8005c54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c40:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f7fe fa36 	bl	80040be <vListInsert>
}
 8005c52:	e010      	b.n	8005c76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c54:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f7fe fa2c 	bl	80040be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d202      	bcs.n	8005c76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c70:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	6013      	str	r3, [r2, #0]
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	2000069c 	.word	0x2000069c
 8005c84:	20000598 	.word	0x20000598
 8005c88:	200006a0 	.word	0x200006a0
 8005c8c:	20000684 	.word	0x20000684
 8005c90:	20000654 	.word	0x20000654
 8005c94:	20000650 	.word	0x20000650
 8005c98:	200006b8 	.word	0x200006b8

08005c9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3b04      	subs	r3, #4
 8005cac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3b04      	subs	r3, #4
 8005cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3b04      	subs	r3, #4
 8005cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ccc:	4a0c      	ldr	r2, [pc, #48]	; (8005d00 <pxPortInitialiseStack+0x64>)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3b14      	subs	r3, #20
 8005cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3b04      	subs	r3, #4
 8005ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f06f 0202 	mvn.w	r2, #2
 8005cea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3b20      	subs	r3, #32
 8005cf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	08005d05 	.word	0x08005d05

08005d04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d0e:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <prvTaskExitError+0x54>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d00a      	beq.n	8005d2e <prvTaskExitError+0x2a>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	60fb      	str	r3, [r7, #12]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <prvTaskExitError+0x28>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60bb      	str	r3, [r7, #8]
}
 8005d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d42:	bf00      	nop
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0fc      	beq.n	8005d44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	2000000c 	.word	0x2000000c
 8005d5c:	00000000 	.word	0x00000000

08005d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <pxCurrentTCBConst2>)
 8005d62:	6819      	ldr	r1, [r3, #0]
 8005d64:	6808      	ldr	r0, [r1, #0]
 8005d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6a:	f380 8809 	msr	PSP, r0
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f380 8811 	msr	BASEPRI, r0
 8005d7a:	4770      	bx	lr
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst2>:
 8005d80:	20000598 	.word	0x20000598
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d88:	4808      	ldr	r0, [pc, #32]	; (8005dac <prvPortStartFirstTask+0x24>)
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	6800      	ldr	r0, [r0, #0]
 8005d8e:	f380 8808 	msr	MSP, r0
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f380 8814 	msr	CONTROL, r0
 8005d9a:	b662      	cpsie	i
 8005d9c:	b661      	cpsie	f
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	df00      	svc	0
 8005da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005daa:	bf00      	nop
 8005dac:	e000ed08 	.word	0xe000ed08

08005db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005db6:	4b46      	ldr	r3, [pc, #280]	; (8005ed0 <xPortStartScheduler+0x120>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a46      	ldr	r2, [pc, #280]	; (8005ed4 <xPortStartScheduler+0x124>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10a      	bne.n	8005dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	613b      	str	r3, [r7, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005dd6:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <xPortStartScheduler+0x120>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3f      	ldr	r2, [pc, #252]	; (8005ed8 <xPortStartScheduler+0x128>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10a      	bne.n	8005df6 <xPortStartScheduler+0x46>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005df6:	4b39      	ldr	r3, [pc, #228]	; (8005edc <xPortStartScheduler+0x12c>)
 8005df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <xPortStartScheduler+0x130>)
 8005e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e1e:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e20:	2207      	movs	r2, #7
 8005e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e24:	e009      	b.n	8005e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e26:	4b2f      	ldr	r3, [pc, #188]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	4a2d      	ldr	r2, [pc, #180]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d0ef      	beq.n	8005e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e46:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1c3 0307 	rsb	r3, r3, #7
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d00a      	beq.n	8005e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60bb      	str	r3, [r7, #8]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e68:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e9e:	f000 f8dd 	bl	800605c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <xPortStartScheduler+0x13c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ea8:	f000 f8fc 	bl	80060a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <xPortStartScheduler+0x140>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a0f      	ldr	r2, [pc, #60]	; (8005ef0 <xPortStartScheduler+0x140>)
 8005eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eb8:	f7ff ff66 	bl	8005d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ebc:	f7ff fa86 	bl	80053cc <vTaskSwitchContext>
	prvTaskExitError();
 8005ec0:	f7ff ff20 	bl	8005d04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	e000ed00 	.word	0xe000ed00
 8005ed4:	410fc271 	.word	0x410fc271
 8005ed8:	410fc270 	.word	0x410fc270
 8005edc:	e000e400 	.word	0xe000e400
 8005ee0:	200006c4 	.word	0x200006c4
 8005ee4:	200006c8 	.word	0x200006c8
 8005ee8:	e000ed20 	.word	0xe000ed20
 8005eec:	2000000c 	.word	0x2000000c
 8005ef0:	e000ef34 	.word	0xe000ef34

08005ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	607b      	str	r3, [r7, #4]
}
 8005f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f18:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10f      	bne.n	8005f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <vPortEnterCritical+0x5c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	603b      	str	r3, [r7, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <vPortEnterCritical+0x4a>
	}
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	2000000c 	.word	0x2000000c
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <vPortExitCritical+0x24>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	607b      	str	r3, [r7, #4]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <vPortExitCritical+0x42>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f383 8811 	msr	BASEPRI, r3
}
 8005f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	2000000c 	.word	0x2000000c
	...

08005fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fb0:	f3ef 8009 	mrs	r0, PSP
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	4b15      	ldr	r3, [pc, #84]	; (8006010 <pxCurrentTCBConst>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	f01e 0f10 	tst.w	lr, #16
 8005fc0:	bf08      	it	eq
 8005fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fca:	6010      	str	r0, [r2, #0]
 8005fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fd4:	f380 8811 	msr	BASEPRI, r0
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f7ff f9f4 	bl	80053cc <vTaskSwitchContext>
 8005fe4:	f04f 0000 	mov.w	r0, #0
 8005fe8:	f380 8811 	msr	BASEPRI, r0
 8005fec:	bc09      	pop	{r0, r3}
 8005fee:	6819      	ldr	r1, [r3, #0]
 8005ff0:	6808      	ldr	r0, [r1, #0]
 8005ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff6:	f01e 0f10 	tst.w	lr, #16
 8005ffa:	bf08      	it	eq
 8005ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006000:	f380 8809 	msr	PSP, r0
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	f3af 8000 	nop.w

08006010 <pxCurrentTCBConst>:
 8006010:	20000598 	.word	0x20000598
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop

08006018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	607b      	str	r3, [r7, #4]
}
 8006030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006032:	f7ff f913 	bl	800525c <xTaskIncrementTick>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <SysTick_Handler+0x40>)
 800603e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	2300      	movs	r3, #0
 8006046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f383 8811 	msr	BASEPRI, r3
}
 800604e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <vPortSetupTimerInterrupt+0x34>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <vPortSetupTimerInterrupt+0x38>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <vPortSetupTimerInterrupt+0x3c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a0a      	ldr	r2, [pc, #40]	; (800609c <vPortSetupTimerInterrupt+0x40>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <vPortSetupTimerInterrupt+0x44>)
 800607a:	3b01      	subs	r3, #1
 800607c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800607e:	4b04      	ldr	r3, [pc, #16]	; (8006090 <vPortSetupTimerInterrupt+0x34>)
 8006080:	2207      	movs	r2, #7
 8006082:	601a      	str	r2, [r3, #0]
}
 8006084:	bf00      	nop
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	e000e010 	.word	0xe000e010
 8006094:	e000e018 	.word	0xe000e018
 8006098:	20000000 	.word	0x20000000
 800609c:	10624dd3 	.word	0x10624dd3
 80060a0:	e000e014 	.word	0xe000e014

080060a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060b4 <vPortEnableVFP+0x10>
 80060a8:	6801      	ldr	r1, [r0, #0]
 80060aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060ae:	6001      	str	r1, [r0, #0]
 80060b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060b2:	bf00      	nop
 80060b4:	e000ed88 	.word	0xe000ed88

080060b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060be:	f3ef 8305 	mrs	r3, IPSR
 80060c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b0f      	cmp	r3, #15
 80060c8:	d914      	bls.n	80060f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <vPortValidateInterruptPriority+0x70>)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060d4:	4b15      	ldr	r3, [pc, #84]	; (800612c <vPortValidateInterruptPriority+0x74>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	7afa      	ldrb	r2, [r7, #11]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d20a      	bcs.n	80060f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	607b      	str	r3, [r7, #4]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060f4:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <vPortValidateInterruptPriority+0x78>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060fc:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <vPortValidateInterruptPriority+0x7c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d90a      	bls.n	800611a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	603b      	str	r3, [r7, #0]
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <vPortValidateInterruptPriority+0x60>
	}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	e000e3f0 	.word	0xe000e3f0
 800612c:	200006c4 	.word	0x200006c4
 8006130:	e000ed0c 	.word	0xe000ed0c
 8006134:	200006c8 	.word	0x200006c8

08006138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006144:	f7fe ffe0 	bl	8005108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006148:	4b5b      	ldr	r3, [pc, #364]	; (80062b8 <pvPortMalloc+0x180>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006150:	f000 f920 	bl	8006394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006154:	4b59      	ldr	r3, [pc, #356]	; (80062bc <pvPortMalloc+0x184>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	f040 8093 	bne.w	8006288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01d      	beq.n	80061a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006168:	2208      	movs	r2, #8
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	2b00      	cmp	r3, #0
 8006178:	d014      	beq.n	80061a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f023 0307 	bic.w	r3, r3, #7
 8006180:	3308      	adds	r3, #8
 8006182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <pvPortMalloc+0x6c>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	617b      	str	r3, [r7, #20]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d06e      	beq.n	8006288 <pvPortMalloc+0x150>
 80061aa:	4b45      	ldr	r3, [pc, #276]	; (80062c0 <pvPortMalloc+0x188>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d869      	bhi.n	8006288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061b4:	4b43      	ldr	r3, [pc, #268]	; (80062c4 <pvPortMalloc+0x18c>)
 80061b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061b8:	4b42      	ldr	r3, [pc, #264]	; (80062c4 <pvPortMalloc+0x18c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061be:	e004      	b.n	80061ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d903      	bls.n	80061dc <pvPortMalloc+0xa4>
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f1      	bne.n	80061c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061dc:	4b36      	ldr	r3, [pc, #216]	; (80062b8 <pvPortMalloc+0x180>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d050      	beq.n	8006288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2208      	movs	r2, #8
 80061ec:	4413      	add	r3, r2
 80061ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	1ad2      	subs	r2, r2, r3
 8006200:	2308      	movs	r3, #8
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	429a      	cmp	r2, r3
 8006206:	d91f      	bls.n	8006248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4413      	add	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <pvPortMalloc+0xf8>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	613b      	str	r3, [r7, #16]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	1ad2      	subs	r2, r2, r3
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006242:	69b8      	ldr	r0, [r7, #24]
 8006244:	f000 f908 	bl	8006458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006248:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <pvPortMalloc+0x188>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <pvPortMalloc+0x188>)
 8006254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006256:	4b1a      	ldr	r3, [pc, #104]	; (80062c0 <pvPortMalloc+0x188>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <pvPortMalloc+0x190>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d203      	bcs.n	800626a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006262:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <pvPortMalloc+0x188>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <pvPortMalloc+0x190>)
 8006268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <pvPortMalloc+0x184>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	431a      	orrs	r2, r3
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800627e:	4b13      	ldr	r3, [pc, #76]	; (80062cc <pvPortMalloc+0x194>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3301      	adds	r3, #1
 8006284:	4a11      	ldr	r2, [pc, #68]	; (80062cc <pvPortMalloc+0x194>)
 8006286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006288:	f7fe ff4c 	bl	8005124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <pvPortMalloc+0x174>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60fb      	str	r3, [r7, #12]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <pvPortMalloc+0x172>
	return pvReturn;
 80062ac:	69fb      	ldr	r3, [r7, #28]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3728      	adds	r7, #40	; 0x28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	200042d4 	.word	0x200042d4
 80062bc:	200042e8 	.word	0x200042e8
 80062c0:	200042d8 	.word	0x200042d8
 80062c4:	200042cc 	.word	0x200042cc
 80062c8:	200042dc 	.word	0x200042dc
 80062cc:	200042e0 	.word	0x200042e0

080062d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d04d      	beq.n	800637e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062e2:	2308      	movs	r3, #8
 80062e4:	425b      	negs	r3, r3
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4413      	add	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	4b24      	ldr	r3, [pc, #144]	; (8006388 <vPortFree+0xb8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10a      	bne.n	8006314 <vPortFree+0x44>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	60fb      	str	r3, [r7, #12]
}
 8006310:	bf00      	nop
 8006312:	e7fe      	b.n	8006312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <vPortFree+0x62>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	60bb      	str	r3, [r7, #8]
}
 800632e:	bf00      	nop
 8006330:	e7fe      	b.n	8006330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <vPortFree+0xb8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01e      	beq.n	800637e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d11a      	bne.n	800637e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	4b0e      	ldr	r3, [pc, #56]	; (8006388 <vPortFree+0xb8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	43db      	mvns	r3, r3
 8006352:	401a      	ands	r2, r3
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006358:	f7fe fed6 	bl	8005108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <vPortFree+0xbc>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4413      	add	r3, r2
 8006366:	4a09      	ldr	r2, [pc, #36]	; (800638c <vPortFree+0xbc>)
 8006368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800636a:	6938      	ldr	r0, [r7, #16]
 800636c:	f000 f874 	bl	8006458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <vPortFree+0xc0>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3301      	adds	r3, #1
 8006376:	4a06      	ldr	r2, [pc, #24]	; (8006390 <vPortFree+0xc0>)
 8006378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800637a:	f7fe fed3 	bl	8005124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800637e:	bf00      	nop
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200042e8 	.word	0x200042e8
 800638c:	200042d8 	.word	0x200042d8
 8006390:	200042e4 	.word	0x200042e4

08006394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800639a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800639e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063a0:	4b27      	ldr	r3, [pc, #156]	; (8006440 <prvHeapInit+0xac>)
 80063a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00c      	beq.n	80063c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3307      	adds	r3, #7
 80063b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0307 	bic.w	r3, r3, #7
 80063ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	4a1f      	ldr	r2, [pc, #124]	; (8006440 <prvHeapInit+0xac>)
 80063c4:	4413      	add	r3, r2
 80063c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063cc:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <prvHeapInit+0xb0>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063d2:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <prvHeapInit+0xb0>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	4413      	add	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063e0:	2208      	movs	r2, #8
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a15      	ldr	r2, [pc, #84]	; (8006448 <prvHeapInit+0xb4>)
 80063f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063f6:	4b14      	ldr	r3, [pc, #80]	; (8006448 <prvHeapInit+0xb4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2200      	movs	r2, #0
 80063fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <prvHeapInit+0xb4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006414:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <prvHeapInit+0xb4>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4a0a      	ldr	r2, [pc, #40]	; (800644c <prvHeapInit+0xb8>)
 8006422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4a09      	ldr	r2, [pc, #36]	; (8006450 <prvHeapInit+0xbc>)
 800642a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800642c:	4b09      	ldr	r3, [pc, #36]	; (8006454 <prvHeapInit+0xc0>)
 800642e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006432:	601a      	str	r2, [r3, #0]
}
 8006434:	bf00      	nop
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	200006cc 	.word	0x200006cc
 8006444:	200042cc 	.word	0x200042cc
 8006448:	200042d4 	.word	0x200042d4
 800644c:	200042dc 	.word	0x200042dc
 8006450:	200042d8 	.word	0x200042d8
 8006454:	200042e8 	.word	0x200042e8

08006458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006460:	4b28      	ldr	r3, [pc, #160]	; (8006504 <prvInsertBlockIntoFreeList+0xac>)
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e002      	b.n	800646c <prvInsertBlockIntoFreeList+0x14>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	429a      	cmp	r2, r3
 8006474:	d8f7      	bhi.n	8006466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	4413      	add	r3, r2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	429a      	cmp	r2, r3
 8006486:	d108      	bne.n	800649a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	441a      	add	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	441a      	add	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d118      	bne.n	80064e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b15      	ldr	r3, [pc, #84]	; (8006508 <prvInsertBlockIntoFreeList+0xb0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d00d      	beq.n	80064d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	441a      	add	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e008      	b.n	80064e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064d6:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <prvInsertBlockIntoFreeList+0xb0>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e003      	b.n	80064e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d002      	beq.n	80064f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f6:	bf00      	nop
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	200042cc 	.word	0x200042cc
 8006508:	200042d4 	.word	0x200042d4

0800650c <__cvt>:
 800650c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006510:	ec55 4b10 	vmov	r4, r5, d0
 8006514:	2d00      	cmp	r5, #0
 8006516:	460e      	mov	r6, r1
 8006518:	4619      	mov	r1, r3
 800651a:	462b      	mov	r3, r5
 800651c:	bfbb      	ittet	lt
 800651e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006522:	461d      	movlt	r5, r3
 8006524:	2300      	movge	r3, #0
 8006526:	232d      	movlt	r3, #45	; 0x2d
 8006528:	700b      	strb	r3, [r1, #0]
 800652a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800652c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006530:	4691      	mov	r9, r2
 8006532:	f023 0820 	bic.w	r8, r3, #32
 8006536:	bfbc      	itt	lt
 8006538:	4622      	movlt	r2, r4
 800653a:	4614      	movlt	r4, r2
 800653c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006540:	d005      	beq.n	800654e <__cvt+0x42>
 8006542:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006546:	d100      	bne.n	800654a <__cvt+0x3e>
 8006548:	3601      	adds	r6, #1
 800654a:	2102      	movs	r1, #2
 800654c:	e000      	b.n	8006550 <__cvt+0x44>
 800654e:	2103      	movs	r1, #3
 8006550:	ab03      	add	r3, sp, #12
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	ab02      	add	r3, sp, #8
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	ec45 4b10 	vmov	d0, r4, r5
 800655c:	4653      	mov	r3, sl
 800655e:	4632      	mov	r2, r6
 8006560:	f001 fa92 	bl	8007a88 <_dtoa_r>
 8006564:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006568:	4607      	mov	r7, r0
 800656a:	d102      	bne.n	8006572 <__cvt+0x66>
 800656c:	f019 0f01 	tst.w	r9, #1
 8006570:	d022      	beq.n	80065b8 <__cvt+0xac>
 8006572:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006576:	eb07 0906 	add.w	r9, r7, r6
 800657a:	d110      	bne.n	800659e <__cvt+0x92>
 800657c:	783b      	ldrb	r3, [r7, #0]
 800657e:	2b30      	cmp	r3, #48	; 0x30
 8006580:	d10a      	bne.n	8006598 <__cvt+0x8c>
 8006582:	2200      	movs	r2, #0
 8006584:	2300      	movs	r3, #0
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f7fa faa5 	bl	8000ad8 <__aeabi_dcmpeq>
 800658e:	b918      	cbnz	r0, 8006598 <__cvt+0x8c>
 8006590:	f1c6 0601 	rsb	r6, r6, #1
 8006594:	f8ca 6000 	str.w	r6, [sl]
 8006598:	f8da 3000 	ldr.w	r3, [sl]
 800659c:	4499      	add	r9, r3
 800659e:	2200      	movs	r2, #0
 80065a0:	2300      	movs	r3, #0
 80065a2:	4620      	mov	r0, r4
 80065a4:	4629      	mov	r1, r5
 80065a6:	f7fa fa97 	bl	8000ad8 <__aeabi_dcmpeq>
 80065aa:	b108      	cbz	r0, 80065b0 <__cvt+0xa4>
 80065ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80065b0:	2230      	movs	r2, #48	; 0x30
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	454b      	cmp	r3, r9
 80065b6:	d307      	bcc.n	80065c8 <__cvt+0xbc>
 80065b8:	9b03      	ldr	r3, [sp, #12]
 80065ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065bc:	1bdb      	subs	r3, r3, r7
 80065be:	4638      	mov	r0, r7
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	b004      	add	sp, #16
 80065c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c8:	1c59      	adds	r1, r3, #1
 80065ca:	9103      	str	r1, [sp, #12]
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e7f0      	b.n	80065b2 <__cvt+0xa6>

080065d0 <__exponent>:
 80065d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065d2:	4603      	mov	r3, r0
 80065d4:	2900      	cmp	r1, #0
 80065d6:	bfb8      	it	lt
 80065d8:	4249      	neglt	r1, r1
 80065da:	f803 2b02 	strb.w	r2, [r3], #2
 80065de:	bfb4      	ite	lt
 80065e0:	222d      	movlt	r2, #45	; 0x2d
 80065e2:	222b      	movge	r2, #43	; 0x2b
 80065e4:	2909      	cmp	r1, #9
 80065e6:	7042      	strb	r2, [r0, #1]
 80065e8:	dd2a      	ble.n	8006640 <__exponent+0x70>
 80065ea:	f10d 0207 	add.w	r2, sp, #7
 80065ee:	4617      	mov	r7, r2
 80065f0:	260a      	movs	r6, #10
 80065f2:	4694      	mov	ip, r2
 80065f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80065f8:	fb06 1415 	mls	r4, r6, r5, r1
 80065fc:	3430      	adds	r4, #48	; 0x30
 80065fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006602:	460c      	mov	r4, r1
 8006604:	2c63      	cmp	r4, #99	; 0x63
 8006606:	f102 32ff 	add.w	r2, r2, #4294967295
 800660a:	4629      	mov	r1, r5
 800660c:	dcf1      	bgt.n	80065f2 <__exponent+0x22>
 800660e:	3130      	adds	r1, #48	; 0x30
 8006610:	f1ac 0402 	sub.w	r4, ip, #2
 8006614:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006618:	1c41      	adds	r1, r0, #1
 800661a:	4622      	mov	r2, r4
 800661c:	42ba      	cmp	r2, r7
 800661e:	d30a      	bcc.n	8006636 <__exponent+0x66>
 8006620:	f10d 0209 	add.w	r2, sp, #9
 8006624:	eba2 020c 	sub.w	r2, r2, ip
 8006628:	42bc      	cmp	r4, r7
 800662a:	bf88      	it	hi
 800662c:	2200      	movhi	r2, #0
 800662e:	4413      	add	r3, r2
 8006630:	1a18      	subs	r0, r3, r0
 8006632:	b003      	add	sp, #12
 8006634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006636:	f812 5b01 	ldrb.w	r5, [r2], #1
 800663a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800663e:	e7ed      	b.n	800661c <__exponent+0x4c>
 8006640:	2330      	movs	r3, #48	; 0x30
 8006642:	3130      	adds	r1, #48	; 0x30
 8006644:	7083      	strb	r3, [r0, #2]
 8006646:	70c1      	strb	r1, [r0, #3]
 8006648:	1d03      	adds	r3, r0, #4
 800664a:	e7f1      	b.n	8006630 <__exponent+0x60>

0800664c <_printf_float>:
 800664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006650:	ed2d 8b02 	vpush	{d8}
 8006654:	b08d      	sub	sp, #52	; 0x34
 8006656:	460c      	mov	r4, r1
 8006658:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800665c:	4616      	mov	r6, r2
 800665e:	461f      	mov	r7, r3
 8006660:	4605      	mov	r5, r0
 8006662:	f001 f8a7 	bl	80077b4 <_localeconv_r>
 8006666:	f8d0 a000 	ldr.w	sl, [r0]
 800666a:	4650      	mov	r0, sl
 800666c:	f7f9 fe08 	bl	8000280 <strlen>
 8006670:	2300      	movs	r3, #0
 8006672:	930a      	str	r3, [sp, #40]	; 0x28
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	9305      	str	r3, [sp, #20]
 8006678:	f8d8 3000 	ldr.w	r3, [r8]
 800667c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006680:	3307      	adds	r3, #7
 8006682:	f023 0307 	bic.w	r3, r3, #7
 8006686:	f103 0208 	add.w	r2, r3, #8
 800668a:	f8c8 2000 	str.w	r2, [r8]
 800668e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006696:	9307      	str	r3, [sp, #28]
 8006698:	f8cd 8018 	str.w	r8, [sp, #24]
 800669c:	ee08 0a10 	vmov	s16, r0
 80066a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80066a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066a8:	4b9e      	ldr	r3, [pc, #632]	; (8006924 <_printf_float+0x2d8>)
 80066aa:	f04f 32ff 	mov.w	r2, #4294967295
 80066ae:	f7fa fa45 	bl	8000b3c <__aeabi_dcmpun>
 80066b2:	bb88      	cbnz	r0, 8006718 <_printf_float+0xcc>
 80066b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066b8:	4b9a      	ldr	r3, [pc, #616]	; (8006924 <_printf_float+0x2d8>)
 80066ba:	f04f 32ff 	mov.w	r2, #4294967295
 80066be:	f7fa fa1f 	bl	8000b00 <__aeabi_dcmple>
 80066c2:	bb48      	cbnz	r0, 8006718 <_printf_float+0xcc>
 80066c4:	2200      	movs	r2, #0
 80066c6:	2300      	movs	r3, #0
 80066c8:	4640      	mov	r0, r8
 80066ca:	4649      	mov	r1, r9
 80066cc:	f7fa fa0e 	bl	8000aec <__aeabi_dcmplt>
 80066d0:	b110      	cbz	r0, 80066d8 <_printf_float+0x8c>
 80066d2:	232d      	movs	r3, #45	; 0x2d
 80066d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d8:	4a93      	ldr	r2, [pc, #588]	; (8006928 <_printf_float+0x2dc>)
 80066da:	4b94      	ldr	r3, [pc, #592]	; (800692c <_printf_float+0x2e0>)
 80066dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066e0:	bf94      	ite	ls
 80066e2:	4690      	movls	r8, r2
 80066e4:	4698      	movhi	r8, r3
 80066e6:	2303      	movs	r3, #3
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	9b05      	ldr	r3, [sp, #20]
 80066ec:	f023 0304 	bic.w	r3, r3, #4
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	f04f 0900 	mov.w	r9, #0
 80066f6:	9700      	str	r7, [sp, #0]
 80066f8:	4633      	mov	r3, r6
 80066fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80066fc:	4621      	mov	r1, r4
 80066fe:	4628      	mov	r0, r5
 8006700:	f000 f9da 	bl	8006ab8 <_printf_common>
 8006704:	3001      	adds	r0, #1
 8006706:	f040 8090 	bne.w	800682a <_printf_float+0x1de>
 800670a:	f04f 30ff 	mov.w	r0, #4294967295
 800670e:	b00d      	add	sp, #52	; 0x34
 8006710:	ecbd 8b02 	vpop	{d8}
 8006714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006718:	4642      	mov	r2, r8
 800671a:	464b      	mov	r3, r9
 800671c:	4640      	mov	r0, r8
 800671e:	4649      	mov	r1, r9
 8006720:	f7fa fa0c 	bl	8000b3c <__aeabi_dcmpun>
 8006724:	b140      	cbz	r0, 8006738 <_printf_float+0xec>
 8006726:	464b      	mov	r3, r9
 8006728:	2b00      	cmp	r3, #0
 800672a:	bfbc      	itt	lt
 800672c:	232d      	movlt	r3, #45	; 0x2d
 800672e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006732:	4a7f      	ldr	r2, [pc, #508]	; (8006930 <_printf_float+0x2e4>)
 8006734:	4b7f      	ldr	r3, [pc, #508]	; (8006934 <_printf_float+0x2e8>)
 8006736:	e7d1      	b.n	80066dc <_printf_float+0x90>
 8006738:	6863      	ldr	r3, [r4, #4]
 800673a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800673e:	9206      	str	r2, [sp, #24]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	d13f      	bne.n	80067c4 <_printf_float+0x178>
 8006744:	2306      	movs	r3, #6
 8006746:	6063      	str	r3, [r4, #4]
 8006748:	9b05      	ldr	r3, [sp, #20]
 800674a:	6861      	ldr	r1, [r4, #4]
 800674c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006750:	2300      	movs	r3, #0
 8006752:	9303      	str	r3, [sp, #12]
 8006754:	ab0a      	add	r3, sp, #40	; 0x28
 8006756:	e9cd b301 	strd	fp, r3, [sp, #4]
 800675a:	ab09      	add	r3, sp, #36	; 0x24
 800675c:	ec49 8b10 	vmov	d0, r8, r9
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	6022      	str	r2, [r4, #0]
 8006764:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006768:	4628      	mov	r0, r5
 800676a:	f7ff fecf 	bl	800650c <__cvt>
 800676e:	9b06      	ldr	r3, [sp, #24]
 8006770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006772:	2b47      	cmp	r3, #71	; 0x47
 8006774:	4680      	mov	r8, r0
 8006776:	d108      	bne.n	800678a <_printf_float+0x13e>
 8006778:	1cc8      	adds	r0, r1, #3
 800677a:	db02      	blt.n	8006782 <_printf_float+0x136>
 800677c:	6863      	ldr	r3, [r4, #4]
 800677e:	4299      	cmp	r1, r3
 8006780:	dd41      	ble.n	8006806 <_printf_float+0x1ba>
 8006782:	f1ab 0302 	sub.w	r3, fp, #2
 8006786:	fa5f fb83 	uxtb.w	fp, r3
 800678a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800678e:	d820      	bhi.n	80067d2 <_printf_float+0x186>
 8006790:	3901      	subs	r1, #1
 8006792:	465a      	mov	r2, fp
 8006794:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006798:	9109      	str	r1, [sp, #36]	; 0x24
 800679a:	f7ff ff19 	bl	80065d0 <__exponent>
 800679e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a0:	1813      	adds	r3, r2, r0
 80067a2:	2a01      	cmp	r2, #1
 80067a4:	4681      	mov	r9, r0
 80067a6:	6123      	str	r3, [r4, #16]
 80067a8:	dc02      	bgt.n	80067b0 <_printf_float+0x164>
 80067aa:	6822      	ldr	r2, [r4, #0]
 80067ac:	07d2      	lsls	r2, r2, #31
 80067ae:	d501      	bpl.n	80067b4 <_printf_float+0x168>
 80067b0:	3301      	adds	r3, #1
 80067b2:	6123      	str	r3, [r4, #16]
 80067b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d09c      	beq.n	80066f6 <_printf_float+0xaa>
 80067bc:	232d      	movs	r3, #45	; 0x2d
 80067be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c2:	e798      	b.n	80066f6 <_printf_float+0xaa>
 80067c4:	9a06      	ldr	r2, [sp, #24]
 80067c6:	2a47      	cmp	r2, #71	; 0x47
 80067c8:	d1be      	bne.n	8006748 <_printf_float+0xfc>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1bc      	bne.n	8006748 <_printf_float+0xfc>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e7b9      	b.n	8006746 <_printf_float+0xfa>
 80067d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067d6:	d118      	bne.n	800680a <_printf_float+0x1be>
 80067d8:	2900      	cmp	r1, #0
 80067da:	6863      	ldr	r3, [r4, #4]
 80067dc:	dd0b      	ble.n	80067f6 <_printf_float+0x1aa>
 80067de:	6121      	str	r1, [r4, #16]
 80067e0:	b913      	cbnz	r3, 80067e8 <_printf_float+0x19c>
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	07d0      	lsls	r0, r2, #31
 80067e6:	d502      	bpl.n	80067ee <_printf_float+0x1a2>
 80067e8:	3301      	adds	r3, #1
 80067ea:	440b      	add	r3, r1
 80067ec:	6123      	str	r3, [r4, #16]
 80067ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80067f0:	f04f 0900 	mov.w	r9, #0
 80067f4:	e7de      	b.n	80067b4 <_printf_float+0x168>
 80067f6:	b913      	cbnz	r3, 80067fe <_printf_float+0x1b2>
 80067f8:	6822      	ldr	r2, [r4, #0]
 80067fa:	07d2      	lsls	r2, r2, #31
 80067fc:	d501      	bpl.n	8006802 <_printf_float+0x1b6>
 80067fe:	3302      	adds	r3, #2
 8006800:	e7f4      	b.n	80067ec <_printf_float+0x1a0>
 8006802:	2301      	movs	r3, #1
 8006804:	e7f2      	b.n	80067ec <_printf_float+0x1a0>
 8006806:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800680a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680c:	4299      	cmp	r1, r3
 800680e:	db05      	blt.n	800681c <_printf_float+0x1d0>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	6121      	str	r1, [r4, #16]
 8006814:	07d8      	lsls	r0, r3, #31
 8006816:	d5ea      	bpl.n	80067ee <_printf_float+0x1a2>
 8006818:	1c4b      	adds	r3, r1, #1
 800681a:	e7e7      	b.n	80067ec <_printf_float+0x1a0>
 800681c:	2900      	cmp	r1, #0
 800681e:	bfd4      	ite	le
 8006820:	f1c1 0202 	rsble	r2, r1, #2
 8006824:	2201      	movgt	r2, #1
 8006826:	4413      	add	r3, r2
 8006828:	e7e0      	b.n	80067ec <_printf_float+0x1a0>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	055a      	lsls	r2, r3, #21
 800682e:	d407      	bmi.n	8006840 <_printf_float+0x1f4>
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	4642      	mov	r2, r8
 8006834:	4631      	mov	r1, r6
 8006836:	4628      	mov	r0, r5
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	d12c      	bne.n	8006898 <_printf_float+0x24c>
 800683e:	e764      	b.n	800670a <_printf_float+0xbe>
 8006840:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006844:	f240 80e0 	bls.w	8006a08 <_printf_float+0x3bc>
 8006848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800684c:	2200      	movs	r2, #0
 800684e:	2300      	movs	r3, #0
 8006850:	f7fa f942 	bl	8000ad8 <__aeabi_dcmpeq>
 8006854:	2800      	cmp	r0, #0
 8006856:	d034      	beq.n	80068c2 <_printf_float+0x276>
 8006858:	4a37      	ldr	r2, [pc, #220]	; (8006938 <_printf_float+0x2ec>)
 800685a:	2301      	movs	r3, #1
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f af51 	beq.w	800670a <_printf_float+0xbe>
 8006868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800686c:	429a      	cmp	r2, r3
 800686e:	db02      	blt.n	8006876 <_printf_float+0x22a>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	07d8      	lsls	r0, r3, #31
 8006874:	d510      	bpl.n	8006898 <_printf_float+0x24c>
 8006876:	ee18 3a10 	vmov	r3, s16
 800687a:	4652      	mov	r2, sl
 800687c:	4631      	mov	r1, r6
 800687e:	4628      	mov	r0, r5
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	f43f af41 	beq.w	800670a <_printf_float+0xbe>
 8006888:	f04f 0800 	mov.w	r8, #0
 800688c:	f104 091a 	add.w	r9, r4, #26
 8006890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006892:	3b01      	subs	r3, #1
 8006894:	4543      	cmp	r3, r8
 8006896:	dc09      	bgt.n	80068ac <_printf_float+0x260>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	079b      	lsls	r3, r3, #30
 800689c:	f100 8107 	bmi.w	8006aae <_printf_float+0x462>
 80068a0:	68e0      	ldr	r0, [r4, #12]
 80068a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a4:	4298      	cmp	r0, r3
 80068a6:	bfb8      	it	lt
 80068a8:	4618      	movlt	r0, r3
 80068aa:	e730      	b.n	800670e <_printf_float+0xc2>
 80068ac:	2301      	movs	r3, #1
 80068ae:	464a      	mov	r2, r9
 80068b0:	4631      	mov	r1, r6
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f af27 	beq.w	800670a <_printf_float+0xbe>
 80068bc:	f108 0801 	add.w	r8, r8, #1
 80068c0:	e7e6      	b.n	8006890 <_printf_float+0x244>
 80068c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dc39      	bgt.n	800693c <_printf_float+0x2f0>
 80068c8:	4a1b      	ldr	r2, [pc, #108]	; (8006938 <_printf_float+0x2ec>)
 80068ca:	2301      	movs	r3, #1
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f af19 	beq.w	800670a <_printf_float+0xbe>
 80068d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068dc:	4313      	orrs	r3, r2
 80068de:	d102      	bne.n	80068e6 <_printf_float+0x29a>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	07d9      	lsls	r1, r3, #31
 80068e4:	d5d8      	bpl.n	8006898 <_printf_float+0x24c>
 80068e6:	ee18 3a10 	vmov	r3, s16
 80068ea:	4652      	mov	r2, sl
 80068ec:	4631      	mov	r1, r6
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	f43f af09 	beq.w	800670a <_printf_float+0xbe>
 80068f8:	f04f 0900 	mov.w	r9, #0
 80068fc:	f104 0a1a 	add.w	sl, r4, #26
 8006900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006902:	425b      	negs	r3, r3
 8006904:	454b      	cmp	r3, r9
 8006906:	dc01      	bgt.n	800690c <_printf_float+0x2c0>
 8006908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800690a:	e792      	b.n	8006832 <_printf_float+0x1e6>
 800690c:	2301      	movs	r3, #1
 800690e:	4652      	mov	r2, sl
 8006910:	4631      	mov	r1, r6
 8006912:	4628      	mov	r0, r5
 8006914:	47b8      	blx	r7
 8006916:	3001      	adds	r0, #1
 8006918:	f43f aef7 	beq.w	800670a <_printf_float+0xbe>
 800691c:	f109 0901 	add.w	r9, r9, #1
 8006920:	e7ee      	b.n	8006900 <_printf_float+0x2b4>
 8006922:	bf00      	nop
 8006924:	7fefffff 	.word	0x7fefffff
 8006928:	0800b0f0 	.word	0x0800b0f0
 800692c:	0800b0f4 	.word	0x0800b0f4
 8006930:	0800b0f8 	.word	0x0800b0f8
 8006934:	0800b0fc 	.word	0x0800b0fc
 8006938:	0800b100 	.word	0x0800b100
 800693c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800693e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006940:	429a      	cmp	r2, r3
 8006942:	bfa8      	it	ge
 8006944:	461a      	movge	r2, r3
 8006946:	2a00      	cmp	r2, #0
 8006948:	4691      	mov	r9, r2
 800694a:	dc37      	bgt.n	80069bc <_printf_float+0x370>
 800694c:	f04f 0b00 	mov.w	fp, #0
 8006950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006954:	f104 021a 	add.w	r2, r4, #26
 8006958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800695a:	9305      	str	r3, [sp, #20]
 800695c:	eba3 0309 	sub.w	r3, r3, r9
 8006960:	455b      	cmp	r3, fp
 8006962:	dc33      	bgt.n	80069cc <_printf_float+0x380>
 8006964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006968:	429a      	cmp	r2, r3
 800696a:	db3b      	blt.n	80069e4 <_printf_float+0x398>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	07da      	lsls	r2, r3, #31
 8006970:	d438      	bmi.n	80069e4 <_printf_float+0x398>
 8006972:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006976:	eba2 0903 	sub.w	r9, r2, r3
 800697a:	9b05      	ldr	r3, [sp, #20]
 800697c:	1ad2      	subs	r2, r2, r3
 800697e:	4591      	cmp	r9, r2
 8006980:	bfa8      	it	ge
 8006982:	4691      	movge	r9, r2
 8006984:	f1b9 0f00 	cmp.w	r9, #0
 8006988:	dc35      	bgt.n	80069f6 <_printf_float+0x3aa>
 800698a:	f04f 0800 	mov.w	r8, #0
 800698e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006992:	f104 0a1a 	add.w	sl, r4, #26
 8006996:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800699a:	1a9b      	subs	r3, r3, r2
 800699c:	eba3 0309 	sub.w	r3, r3, r9
 80069a0:	4543      	cmp	r3, r8
 80069a2:	f77f af79 	ble.w	8006898 <_printf_float+0x24c>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4652      	mov	r2, sl
 80069aa:	4631      	mov	r1, r6
 80069ac:	4628      	mov	r0, r5
 80069ae:	47b8      	blx	r7
 80069b0:	3001      	adds	r0, #1
 80069b2:	f43f aeaa 	beq.w	800670a <_printf_float+0xbe>
 80069b6:	f108 0801 	add.w	r8, r8, #1
 80069ba:	e7ec      	b.n	8006996 <_printf_float+0x34a>
 80069bc:	4613      	mov	r3, r2
 80069be:	4631      	mov	r1, r6
 80069c0:	4642      	mov	r2, r8
 80069c2:	4628      	mov	r0, r5
 80069c4:	47b8      	blx	r7
 80069c6:	3001      	adds	r0, #1
 80069c8:	d1c0      	bne.n	800694c <_printf_float+0x300>
 80069ca:	e69e      	b.n	800670a <_printf_float+0xbe>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4631      	mov	r1, r6
 80069d0:	4628      	mov	r0, r5
 80069d2:	9205      	str	r2, [sp, #20]
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	f43f ae97 	beq.w	800670a <_printf_float+0xbe>
 80069dc:	9a05      	ldr	r2, [sp, #20]
 80069de:	f10b 0b01 	add.w	fp, fp, #1
 80069e2:	e7b9      	b.n	8006958 <_printf_float+0x30c>
 80069e4:	ee18 3a10 	vmov	r3, s16
 80069e8:	4652      	mov	r2, sl
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	d1be      	bne.n	8006972 <_printf_float+0x326>
 80069f4:	e689      	b.n	800670a <_printf_float+0xbe>
 80069f6:	9a05      	ldr	r2, [sp, #20]
 80069f8:	464b      	mov	r3, r9
 80069fa:	4442      	add	r2, r8
 80069fc:	4631      	mov	r1, r6
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	d1c1      	bne.n	800698a <_printf_float+0x33e>
 8006a06:	e680      	b.n	800670a <_printf_float+0xbe>
 8006a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a0a:	2a01      	cmp	r2, #1
 8006a0c:	dc01      	bgt.n	8006a12 <_printf_float+0x3c6>
 8006a0e:	07db      	lsls	r3, r3, #31
 8006a10:	d53a      	bpl.n	8006a88 <_printf_float+0x43c>
 8006a12:	2301      	movs	r3, #1
 8006a14:	4642      	mov	r2, r8
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	f43f ae74 	beq.w	800670a <_printf_float+0xbe>
 8006a22:	ee18 3a10 	vmov	r3, s16
 8006a26:	4652      	mov	r2, sl
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f ae6b 	beq.w	800670a <_printf_float+0xbe>
 8006a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006a40:	f7fa f84a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a44:	b9d8      	cbnz	r0, 8006a7e <_printf_float+0x432>
 8006a46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a4a:	f108 0201 	add.w	r2, r8, #1
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b8      	blx	r7
 8006a54:	3001      	adds	r0, #1
 8006a56:	d10e      	bne.n	8006a76 <_printf_float+0x42a>
 8006a58:	e657      	b.n	800670a <_printf_float+0xbe>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	f43f ae50 	beq.w	800670a <_printf_float+0xbe>
 8006a6a:	f108 0801 	add.w	r8, r8, #1
 8006a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a70:	3b01      	subs	r3, #1
 8006a72:	4543      	cmp	r3, r8
 8006a74:	dcf1      	bgt.n	8006a5a <_printf_float+0x40e>
 8006a76:	464b      	mov	r3, r9
 8006a78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a7c:	e6da      	b.n	8006834 <_printf_float+0x1e8>
 8006a7e:	f04f 0800 	mov.w	r8, #0
 8006a82:	f104 0a1a 	add.w	sl, r4, #26
 8006a86:	e7f2      	b.n	8006a6e <_printf_float+0x422>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	e7df      	b.n	8006a4e <_printf_float+0x402>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	464a      	mov	r2, r9
 8006a92:	4631      	mov	r1, r6
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b8      	blx	r7
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f43f ae36 	beq.w	800670a <_printf_float+0xbe>
 8006a9e:	f108 0801 	add.w	r8, r8, #1
 8006aa2:	68e3      	ldr	r3, [r4, #12]
 8006aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aa6:	1a5b      	subs	r3, r3, r1
 8006aa8:	4543      	cmp	r3, r8
 8006aaa:	dcf0      	bgt.n	8006a8e <_printf_float+0x442>
 8006aac:	e6f8      	b.n	80068a0 <_printf_float+0x254>
 8006aae:	f04f 0800 	mov.w	r8, #0
 8006ab2:	f104 0919 	add.w	r9, r4, #25
 8006ab6:	e7f4      	b.n	8006aa2 <_printf_float+0x456>

08006ab8 <_printf_common>:
 8006ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006abc:	4616      	mov	r6, r2
 8006abe:	4699      	mov	r9, r3
 8006ac0:	688a      	ldr	r2, [r1, #8]
 8006ac2:	690b      	ldr	r3, [r1, #16]
 8006ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	bfb8      	it	lt
 8006acc:	4613      	movlt	r3, r2
 8006ace:	6033      	str	r3, [r6, #0]
 8006ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	b10a      	cbz	r2, 8006ade <_printf_common+0x26>
 8006ada:	3301      	adds	r3, #1
 8006adc:	6033      	str	r3, [r6, #0]
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	0699      	lsls	r1, r3, #26
 8006ae2:	bf42      	ittt	mi
 8006ae4:	6833      	ldrmi	r3, [r6, #0]
 8006ae6:	3302      	addmi	r3, #2
 8006ae8:	6033      	strmi	r3, [r6, #0]
 8006aea:	6825      	ldr	r5, [r4, #0]
 8006aec:	f015 0506 	ands.w	r5, r5, #6
 8006af0:	d106      	bne.n	8006b00 <_printf_common+0x48>
 8006af2:	f104 0a19 	add.w	sl, r4, #25
 8006af6:	68e3      	ldr	r3, [r4, #12]
 8006af8:	6832      	ldr	r2, [r6, #0]
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	42ab      	cmp	r3, r5
 8006afe:	dc26      	bgt.n	8006b4e <_printf_common+0x96>
 8006b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b04:	1e13      	subs	r3, r2, #0
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	bf18      	it	ne
 8006b0a:	2301      	movne	r3, #1
 8006b0c:	0692      	lsls	r2, r2, #26
 8006b0e:	d42b      	bmi.n	8006b68 <_printf_common+0xb0>
 8006b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b14:	4649      	mov	r1, r9
 8006b16:	4638      	mov	r0, r7
 8006b18:	47c0      	blx	r8
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d01e      	beq.n	8006b5c <_printf_common+0xa4>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	6922      	ldr	r2, [r4, #16]
 8006b22:	f003 0306 	and.w	r3, r3, #6
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	bf02      	ittt	eq
 8006b2a:	68e5      	ldreq	r5, [r4, #12]
 8006b2c:	6833      	ldreq	r3, [r6, #0]
 8006b2e:	1aed      	subeq	r5, r5, r3
 8006b30:	68a3      	ldr	r3, [r4, #8]
 8006b32:	bf0c      	ite	eq
 8006b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b38:	2500      	movne	r5, #0
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	bfc4      	itt	gt
 8006b3e:	1a9b      	subgt	r3, r3, r2
 8006b40:	18ed      	addgt	r5, r5, r3
 8006b42:	2600      	movs	r6, #0
 8006b44:	341a      	adds	r4, #26
 8006b46:	42b5      	cmp	r5, r6
 8006b48:	d11a      	bne.n	8006b80 <_printf_common+0xc8>
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	e008      	b.n	8006b60 <_printf_common+0xa8>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4652      	mov	r2, sl
 8006b52:	4649      	mov	r1, r9
 8006b54:	4638      	mov	r0, r7
 8006b56:	47c0      	blx	r8
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d103      	bne.n	8006b64 <_printf_common+0xac>
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b64:	3501      	adds	r5, #1
 8006b66:	e7c6      	b.n	8006af6 <_printf_common+0x3e>
 8006b68:	18e1      	adds	r1, r4, r3
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	2030      	movs	r0, #48	; 0x30
 8006b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b72:	4422      	add	r2, r4
 8006b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	e7c7      	b.n	8006b10 <_printf_common+0x58>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4622      	mov	r2, r4
 8006b84:	4649      	mov	r1, r9
 8006b86:	4638      	mov	r0, r7
 8006b88:	47c0      	blx	r8
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d0e6      	beq.n	8006b5c <_printf_common+0xa4>
 8006b8e:	3601      	adds	r6, #1
 8006b90:	e7d9      	b.n	8006b46 <_printf_common+0x8e>
	...

08006b94 <_printf_i>:
 8006b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	7e0f      	ldrb	r7, [r1, #24]
 8006b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b9c:	2f78      	cmp	r7, #120	; 0x78
 8006b9e:	4691      	mov	r9, r2
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	469a      	mov	sl, r3
 8006ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006baa:	d807      	bhi.n	8006bbc <_printf_i+0x28>
 8006bac:	2f62      	cmp	r7, #98	; 0x62
 8006bae:	d80a      	bhi.n	8006bc6 <_printf_i+0x32>
 8006bb0:	2f00      	cmp	r7, #0
 8006bb2:	f000 80d4 	beq.w	8006d5e <_printf_i+0x1ca>
 8006bb6:	2f58      	cmp	r7, #88	; 0x58
 8006bb8:	f000 80c0 	beq.w	8006d3c <_printf_i+0x1a8>
 8006bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bc4:	e03a      	b.n	8006c3c <_printf_i+0xa8>
 8006bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bca:	2b15      	cmp	r3, #21
 8006bcc:	d8f6      	bhi.n	8006bbc <_printf_i+0x28>
 8006bce:	a101      	add	r1, pc, #4	; (adr r1, 8006bd4 <_printf_i+0x40>)
 8006bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bd4:	08006c2d 	.word	0x08006c2d
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006bbd 	.word	0x08006bbd
 8006be0:	08006bbd 	.word	0x08006bbd
 8006be4:	08006bbd 	.word	0x08006bbd
 8006be8:	08006bbd 	.word	0x08006bbd
 8006bec:	08006c41 	.word	0x08006c41
 8006bf0:	08006bbd 	.word	0x08006bbd
 8006bf4:	08006bbd 	.word	0x08006bbd
 8006bf8:	08006bbd 	.word	0x08006bbd
 8006bfc:	08006bbd 	.word	0x08006bbd
 8006c00:	08006d45 	.word	0x08006d45
 8006c04:	08006c6d 	.word	0x08006c6d
 8006c08:	08006cff 	.word	0x08006cff
 8006c0c:	08006bbd 	.word	0x08006bbd
 8006c10:	08006bbd 	.word	0x08006bbd
 8006c14:	08006d67 	.word	0x08006d67
 8006c18:	08006bbd 	.word	0x08006bbd
 8006c1c:	08006c6d 	.word	0x08006c6d
 8006c20:	08006bbd 	.word	0x08006bbd
 8006c24:	08006bbd 	.word	0x08006bbd
 8006c28:	08006d07 	.word	0x08006d07
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	1d1a      	adds	r2, r3, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	602a      	str	r2, [r5, #0]
 8006c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e09f      	b.n	8006d80 <_printf_i+0x1ec>
 8006c40:	6820      	ldr	r0, [r4, #0]
 8006c42:	682b      	ldr	r3, [r5, #0]
 8006c44:	0607      	lsls	r7, r0, #24
 8006c46:	f103 0104 	add.w	r1, r3, #4
 8006c4a:	6029      	str	r1, [r5, #0]
 8006c4c:	d501      	bpl.n	8006c52 <_printf_i+0xbe>
 8006c4e:	681e      	ldr	r6, [r3, #0]
 8006c50:	e003      	b.n	8006c5a <_printf_i+0xc6>
 8006c52:	0646      	lsls	r6, r0, #25
 8006c54:	d5fb      	bpl.n	8006c4e <_printf_i+0xba>
 8006c56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	da03      	bge.n	8006c66 <_printf_i+0xd2>
 8006c5e:	232d      	movs	r3, #45	; 0x2d
 8006c60:	4276      	negs	r6, r6
 8006c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c66:	485a      	ldr	r0, [pc, #360]	; (8006dd0 <_printf_i+0x23c>)
 8006c68:	230a      	movs	r3, #10
 8006c6a:	e012      	b.n	8006c92 <_printf_i+0xfe>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	6820      	ldr	r0, [r4, #0]
 8006c70:	1d19      	adds	r1, r3, #4
 8006c72:	6029      	str	r1, [r5, #0]
 8006c74:	0605      	lsls	r5, r0, #24
 8006c76:	d501      	bpl.n	8006c7c <_printf_i+0xe8>
 8006c78:	681e      	ldr	r6, [r3, #0]
 8006c7a:	e002      	b.n	8006c82 <_printf_i+0xee>
 8006c7c:	0641      	lsls	r1, r0, #25
 8006c7e:	d5fb      	bpl.n	8006c78 <_printf_i+0xe4>
 8006c80:	881e      	ldrh	r6, [r3, #0]
 8006c82:	4853      	ldr	r0, [pc, #332]	; (8006dd0 <_printf_i+0x23c>)
 8006c84:	2f6f      	cmp	r7, #111	; 0x6f
 8006c86:	bf0c      	ite	eq
 8006c88:	2308      	moveq	r3, #8
 8006c8a:	230a      	movne	r3, #10
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c92:	6865      	ldr	r5, [r4, #4]
 8006c94:	60a5      	str	r5, [r4, #8]
 8006c96:	2d00      	cmp	r5, #0
 8006c98:	bfa2      	ittt	ge
 8006c9a:	6821      	ldrge	r1, [r4, #0]
 8006c9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ca0:	6021      	strge	r1, [r4, #0]
 8006ca2:	b90e      	cbnz	r6, 8006ca8 <_printf_i+0x114>
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	d04b      	beq.n	8006d40 <_printf_i+0x1ac>
 8006ca8:	4615      	mov	r5, r2
 8006caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cae:	fb03 6711 	mls	r7, r3, r1, r6
 8006cb2:	5dc7      	ldrb	r7, [r0, r7]
 8006cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cb8:	4637      	mov	r7, r6
 8006cba:	42bb      	cmp	r3, r7
 8006cbc:	460e      	mov	r6, r1
 8006cbe:	d9f4      	bls.n	8006caa <_printf_i+0x116>
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d10b      	bne.n	8006cdc <_printf_i+0x148>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	07de      	lsls	r6, r3, #31
 8006cc8:	d508      	bpl.n	8006cdc <_printf_i+0x148>
 8006cca:	6923      	ldr	r3, [r4, #16]
 8006ccc:	6861      	ldr	r1, [r4, #4]
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	bfde      	ittt	le
 8006cd2:	2330      	movle	r3, #48	; 0x30
 8006cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cdc:	1b52      	subs	r2, r2, r5
 8006cde:	6122      	str	r2, [r4, #16]
 8006ce0:	f8cd a000 	str.w	sl, [sp]
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	aa03      	add	r2, sp, #12
 8006ce8:	4621      	mov	r1, r4
 8006cea:	4640      	mov	r0, r8
 8006cec:	f7ff fee4 	bl	8006ab8 <_printf_common>
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d14a      	bne.n	8006d8a <_printf_i+0x1f6>
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf8:	b004      	add	sp, #16
 8006cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	f043 0320 	orr.w	r3, r3, #32
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	4833      	ldr	r0, [pc, #204]	; (8006dd4 <_printf_i+0x240>)
 8006d08:	2778      	movs	r7, #120	; 0x78
 8006d0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	6829      	ldr	r1, [r5, #0]
 8006d12:	061f      	lsls	r7, r3, #24
 8006d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d18:	d402      	bmi.n	8006d20 <_printf_i+0x18c>
 8006d1a:	065f      	lsls	r7, r3, #25
 8006d1c:	bf48      	it	mi
 8006d1e:	b2b6      	uxthmi	r6, r6
 8006d20:	07df      	lsls	r7, r3, #31
 8006d22:	bf48      	it	mi
 8006d24:	f043 0320 	orrmi.w	r3, r3, #32
 8006d28:	6029      	str	r1, [r5, #0]
 8006d2a:	bf48      	it	mi
 8006d2c:	6023      	strmi	r3, [r4, #0]
 8006d2e:	b91e      	cbnz	r6, 8006d38 <_printf_i+0x1a4>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	f023 0320 	bic.w	r3, r3, #32
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	2310      	movs	r3, #16
 8006d3a:	e7a7      	b.n	8006c8c <_printf_i+0xf8>
 8006d3c:	4824      	ldr	r0, [pc, #144]	; (8006dd0 <_printf_i+0x23c>)
 8006d3e:	e7e4      	b.n	8006d0a <_printf_i+0x176>
 8006d40:	4615      	mov	r5, r2
 8006d42:	e7bd      	b.n	8006cc0 <_printf_i+0x12c>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	6826      	ldr	r6, [r4, #0]
 8006d48:	6961      	ldr	r1, [r4, #20]
 8006d4a:	1d18      	adds	r0, r3, #4
 8006d4c:	6028      	str	r0, [r5, #0]
 8006d4e:	0635      	lsls	r5, r6, #24
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	d501      	bpl.n	8006d58 <_printf_i+0x1c4>
 8006d54:	6019      	str	r1, [r3, #0]
 8006d56:	e002      	b.n	8006d5e <_printf_i+0x1ca>
 8006d58:	0670      	lsls	r0, r6, #25
 8006d5a:	d5fb      	bpl.n	8006d54 <_printf_i+0x1c0>
 8006d5c:	8019      	strh	r1, [r3, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6123      	str	r3, [r4, #16]
 8006d62:	4615      	mov	r5, r2
 8006d64:	e7bc      	b.n	8006ce0 <_printf_i+0x14c>
 8006d66:	682b      	ldr	r3, [r5, #0]
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	602a      	str	r2, [r5, #0]
 8006d6c:	681d      	ldr	r5, [r3, #0]
 8006d6e:	6862      	ldr	r2, [r4, #4]
 8006d70:	2100      	movs	r1, #0
 8006d72:	4628      	mov	r0, r5
 8006d74:	f7f9 fa34 	bl	80001e0 <memchr>
 8006d78:	b108      	cbz	r0, 8006d7e <_printf_i+0x1ea>
 8006d7a:	1b40      	subs	r0, r0, r5
 8006d7c:	6060      	str	r0, [r4, #4]
 8006d7e:	6863      	ldr	r3, [r4, #4]
 8006d80:	6123      	str	r3, [r4, #16]
 8006d82:	2300      	movs	r3, #0
 8006d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d88:	e7aa      	b.n	8006ce0 <_printf_i+0x14c>
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	4649      	mov	r1, r9
 8006d90:	4640      	mov	r0, r8
 8006d92:	47d0      	blx	sl
 8006d94:	3001      	adds	r0, #1
 8006d96:	d0ad      	beq.n	8006cf4 <_printf_i+0x160>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	079b      	lsls	r3, r3, #30
 8006d9c:	d413      	bmi.n	8006dc6 <_printf_i+0x232>
 8006d9e:	68e0      	ldr	r0, [r4, #12]
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	4298      	cmp	r0, r3
 8006da4:	bfb8      	it	lt
 8006da6:	4618      	movlt	r0, r3
 8006da8:	e7a6      	b.n	8006cf8 <_printf_i+0x164>
 8006daa:	2301      	movs	r3, #1
 8006dac:	4632      	mov	r2, r6
 8006dae:	4649      	mov	r1, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	47d0      	blx	sl
 8006db4:	3001      	adds	r0, #1
 8006db6:	d09d      	beq.n	8006cf4 <_printf_i+0x160>
 8006db8:	3501      	adds	r5, #1
 8006dba:	68e3      	ldr	r3, [r4, #12]
 8006dbc:	9903      	ldr	r1, [sp, #12]
 8006dbe:	1a5b      	subs	r3, r3, r1
 8006dc0:	42ab      	cmp	r3, r5
 8006dc2:	dcf2      	bgt.n	8006daa <_printf_i+0x216>
 8006dc4:	e7eb      	b.n	8006d9e <_printf_i+0x20a>
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	f104 0619 	add.w	r6, r4, #25
 8006dcc:	e7f5      	b.n	8006dba <_printf_i+0x226>
 8006dce:	bf00      	nop
 8006dd0:	0800b102 	.word	0x0800b102
 8006dd4:	0800b113 	.word	0x0800b113

08006dd8 <_scanf_float>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	4617      	mov	r7, r2
 8006de0:	9303      	str	r3, [sp, #12]
 8006de2:	688b      	ldr	r3, [r1, #8]
 8006de4:	1e5a      	subs	r2, r3, #1
 8006de6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006dea:	bf83      	ittte	hi
 8006dec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006df0:	195b      	addhi	r3, r3, r5
 8006df2:	9302      	strhi	r3, [sp, #8]
 8006df4:	2300      	movls	r3, #0
 8006df6:	bf86      	itte	hi
 8006df8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006dfc:	608b      	strhi	r3, [r1, #8]
 8006dfe:	9302      	strls	r3, [sp, #8]
 8006e00:	680b      	ldr	r3, [r1, #0]
 8006e02:	468b      	mov	fp, r1
 8006e04:	2500      	movs	r5, #0
 8006e06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e0a:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e12:	4680      	mov	r8, r0
 8006e14:	460c      	mov	r4, r1
 8006e16:	465e      	mov	r6, fp
 8006e18:	46aa      	mov	sl, r5
 8006e1a:	46a9      	mov	r9, r5
 8006e1c:	9501      	str	r5, [sp, #4]
 8006e1e:	68a2      	ldr	r2, [r4, #8]
 8006e20:	b152      	cbz	r2, 8006e38 <_scanf_float+0x60>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b4e      	cmp	r3, #78	; 0x4e
 8006e28:	d864      	bhi.n	8006ef4 <_scanf_float+0x11c>
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d83c      	bhi.n	8006ea8 <_scanf_float+0xd0>
 8006e2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e32:	b2c8      	uxtb	r0, r1
 8006e34:	280e      	cmp	r0, #14
 8006e36:	d93a      	bls.n	8006eae <_scanf_float+0xd6>
 8006e38:	f1b9 0f00 	cmp.w	r9, #0
 8006e3c:	d003      	beq.n	8006e46 <_scanf_float+0x6e>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e4a:	f1ba 0f01 	cmp.w	sl, #1
 8006e4e:	f200 8113 	bhi.w	8007078 <_scanf_float+0x2a0>
 8006e52:	455e      	cmp	r6, fp
 8006e54:	f200 8105 	bhi.w	8007062 <_scanf_float+0x28a>
 8006e58:	2501      	movs	r5, #1
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	b007      	add	sp, #28
 8006e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e66:	2a0d      	cmp	r2, #13
 8006e68:	d8e6      	bhi.n	8006e38 <_scanf_float+0x60>
 8006e6a:	a101      	add	r1, pc, #4	; (adr r1, 8006e70 <_scanf_float+0x98>)
 8006e6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e70:	08006faf 	.word	0x08006faf
 8006e74:	08006e39 	.word	0x08006e39
 8006e78:	08006e39 	.word	0x08006e39
 8006e7c:	08006e39 	.word	0x08006e39
 8006e80:	0800700f 	.word	0x0800700f
 8006e84:	08006fe7 	.word	0x08006fe7
 8006e88:	08006e39 	.word	0x08006e39
 8006e8c:	08006e39 	.word	0x08006e39
 8006e90:	08006fbd 	.word	0x08006fbd
 8006e94:	08006e39 	.word	0x08006e39
 8006e98:	08006e39 	.word	0x08006e39
 8006e9c:	08006e39 	.word	0x08006e39
 8006ea0:	08006e39 	.word	0x08006e39
 8006ea4:	08006f75 	.word	0x08006f75
 8006ea8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006eac:	e7db      	b.n	8006e66 <_scanf_float+0x8e>
 8006eae:	290e      	cmp	r1, #14
 8006eb0:	d8c2      	bhi.n	8006e38 <_scanf_float+0x60>
 8006eb2:	a001      	add	r0, pc, #4	; (adr r0, 8006eb8 <_scanf_float+0xe0>)
 8006eb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006eb8:	08006f67 	.word	0x08006f67
 8006ebc:	08006e39 	.word	0x08006e39
 8006ec0:	08006f67 	.word	0x08006f67
 8006ec4:	08006ffb 	.word	0x08006ffb
 8006ec8:	08006e39 	.word	0x08006e39
 8006ecc:	08006f15 	.word	0x08006f15
 8006ed0:	08006f51 	.word	0x08006f51
 8006ed4:	08006f51 	.word	0x08006f51
 8006ed8:	08006f51 	.word	0x08006f51
 8006edc:	08006f51 	.word	0x08006f51
 8006ee0:	08006f51 	.word	0x08006f51
 8006ee4:	08006f51 	.word	0x08006f51
 8006ee8:	08006f51 	.word	0x08006f51
 8006eec:	08006f51 	.word	0x08006f51
 8006ef0:	08006f51 	.word	0x08006f51
 8006ef4:	2b6e      	cmp	r3, #110	; 0x6e
 8006ef6:	d809      	bhi.n	8006f0c <_scanf_float+0x134>
 8006ef8:	2b60      	cmp	r3, #96	; 0x60
 8006efa:	d8b2      	bhi.n	8006e62 <_scanf_float+0x8a>
 8006efc:	2b54      	cmp	r3, #84	; 0x54
 8006efe:	d077      	beq.n	8006ff0 <_scanf_float+0x218>
 8006f00:	2b59      	cmp	r3, #89	; 0x59
 8006f02:	d199      	bne.n	8006e38 <_scanf_float+0x60>
 8006f04:	2d07      	cmp	r5, #7
 8006f06:	d197      	bne.n	8006e38 <_scanf_float+0x60>
 8006f08:	2508      	movs	r5, #8
 8006f0a:	e029      	b.n	8006f60 <_scanf_float+0x188>
 8006f0c:	2b74      	cmp	r3, #116	; 0x74
 8006f0e:	d06f      	beq.n	8006ff0 <_scanf_float+0x218>
 8006f10:	2b79      	cmp	r3, #121	; 0x79
 8006f12:	e7f6      	b.n	8006f02 <_scanf_float+0x12a>
 8006f14:	6821      	ldr	r1, [r4, #0]
 8006f16:	05c8      	lsls	r0, r1, #23
 8006f18:	d51a      	bpl.n	8006f50 <_scanf_float+0x178>
 8006f1a:	9b02      	ldr	r3, [sp, #8]
 8006f1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f20:	6021      	str	r1, [r4, #0]
 8006f22:	f109 0901 	add.w	r9, r9, #1
 8006f26:	b11b      	cbz	r3, 8006f30 <_scanf_float+0x158>
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	3201      	adds	r2, #1
 8006f2c:	9302      	str	r3, [sp, #8]
 8006f2e:	60a2      	str	r2, [r4, #8]
 8006f30:	68a3      	ldr	r3, [r4, #8]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	60a3      	str	r3, [r4, #8]
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	6123      	str	r3, [r4, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	607b      	str	r3, [r7, #4]
 8006f44:	f340 8084 	ble.w	8007050 <_scanf_float+0x278>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	603b      	str	r3, [r7, #0]
 8006f4e:	e766      	b.n	8006e1e <_scanf_float+0x46>
 8006f50:	eb1a 0f05 	cmn.w	sl, r5
 8006f54:	f47f af70 	bne.w	8006e38 <_scanf_float+0x60>
 8006f58:	6822      	ldr	r2, [r4, #0]
 8006f5a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f5e:	6022      	str	r2, [r4, #0]
 8006f60:	f806 3b01 	strb.w	r3, [r6], #1
 8006f64:	e7e4      	b.n	8006f30 <_scanf_float+0x158>
 8006f66:	6822      	ldr	r2, [r4, #0]
 8006f68:	0610      	lsls	r0, r2, #24
 8006f6a:	f57f af65 	bpl.w	8006e38 <_scanf_float+0x60>
 8006f6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f72:	e7f4      	b.n	8006f5e <_scanf_float+0x186>
 8006f74:	f1ba 0f00 	cmp.w	sl, #0
 8006f78:	d10e      	bne.n	8006f98 <_scanf_float+0x1c0>
 8006f7a:	f1b9 0f00 	cmp.w	r9, #0
 8006f7e:	d10e      	bne.n	8006f9e <_scanf_float+0x1c6>
 8006f80:	6822      	ldr	r2, [r4, #0]
 8006f82:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f86:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f8a:	d108      	bne.n	8006f9e <_scanf_float+0x1c6>
 8006f8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f90:	6022      	str	r2, [r4, #0]
 8006f92:	f04f 0a01 	mov.w	sl, #1
 8006f96:	e7e3      	b.n	8006f60 <_scanf_float+0x188>
 8006f98:	f1ba 0f02 	cmp.w	sl, #2
 8006f9c:	d055      	beq.n	800704a <_scanf_float+0x272>
 8006f9e:	2d01      	cmp	r5, #1
 8006fa0:	d002      	beq.n	8006fa8 <_scanf_float+0x1d0>
 8006fa2:	2d04      	cmp	r5, #4
 8006fa4:	f47f af48 	bne.w	8006e38 <_scanf_float+0x60>
 8006fa8:	3501      	adds	r5, #1
 8006faa:	b2ed      	uxtb	r5, r5
 8006fac:	e7d8      	b.n	8006f60 <_scanf_float+0x188>
 8006fae:	f1ba 0f01 	cmp.w	sl, #1
 8006fb2:	f47f af41 	bne.w	8006e38 <_scanf_float+0x60>
 8006fb6:	f04f 0a02 	mov.w	sl, #2
 8006fba:	e7d1      	b.n	8006f60 <_scanf_float+0x188>
 8006fbc:	b97d      	cbnz	r5, 8006fde <_scanf_float+0x206>
 8006fbe:	f1b9 0f00 	cmp.w	r9, #0
 8006fc2:	f47f af3c 	bne.w	8006e3e <_scanf_float+0x66>
 8006fc6:	6822      	ldr	r2, [r4, #0]
 8006fc8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006fcc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fd0:	f47f af39 	bne.w	8006e46 <_scanf_float+0x6e>
 8006fd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fd8:	6022      	str	r2, [r4, #0]
 8006fda:	2501      	movs	r5, #1
 8006fdc:	e7c0      	b.n	8006f60 <_scanf_float+0x188>
 8006fde:	2d03      	cmp	r5, #3
 8006fe0:	d0e2      	beq.n	8006fa8 <_scanf_float+0x1d0>
 8006fe2:	2d05      	cmp	r5, #5
 8006fe4:	e7de      	b.n	8006fa4 <_scanf_float+0x1cc>
 8006fe6:	2d02      	cmp	r5, #2
 8006fe8:	f47f af26 	bne.w	8006e38 <_scanf_float+0x60>
 8006fec:	2503      	movs	r5, #3
 8006fee:	e7b7      	b.n	8006f60 <_scanf_float+0x188>
 8006ff0:	2d06      	cmp	r5, #6
 8006ff2:	f47f af21 	bne.w	8006e38 <_scanf_float+0x60>
 8006ff6:	2507      	movs	r5, #7
 8006ff8:	e7b2      	b.n	8006f60 <_scanf_float+0x188>
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	0591      	lsls	r1, r2, #22
 8006ffe:	f57f af1b 	bpl.w	8006e38 <_scanf_float+0x60>
 8007002:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007006:	6022      	str	r2, [r4, #0]
 8007008:	f8cd 9004 	str.w	r9, [sp, #4]
 800700c:	e7a8      	b.n	8006f60 <_scanf_float+0x188>
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007014:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007018:	d006      	beq.n	8007028 <_scanf_float+0x250>
 800701a:	0550      	lsls	r0, r2, #21
 800701c:	f57f af0c 	bpl.w	8006e38 <_scanf_float+0x60>
 8007020:	f1b9 0f00 	cmp.w	r9, #0
 8007024:	f43f af0f 	beq.w	8006e46 <_scanf_float+0x6e>
 8007028:	0591      	lsls	r1, r2, #22
 800702a:	bf58      	it	pl
 800702c:	9901      	ldrpl	r1, [sp, #4]
 800702e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007032:	bf58      	it	pl
 8007034:	eba9 0101 	subpl.w	r1, r9, r1
 8007038:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800703c:	bf58      	it	pl
 800703e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007042:	6022      	str	r2, [r4, #0]
 8007044:	f04f 0900 	mov.w	r9, #0
 8007048:	e78a      	b.n	8006f60 <_scanf_float+0x188>
 800704a:	f04f 0a03 	mov.w	sl, #3
 800704e:	e787      	b.n	8006f60 <_scanf_float+0x188>
 8007050:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007054:	4639      	mov	r1, r7
 8007056:	4640      	mov	r0, r8
 8007058:	4798      	blx	r3
 800705a:	2800      	cmp	r0, #0
 800705c:	f43f aedf 	beq.w	8006e1e <_scanf_float+0x46>
 8007060:	e6ea      	b.n	8006e38 <_scanf_float+0x60>
 8007062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800706a:	463a      	mov	r2, r7
 800706c:	4640      	mov	r0, r8
 800706e:	4798      	blx	r3
 8007070:	6923      	ldr	r3, [r4, #16]
 8007072:	3b01      	subs	r3, #1
 8007074:	6123      	str	r3, [r4, #16]
 8007076:	e6ec      	b.n	8006e52 <_scanf_float+0x7a>
 8007078:	1e6b      	subs	r3, r5, #1
 800707a:	2b06      	cmp	r3, #6
 800707c:	d825      	bhi.n	80070ca <_scanf_float+0x2f2>
 800707e:	2d02      	cmp	r5, #2
 8007080:	d836      	bhi.n	80070f0 <_scanf_float+0x318>
 8007082:	455e      	cmp	r6, fp
 8007084:	f67f aee8 	bls.w	8006e58 <_scanf_float+0x80>
 8007088:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800708c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007090:	463a      	mov	r2, r7
 8007092:	4640      	mov	r0, r8
 8007094:	4798      	blx	r3
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	3b01      	subs	r3, #1
 800709a:	6123      	str	r3, [r4, #16]
 800709c:	e7f1      	b.n	8007082 <_scanf_float+0x2aa>
 800709e:	9802      	ldr	r0, [sp, #8]
 80070a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80070a8:	9002      	str	r0, [sp, #8]
 80070aa:	463a      	mov	r2, r7
 80070ac:	4640      	mov	r0, r8
 80070ae:	4798      	blx	r3
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070ba:	fa5f fa8a 	uxtb.w	sl, sl
 80070be:	f1ba 0f02 	cmp.w	sl, #2
 80070c2:	d1ec      	bne.n	800709e <_scanf_float+0x2c6>
 80070c4:	3d03      	subs	r5, #3
 80070c6:	b2ed      	uxtb	r5, r5
 80070c8:	1b76      	subs	r6, r6, r5
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	05da      	lsls	r2, r3, #23
 80070ce:	d52f      	bpl.n	8007130 <_scanf_float+0x358>
 80070d0:	055b      	lsls	r3, r3, #21
 80070d2:	d510      	bpl.n	80070f6 <_scanf_float+0x31e>
 80070d4:	455e      	cmp	r6, fp
 80070d6:	f67f aebf 	bls.w	8006e58 <_scanf_float+0x80>
 80070da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070e2:	463a      	mov	r2, r7
 80070e4:	4640      	mov	r0, r8
 80070e6:	4798      	blx	r3
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	e7f1      	b.n	80070d4 <_scanf_float+0x2fc>
 80070f0:	46aa      	mov	sl, r5
 80070f2:	9602      	str	r6, [sp, #8]
 80070f4:	e7df      	b.n	80070b6 <_scanf_float+0x2de>
 80070f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	2965      	cmp	r1, #101	; 0x65
 80070fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007102:	f106 35ff 	add.w	r5, r6, #4294967295
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	d00c      	beq.n	8007124 <_scanf_float+0x34c>
 800710a:	2945      	cmp	r1, #69	; 0x45
 800710c:	d00a      	beq.n	8007124 <_scanf_float+0x34c>
 800710e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007112:	463a      	mov	r2, r7
 8007114:	4640      	mov	r0, r8
 8007116:	4798      	blx	r3
 8007118:	6923      	ldr	r3, [r4, #16]
 800711a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800711e:	3b01      	subs	r3, #1
 8007120:	1eb5      	subs	r5, r6, #2
 8007122:	6123      	str	r3, [r4, #16]
 8007124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007128:	463a      	mov	r2, r7
 800712a:	4640      	mov	r0, r8
 800712c:	4798      	blx	r3
 800712e:	462e      	mov	r6, r5
 8007130:	6825      	ldr	r5, [r4, #0]
 8007132:	f015 0510 	ands.w	r5, r5, #16
 8007136:	d158      	bne.n	80071ea <_scanf_float+0x412>
 8007138:	7035      	strb	r5, [r6, #0]
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007144:	d11c      	bne.n	8007180 <_scanf_float+0x3a8>
 8007146:	9b01      	ldr	r3, [sp, #4]
 8007148:	454b      	cmp	r3, r9
 800714a:	eba3 0209 	sub.w	r2, r3, r9
 800714e:	d124      	bne.n	800719a <_scanf_float+0x3c2>
 8007150:	2200      	movs	r2, #0
 8007152:	4659      	mov	r1, fp
 8007154:	4640      	mov	r0, r8
 8007156:	f002 fe43 	bl	8009de0 <_strtod_r>
 800715a:	9b03      	ldr	r3, [sp, #12]
 800715c:	6821      	ldr	r1, [r4, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f011 0f02 	tst.w	r1, #2
 8007164:	ec57 6b10 	vmov	r6, r7, d0
 8007168:	f103 0204 	add.w	r2, r3, #4
 800716c:	d020      	beq.n	80071b0 <_scanf_float+0x3d8>
 800716e:	9903      	ldr	r1, [sp, #12]
 8007170:	600a      	str	r2, [r1, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	e9c3 6700 	strd	r6, r7, [r3]
 8007178:	68e3      	ldr	r3, [r4, #12]
 800717a:	3301      	adds	r3, #1
 800717c:	60e3      	str	r3, [r4, #12]
 800717e:	e66c      	b.n	8006e5a <_scanf_float+0x82>
 8007180:	9b04      	ldr	r3, [sp, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0e4      	beq.n	8007150 <_scanf_float+0x378>
 8007186:	9905      	ldr	r1, [sp, #20]
 8007188:	230a      	movs	r3, #10
 800718a:	462a      	mov	r2, r5
 800718c:	3101      	adds	r1, #1
 800718e:	4640      	mov	r0, r8
 8007190:	f002 feae 	bl	8009ef0 <_strtol_r>
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	9e05      	ldr	r6, [sp, #20]
 8007198:	1ac2      	subs	r2, r0, r3
 800719a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800719e:	429e      	cmp	r6, r3
 80071a0:	bf28      	it	cs
 80071a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80071a6:	4912      	ldr	r1, [pc, #72]	; (80071f0 <_scanf_float+0x418>)
 80071a8:	4630      	mov	r0, r6
 80071aa:	f000 fa03 	bl	80075b4 <siprintf>
 80071ae:	e7cf      	b.n	8007150 <_scanf_float+0x378>
 80071b0:	f011 0f04 	tst.w	r1, #4
 80071b4:	9903      	ldr	r1, [sp, #12]
 80071b6:	600a      	str	r2, [r1, #0]
 80071b8:	d1db      	bne.n	8007172 <_scanf_float+0x39a>
 80071ba:	f8d3 8000 	ldr.w	r8, [r3]
 80071be:	ee10 2a10 	vmov	r2, s0
 80071c2:	ee10 0a10 	vmov	r0, s0
 80071c6:	463b      	mov	r3, r7
 80071c8:	4639      	mov	r1, r7
 80071ca:	f7f9 fcb7 	bl	8000b3c <__aeabi_dcmpun>
 80071ce:	b128      	cbz	r0, 80071dc <_scanf_float+0x404>
 80071d0:	4808      	ldr	r0, [pc, #32]	; (80071f4 <_scanf_float+0x41c>)
 80071d2:	f000 fbcb 	bl	800796c <nanf>
 80071d6:	ed88 0a00 	vstr	s0, [r8]
 80071da:	e7cd      	b.n	8007178 <_scanf_float+0x3a0>
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f7f9 fd0a 	bl	8000bf8 <__aeabi_d2f>
 80071e4:	f8c8 0000 	str.w	r0, [r8]
 80071e8:	e7c6      	b.n	8007178 <_scanf_float+0x3a0>
 80071ea:	2500      	movs	r5, #0
 80071ec:	e635      	b.n	8006e5a <_scanf_float+0x82>
 80071ee:	bf00      	nop
 80071f0:	0800b124 	.word	0x0800b124
 80071f4:	0800b4b5 	.word	0x0800b4b5

080071f8 <std>:
 80071f8:	2300      	movs	r3, #0
 80071fa:	b510      	push	{r4, lr}
 80071fc:	4604      	mov	r4, r0
 80071fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007206:	6083      	str	r3, [r0, #8]
 8007208:	8181      	strh	r1, [r0, #12]
 800720a:	6643      	str	r3, [r0, #100]	; 0x64
 800720c:	81c2      	strh	r2, [r0, #14]
 800720e:	6183      	str	r3, [r0, #24]
 8007210:	4619      	mov	r1, r3
 8007212:	2208      	movs	r2, #8
 8007214:	305c      	adds	r0, #92	; 0x5c
 8007216:	f000 fac5 	bl	80077a4 <memset>
 800721a:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <std+0x58>)
 800721c:	6263      	str	r3, [r4, #36]	; 0x24
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <std+0x5c>)
 8007220:	62a3      	str	r3, [r4, #40]	; 0x28
 8007222:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <std+0x60>)
 8007224:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007226:	4b0d      	ldr	r3, [pc, #52]	; (800725c <std+0x64>)
 8007228:	6323      	str	r3, [r4, #48]	; 0x30
 800722a:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <std+0x68>)
 800722c:	6224      	str	r4, [r4, #32]
 800722e:	429c      	cmp	r4, r3
 8007230:	d006      	beq.n	8007240 <std+0x48>
 8007232:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007236:	4294      	cmp	r4, r2
 8007238:	d002      	beq.n	8007240 <std+0x48>
 800723a:	33d0      	adds	r3, #208	; 0xd0
 800723c:	429c      	cmp	r4, r3
 800723e:	d105      	bne.n	800724c <std+0x54>
 8007240:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007248:	f000 bb7e 	b.w	8007948 <__retarget_lock_init_recursive>
 800724c:	bd10      	pop	{r4, pc}
 800724e:	bf00      	nop
 8007250:	080075f5 	.word	0x080075f5
 8007254:	08007617 	.word	0x08007617
 8007258:	0800764f 	.word	0x0800764f
 800725c:	08007673 	.word	0x08007673
 8007260:	200042ec 	.word	0x200042ec

08007264 <stdio_exit_handler>:
 8007264:	4a02      	ldr	r2, [pc, #8]	; (8007270 <stdio_exit_handler+0xc>)
 8007266:	4903      	ldr	r1, [pc, #12]	; (8007274 <stdio_exit_handler+0x10>)
 8007268:	4803      	ldr	r0, [pc, #12]	; (8007278 <stdio_exit_handler+0x14>)
 800726a:	f000 b869 	b.w	8007340 <_fwalk_sglue>
 800726e:	bf00      	nop
 8007270:	20000010 	.word	0x20000010
 8007274:	0800a539 	.word	0x0800a539
 8007278:	2000001c 	.word	0x2000001c

0800727c <cleanup_stdio>:
 800727c:	6841      	ldr	r1, [r0, #4]
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <cleanup_stdio+0x34>)
 8007280:	4299      	cmp	r1, r3
 8007282:	b510      	push	{r4, lr}
 8007284:	4604      	mov	r4, r0
 8007286:	d001      	beq.n	800728c <cleanup_stdio+0x10>
 8007288:	f003 f956 	bl	800a538 <_fflush_r>
 800728c:	68a1      	ldr	r1, [r4, #8]
 800728e:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <cleanup_stdio+0x38>)
 8007290:	4299      	cmp	r1, r3
 8007292:	d002      	beq.n	800729a <cleanup_stdio+0x1e>
 8007294:	4620      	mov	r0, r4
 8007296:	f003 f94f 	bl	800a538 <_fflush_r>
 800729a:	68e1      	ldr	r1, [r4, #12]
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <cleanup_stdio+0x3c>)
 800729e:	4299      	cmp	r1, r3
 80072a0:	d004      	beq.n	80072ac <cleanup_stdio+0x30>
 80072a2:	4620      	mov	r0, r4
 80072a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a8:	f003 b946 	b.w	800a538 <_fflush_r>
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	bf00      	nop
 80072b0:	200042ec 	.word	0x200042ec
 80072b4:	20004354 	.word	0x20004354
 80072b8:	200043bc 	.word	0x200043bc

080072bc <global_stdio_init.part.0>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <global_stdio_init.part.0+0x30>)
 80072c0:	4c0b      	ldr	r4, [pc, #44]	; (80072f0 <global_stdio_init.part.0+0x34>)
 80072c2:	4a0c      	ldr	r2, [pc, #48]	; (80072f4 <global_stdio_init.part.0+0x38>)
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	4620      	mov	r0, r4
 80072c8:	2200      	movs	r2, #0
 80072ca:	2104      	movs	r1, #4
 80072cc:	f7ff ff94 	bl	80071f8 <std>
 80072d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072d4:	2201      	movs	r2, #1
 80072d6:	2109      	movs	r1, #9
 80072d8:	f7ff ff8e 	bl	80071f8 <std>
 80072dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072e0:	2202      	movs	r2, #2
 80072e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e6:	2112      	movs	r1, #18
 80072e8:	f7ff bf86 	b.w	80071f8 <std>
 80072ec:	20004424 	.word	0x20004424
 80072f0:	200042ec 	.word	0x200042ec
 80072f4:	08007265 	.word	0x08007265

080072f8 <__sfp_lock_acquire>:
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <__sfp_lock_acquire+0x8>)
 80072fa:	f000 bb26 	b.w	800794a <__retarget_lock_acquire_recursive>
 80072fe:	bf00      	nop
 8007300:	2000442d 	.word	0x2000442d

08007304 <__sfp_lock_release>:
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <__sfp_lock_release+0x8>)
 8007306:	f000 bb21 	b.w	800794c <__retarget_lock_release_recursive>
 800730a:	bf00      	nop
 800730c:	2000442d 	.word	0x2000442d

08007310 <__sinit>:
 8007310:	b510      	push	{r4, lr}
 8007312:	4604      	mov	r4, r0
 8007314:	f7ff fff0 	bl	80072f8 <__sfp_lock_acquire>
 8007318:	6a23      	ldr	r3, [r4, #32]
 800731a:	b11b      	cbz	r3, 8007324 <__sinit+0x14>
 800731c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007320:	f7ff bff0 	b.w	8007304 <__sfp_lock_release>
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <__sinit+0x28>)
 8007326:	6223      	str	r3, [r4, #32]
 8007328:	4b04      	ldr	r3, [pc, #16]	; (800733c <__sinit+0x2c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f5      	bne.n	800731c <__sinit+0xc>
 8007330:	f7ff ffc4 	bl	80072bc <global_stdio_init.part.0>
 8007334:	e7f2      	b.n	800731c <__sinit+0xc>
 8007336:	bf00      	nop
 8007338:	0800727d 	.word	0x0800727d
 800733c:	20004424 	.word	0x20004424

08007340 <_fwalk_sglue>:
 8007340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007344:	4607      	mov	r7, r0
 8007346:	4688      	mov	r8, r1
 8007348:	4614      	mov	r4, r2
 800734a:	2600      	movs	r6, #0
 800734c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007350:	f1b9 0901 	subs.w	r9, r9, #1
 8007354:	d505      	bpl.n	8007362 <_fwalk_sglue+0x22>
 8007356:	6824      	ldr	r4, [r4, #0]
 8007358:	2c00      	cmp	r4, #0
 800735a:	d1f7      	bne.n	800734c <_fwalk_sglue+0xc>
 800735c:	4630      	mov	r0, r6
 800735e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007362:	89ab      	ldrh	r3, [r5, #12]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d907      	bls.n	8007378 <_fwalk_sglue+0x38>
 8007368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800736c:	3301      	adds	r3, #1
 800736e:	d003      	beq.n	8007378 <_fwalk_sglue+0x38>
 8007370:	4629      	mov	r1, r5
 8007372:	4638      	mov	r0, r7
 8007374:	47c0      	blx	r8
 8007376:	4306      	orrs	r6, r0
 8007378:	3568      	adds	r5, #104	; 0x68
 800737a:	e7e9      	b.n	8007350 <_fwalk_sglue+0x10>

0800737c <iprintf>:
 800737c:	b40f      	push	{r0, r1, r2, r3}
 800737e:	b507      	push	{r0, r1, r2, lr}
 8007380:	4906      	ldr	r1, [pc, #24]	; (800739c <iprintf+0x20>)
 8007382:	ab04      	add	r3, sp, #16
 8007384:	6808      	ldr	r0, [r1, #0]
 8007386:	f853 2b04 	ldr.w	r2, [r3], #4
 800738a:	6881      	ldr	r1, [r0, #8]
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	f002 ff33 	bl	800a1f8 <_vfiprintf_r>
 8007392:	b003      	add	sp, #12
 8007394:	f85d eb04 	ldr.w	lr, [sp], #4
 8007398:	b004      	add	sp, #16
 800739a:	4770      	bx	lr
 800739c:	20000068 	.word	0x20000068

080073a0 <_puts_r>:
 80073a0:	6a03      	ldr	r3, [r0, #32]
 80073a2:	b570      	push	{r4, r5, r6, lr}
 80073a4:	6884      	ldr	r4, [r0, #8]
 80073a6:	4605      	mov	r5, r0
 80073a8:	460e      	mov	r6, r1
 80073aa:	b90b      	cbnz	r3, 80073b0 <_puts_r+0x10>
 80073ac:	f7ff ffb0 	bl	8007310 <__sinit>
 80073b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073b2:	07db      	lsls	r3, r3, #31
 80073b4:	d405      	bmi.n	80073c2 <_puts_r+0x22>
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	0598      	lsls	r0, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_puts_r+0x22>
 80073bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073be:	f000 fac4 	bl	800794a <__retarget_lock_acquire_recursive>
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	0719      	lsls	r1, r3, #28
 80073c6:	d513      	bpl.n	80073f0 <_puts_r+0x50>
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	b18b      	cbz	r3, 80073f0 <_puts_r+0x50>
 80073cc:	3e01      	subs	r6, #1
 80073ce:	68a3      	ldr	r3, [r4, #8]
 80073d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073d4:	3b01      	subs	r3, #1
 80073d6:	60a3      	str	r3, [r4, #8]
 80073d8:	b9e9      	cbnz	r1, 8007416 <_puts_r+0x76>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da2e      	bge.n	800743c <_puts_r+0x9c>
 80073de:	4622      	mov	r2, r4
 80073e0:	210a      	movs	r1, #10
 80073e2:	4628      	mov	r0, r5
 80073e4:	f000 f949 	bl	800767a <__swbuf_r>
 80073e8:	3001      	adds	r0, #1
 80073ea:	d007      	beq.n	80073fc <_puts_r+0x5c>
 80073ec:	250a      	movs	r5, #10
 80073ee:	e007      	b.n	8007400 <_puts_r+0x60>
 80073f0:	4621      	mov	r1, r4
 80073f2:	4628      	mov	r0, r5
 80073f4:	f000 f97e 	bl	80076f4 <__swsetup_r>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d0e7      	beq.n	80073cc <_puts_r+0x2c>
 80073fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007402:	07da      	lsls	r2, r3, #31
 8007404:	d405      	bmi.n	8007412 <_puts_r+0x72>
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	059b      	lsls	r3, r3, #22
 800740a:	d402      	bmi.n	8007412 <_puts_r+0x72>
 800740c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800740e:	f000 fa9d 	bl	800794c <__retarget_lock_release_recursive>
 8007412:	4628      	mov	r0, r5
 8007414:	bd70      	pop	{r4, r5, r6, pc}
 8007416:	2b00      	cmp	r3, #0
 8007418:	da04      	bge.n	8007424 <_puts_r+0x84>
 800741a:	69a2      	ldr	r2, [r4, #24]
 800741c:	429a      	cmp	r2, r3
 800741e:	dc06      	bgt.n	800742e <_puts_r+0x8e>
 8007420:	290a      	cmp	r1, #10
 8007422:	d004      	beq.n	800742e <_puts_r+0x8e>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	6022      	str	r2, [r4, #0]
 800742a:	7019      	strb	r1, [r3, #0]
 800742c:	e7cf      	b.n	80073ce <_puts_r+0x2e>
 800742e:	4622      	mov	r2, r4
 8007430:	4628      	mov	r0, r5
 8007432:	f000 f922 	bl	800767a <__swbuf_r>
 8007436:	3001      	adds	r0, #1
 8007438:	d1c9      	bne.n	80073ce <_puts_r+0x2e>
 800743a:	e7df      	b.n	80073fc <_puts_r+0x5c>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	250a      	movs	r5, #10
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	6022      	str	r2, [r4, #0]
 8007444:	701d      	strb	r5, [r3, #0]
 8007446:	e7db      	b.n	8007400 <_puts_r+0x60>

08007448 <puts>:
 8007448:	4b02      	ldr	r3, [pc, #8]	; (8007454 <puts+0xc>)
 800744a:	4601      	mov	r1, r0
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	f7ff bfa7 	b.w	80073a0 <_puts_r>
 8007452:	bf00      	nop
 8007454:	20000068 	.word	0x20000068

08007458 <setvbuf>:
 8007458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800745c:	461d      	mov	r5, r3
 800745e:	4b54      	ldr	r3, [pc, #336]	; (80075b0 <setvbuf+0x158>)
 8007460:	681f      	ldr	r7, [r3, #0]
 8007462:	4604      	mov	r4, r0
 8007464:	460e      	mov	r6, r1
 8007466:	4690      	mov	r8, r2
 8007468:	b127      	cbz	r7, 8007474 <setvbuf+0x1c>
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	b913      	cbnz	r3, 8007474 <setvbuf+0x1c>
 800746e:	4638      	mov	r0, r7
 8007470:	f7ff ff4e 	bl	8007310 <__sinit>
 8007474:	f1b8 0f02 	cmp.w	r8, #2
 8007478:	d006      	beq.n	8007488 <setvbuf+0x30>
 800747a:	f1b8 0f01 	cmp.w	r8, #1
 800747e:	f200 8094 	bhi.w	80075aa <setvbuf+0x152>
 8007482:	2d00      	cmp	r5, #0
 8007484:	f2c0 8091 	blt.w	80075aa <setvbuf+0x152>
 8007488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800748a:	07da      	lsls	r2, r3, #31
 800748c:	d405      	bmi.n	800749a <setvbuf+0x42>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	059b      	lsls	r3, r3, #22
 8007492:	d402      	bmi.n	800749a <setvbuf+0x42>
 8007494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007496:	f000 fa58 	bl	800794a <__retarget_lock_acquire_recursive>
 800749a:	4621      	mov	r1, r4
 800749c:	4638      	mov	r0, r7
 800749e:	f003 f84b 	bl	800a538 <_fflush_r>
 80074a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a4:	b141      	cbz	r1, 80074b8 <setvbuf+0x60>
 80074a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074aa:	4299      	cmp	r1, r3
 80074ac:	d002      	beq.n	80074b4 <setvbuf+0x5c>
 80074ae:	4638      	mov	r0, r7
 80074b0:	f001 f8dc 	bl	800866c <_free_r>
 80074b4:	2300      	movs	r3, #0
 80074b6:	6363      	str	r3, [r4, #52]	; 0x34
 80074b8:	2300      	movs	r3, #0
 80074ba:	61a3      	str	r3, [r4, #24]
 80074bc:	6063      	str	r3, [r4, #4]
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	0618      	lsls	r0, r3, #24
 80074c2:	d503      	bpl.n	80074cc <setvbuf+0x74>
 80074c4:	6921      	ldr	r1, [r4, #16]
 80074c6:	4638      	mov	r0, r7
 80074c8:	f001 f8d0 	bl	800866c <_free_r>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80074d2:	f023 0303 	bic.w	r3, r3, #3
 80074d6:	f1b8 0f02 	cmp.w	r8, #2
 80074da:	81a3      	strh	r3, [r4, #12]
 80074dc:	d05f      	beq.n	800759e <setvbuf+0x146>
 80074de:	ab01      	add	r3, sp, #4
 80074e0:	466a      	mov	r2, sp
 80074e2:	4621      	mov	r1, r4
 80074e4:	4638      	mov	r0, r7
 80074e6:	f003 f84f 	bl	800a588 <__swhatbuf_r>
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	4318      	orrs	r0, r3
 80074ee:	81a0      	strh	r0, [r4, #12]
 80074f0:	bb2d      	cbnz	r5, 800753e <setvbuf+0xe6>
 80074f2:	9d00      	ldr	r5, [sp, #0]
 80074f4:	4628      	mov	r0, r5
 80074f6:	f001 f905 	bl	8008704 <malloc>
 80074fa:	4606      	mov	r6, r0
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d150      	bne.n	80075a2 <setvbuf+0x14a>
 8007500:	f8dd 9000 	ldr.w	r9, [sp]
 8007504:	45a9      	cmp	r9, r5
 8007506:	d13e      	bne.n	8007586 <setvbuf+0x12e>
 8007508:	f04f 35ff 	mov.w	r5, #4294967295
 800750c:	2200      	movs	r2, #0
 800750e:	60a2      	str	r2, [r4, #8]
 8007510:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007514:	6022      	str	r2, [r4, #0]
 8007516:	6122      	str	r2, [r4, #16]
 8007518:	2201      	movs	r2, #1
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	6162      	str	r2, [r4, #20]
 8007520:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007522:	f043 0302 	orr.w	r3, r3, #2
 8007526:	07d1      	lsls	r1, r2, #31
 8007528:	81a3      	strh	r3, [r4, #12]
 800752a:	d404      	bmi.n	8007536 <setvbuf+0xde>
 800752c:	059b      	lsls	r3, r3, #22
 800752e:	d402      	bmi.n	8007536 <setvbuf+0xde>
 8007530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007532:	f000 fa0b 	bl	800794c <__retarget_lock_release_recursive>
 8007536:	4628      	mov	r0, r5
 8007538:	b003      	add	sp, #12
 800753a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800753e:	2e00      	cmp	r6, #0
 8007540:	d0d8      	beq.n	80074f4 <setvbuf+0x9c>
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	b913      	cbnz	r3, 800754c <setvbuf+0xf4>
 8007546:	4638      	mov	r0, r7
 8007548:	f7ff fee2 	bl	8007310 <__sinit>
 800754c:	f1b8 0f01 	cmp.w	r8, #1
 8007550:	bf08      	it	eq
 8007552:	89a3      	ldrheq	r3, [r4, #12]
 8007554:	6026      	str	r6, [r4, #0]
 8007556:	bf04      	itt	eq
 8007558:	f043 0301 	orreq.w	r3, r3, #1
 800755c:	81a3      	strheq	r3, [r4, #12]
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f013 0208 	ands.w	r2, r3, #8
 8007564:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007568:	d01d      	beq.n	80075a6 <setvbuf+0x14e>
 800756a:	07da      	lsls	r2, r3, #31
 800756c:	bf41      	itttt	mi
 800756e:	2200      	movmi	r2, #0
 8007570:	426d      	negmi	r5, r5
 8007572:	60a2      	strmi	r2, [r4, #8]
 8007574:	61a5      	strmi	r5, [r4, #24]
 8007576:	bf58      	it	pl
 8007578:	60a5      	strpl	r5, [r4, #8]
 800757a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800757c:	f015 0501 	ands.w	r5, r5, #1
 8007580:	d0d4      	beq.n	800752c <setvbuf+0xd4>
 8007582:	2500      	movs	r5, #0
 8007584:	e7d7      	b.n	8007536 <setvbuf+0xde>
 8007586:	4648      	mov	r0, r9
 8007588:	f001 f8bc 	bl	8008704 <malloc>
 800758c:	4606      	mov	r6, r0
 800758e:	2800      	cmp	r0, #0
 8007590:	d0ba      	beq.n	8007508 <setvbuf+0xb0>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007598:	81a3      	strh	r3, [r4, #12]
 800759a:	464d      	mov	r5, r9
 800759c:	e7d1      	b.n	8007542 <setvbuf+0xea>
 800759e:	2500      	movs	r5, #0
 80075a0:	e7b4      	b.n	800750c <setvbuf+0xb4>
 80075a2:	46a9      	mov	r9, r5
 80075a4:	e7f5      	b.n	8007592 <setvbuf+0x13a>
 80075a6:	60a2      	str	r2, [r4, #8]
 80075a8:	e7e7      	b.n	800757a <setvbuf+0x122>
 80075aa:	f04f 35ff 	mov.w	r5, #4294967295
 80075ae:	e7c2      	b.n	8007536 <setvbuf+0xde>
 80075b0:	20000068 	.word	0x20000068

080075b4 <siprintf>:
 80075b4:	b40e      	push	{r1, r2, r3}
 80075b6:	b500      	push	{lr}
 80075b8:	b09c      	sub	sp, #112	; 0x70
 80075ba:	ab1d      	add	r3, sp, #116	; 0x74
 80075bc:	9002      	str	r0, [sp, #8]
 80075be:	9006      	str	r0, [sp, #24]
 80075c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075c4:	4809      	ldr	r0, [pc, #36]	; (80075ec <siprintf+0x38>)
 80075c6:	9107      	str	r1, [sp, #28]
 80075c8:	9104      	str	r1, [sp, #16]
 80075ca:	4909      	ldr	r1, [pc, #36]	; (80075f0 <siprintf+0x3c>)
 80075cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d0:	9105      	str	r1, [sp, #20]
 80075d2:	6800      	ldr	r0, [r0, #0]
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	a902      	add	r1, sp, #8
 80075d8:	f002 fce6 	bl	8009fa8 <_svfiprintf_r>
 80075dc:	9b02      	ldr	r3, [sp, #8]
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	b01c      	add	sp, #112	; 0x70
 80075e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075e8:	b003      	add	sp, #12
 80075ea:	4770      	bx	lr
 80075ec:	20000068 	.word	0x20000068
 80075f0:	ffff0208 	.word	0xffff0208

080075f4 <__sread>:
 80075f4:	b510      	push	{r4, lr}
 80075f6:	460c      	mov	r4, r1
 80075f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fc:	f000 f956 	bl	80078ac <_read_r>
 8007600:	2800      	cmp	r0, #0
 8007602:	bfab      	itete	ge
 8007604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007606:	89a3      	ldrhlt	r3, [r4, #12]
 8007608:	181b      	addge	r3, r3, r0
 800760a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800760e:	bfac      	ite	ge
 8007610:	6563      	strge	r3, [r4, #84]	; 0x54
 8007612:	81a3      	strhlt	r3, [r4, #12]
 8007614:	bd10      	pop	{r4, pc}

08007616 <__swrite>:
 8007616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761a:	461f      	mov	r7, r3
 800761c:	898b      	ldrh	r3, [r1, #12]
 800761e:	05db      	lsls	r3, r3, #23
 8007620:	4605      	mov	r5, r0
 8007622:	460c      	mov	r4, r1
 8007624:	4616      	mov	r6, r2
 8007626:	d505      	bpl.n	8007634 <__swrite+0x1e>
 8007628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800762c:	2302      	movs	r3, #2
 800762e:	2200      	movs	r2, #0
 8007630:	f000 f92a 	bl	8007888 <_lseek_r>
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800763a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800763e:	81a3      	strh	r3, [r4, #12]
 8007640:	4632      	mov	r2, r6
 8007642:	463b      	mov	r3, r7
 8007644:	4628      	mov	r0, r5
 8007646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800764a:	f000 b941 	b.w	80078d0 <_write_r>

0800764e <__sseek>:
 800764e:	b510      	push	{r4, lr}
 8007650:	460c      	mov	r4, r1
 8007652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007656:	f000 f917 	bl	8007888 <_lseek_r>
 800765a:	1c43      	adds	r3, r0, #1
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	bf15      	itete	ne
 8007660:	6560      	strne	r0, [r4, #84]	; 0x54
 8007662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800766a:	81a3      	strheq	r3, [r4, #12]
 800766c:	bf18      	it	ne
 800766e:	81a3      	strhne	r3, [r4, #12]
 8007670:	bd10      	pop	{r4, pc}

08007672 <__sclose>:
 8007672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007676:	f000 b8a1 	b.w	80077bc <_close_r>

0800767a <__swbuf_r>:
 800767a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767c:	460e      	mov	r6, r1
 800767e:	4614      	mov	r4, r2
 8007680:	4605      	mov	r5, r0
 8007682:	b118      	cbz	r0, 800768c <__swbuf_r+0x12>
 8007684:	6a03      	ldr	r3, [r0, #32]
 8007686:	b90b      	cbnz	r3, 800768c <__swbuf_r+0x12>
 8007688:	f7ff fe42 	bl	8007310 <__sinit>
 800768c:	69a3      	ldr	r3, [r4, #24]
 800768e:	60a3      	str	r3, [r4, #8]
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	071a      	lsls	r2, r3, #28
 8007694:	d525      	bpl.n	80076e2 <__swbuf_r+0x68>
 8007696:	6923      	ldr	r3, [r4, #16]
 8007698:	b31b      	cbz	r3, 80076e2 <__swbuf_r+0x68>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	6922      	ldr	r2, [r4, #16]
 800769e:	1a98      	subs	r0, r3, r2
 80076a0:	6963      	ldr	r3, [r4, #20]
 80076a2:	b2f6      	uxtb	r6, r6
 80076a4:	4283      	cmp	r3, r0
 80076a6:	4637      	mov	r7, r6
 80076a8:	dc04      	bgt.n	80076b4 <__swbuf_r+0x3a>
 80076aa:	4621      	mov	r1, r4
 80076ac:	4628      	mov	r0, r5
 80076ae:	f002 ff43 	bl	800a538 <_fflush_r>
 80076b2:	b9e0      	cbnz	r0, 80076ee <__swbuf_r+0x74>
 80076b4:	68a3      	ldr	r3, [r4, #8]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	60a3      	str	r3, [r4, #8]
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	6022      	str	r2, [r4, #0]
 80076c0:	701e      	strb	r6, [r3, #0]
 80076c2:	6962      	ldr	r2, [r4, #20]
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d004      	beq.n	80076d4 <__swbuf_r+0x5a>
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	07db      	lsls	r3, r3, #31
 80076ce:	d506      	bpl.n	80076de <__swbuf_r+0x64>
 80076d0:	2e0a      	cmp	r6, #10
 80076d2:	d104      	bne.n	80076de <__swbuf_r+0x64>
 80076d4:	4621      	mov	r1, r4
 80076d6:	4628      	mov	r0, r5
 80076d8:	f002 ff2e 	bl	800a538 <_fflush_r>
 80076dc:	b938      	cbnz	r0, 80076ee <__swbuf_r+0x74>
 80076de:	4638      	mov	r0, r7
 80076e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e2:	4621      	mov	r1, r4
 80076e4:	4628      	mov	r0, r5
 80076e6:	f000 f805 	bl	80076f4 <__swsetup_r>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d0d5      	beq.n	800769a <__swbuf_r+0x20>
 80076ee:	f04f 37ff 	mov.w	r7, #4294967295
 80076f2:	e7f4      	b.n	80076de <__swbuf_r+0x64>

080076f4 <__swsetup_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4b2a      	ldr	r3, [pc, #168]	; (80077a0 <__swsetup_r+0xac>)
 80076f8:	4605      	mov	r5, r0
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	460c      	mov	r4, r1
 80076fe:	b118      	cbz	r0, 8007708 <__swsetup_r+0x14>
 8007700:	6a03      	ldr	r3, [r0, #32]
 8007702:	b90b      	cbnz	r3, 8007708 <__swsetup_r+0x14>
 8007704:	f7ff fe04 	bl	8007310 <__sinit>
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800770e:	0718      	lsls	r0, r3, #28
 8007710:	d422      	bmi.n	8007758 <__swsetup_r+0x64>
 8007712:	06d9      	lsls	r1, r3, #27
 8007714:	d407      	bmi.n	8007726 <__swsetup_r+0x32>
 8007716:	2309      	movs	r3, #9
 8007718:	602b      	str	r3, [r5, #0]
 800771a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800771e:	81a3      	strh	r3, [r4, #12]
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	e034      	b.n	8007790 <__swsetup_r+0x9c>
 8007726:	0758      	lsls	r0, r3, #29
 8007728:	d512      	bpl.n	8007750 <__swsetup_r+0x5c>
 800772a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800772c:	b141      	cbz	r1, 8007740 <__swsetup_r+0x4c>
 800772e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007732:	4299      	cmp	r1, r3
 8007734:	d002      	beq.n	800773c <__swsetup_r+0x48>
 8007736:	4628      	mov	r0, r5
 8007738:	f000 ff98 	bl	800866c <_free_r>
 800773c:	2300      	movs	r3, #0
 800773e:	6363      	str	r3, [r4, #52]	; 0x34
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007746:	81a3      	strh	r3, [r4, #12]
 8007748:	2300      	movs	r3, #0
 800774a:	6063      	str	r3, [r4, #4]
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	f043 0308 	orr.w	r3, r3, #8
 8007756:	81a3      	strh	r3, [r4, #12]
 8007758:	6923      	ldr	r3, [r4, #16]
 800775a:	b94b      	cbnz	r3, 8007770 <__swsetup_r+0x7c>
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007766:	d003      	beq.n	8007770 <__swsetup_r+0x7c>
 8007768:	4621      	mov	r1, r4
 800776a:	4628      	mov	r0, r5
 800776c:	f002 ff32 	bl	800a5d4 <__smakebuf_r>
 8007770:	89a0      	ldrh	r0, [r4, #12]
 8007772:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007776:	f010 0301 	ands.w	r3, r0, #1
 800777a:	d00a      	beq.n	8007792 <__swsetup_r+0x9e>
 800777c:	2300      	movs	r3, #0
 800777e:	60a3      	str	r3, [r4, #8]
 8007780:	6963      	ldr	r3, [r4, #20]
 8007782:	425b      	negs	r3, r3
 8007784:	61a3      	str	r3, [r4, #24]
 8007786:	6923      	ldr	r3, [r4, #16]
 8007788:	b943      	cbnz	r3, 800779c <__swsetup_r+0xa8>
 800778a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800778e:	d1c4      	bne.n	800771a <__swsetup_r+0x26>
 8007790:	bd38      	pop	{r3, r4, r5, pc}
 8007792:	0781      	lsls	r1, r0, #30
 8007794:	bf58      	it	pl
 8007796:	6963      	ldrpl	r3, [r4, #20]
 8007798:	60a3      	str	r3, [r4, #8]
 800779a:	e7f4      	b.n	8007786 <__swsetup_r+0x92>
 800779c:	2000      	movs	r0, #0
 800779e:	e7f7      	b.n	8007790 <__swsetup_r+0x9c>
 80077a0:	20000068 	.word	0x20000068

080077a4 <memset>:
 80077a4:	4402      	add	r2, r0
 80077a6:	4603      	mov	r3, r0
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d100      	bne.n	80077ae <memset+0xa>
 80077ac:	4770      	bx	lr
 80077ae:	f803 1b01 	strb.w	r1, [r3], #1
 80077b2:	e7f9      	b.n	80077a8 <memset+0x4>

080077b4 <_localeconv_r>:
 80077b4:	4800      	ldr	r0, [pc, #0]	; (80077b8 <_localeconv_r+0x4>)
 80077b6:	4770      	bx	lr
 80077b8:	2000015c 	.word	0x2000015c

080077bc <_close_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d06      	ldr	r5, [pc, #24]	; (80077d8 <_close_r+0x1c>)
 80077c0:	2300      	movs	r3, #0
 80077c2:	4604      	mov	r4, r0
 80077c4:	4608      	mov	r0, r1
 80077c6:	602b      	str	r3, [r5, #0]
 80077c8:	f7fa f947 	bl	8001a5a <_close>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d102      	bne.n	80077d6 <_close_r+0x1a>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	b103      	cbz	r3, 80077d6 <_close_r+0x1a>
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	20004428 	.word	0x20004428

080077dc <_reclaim_reent>:
 80077dc:	4b29      	ldr	r3, [pc, #164]	; (8007884 <_reclaim_reent+0xa8>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4283      	cmp	r3, r0
 80077e2:	b570      	push	{r4, r5, r6, lr}
 80077e4:	4604      	mov	r4, r0
 80077e6:	d04b      	beq.n	8007880 <_reclaim_reent+0xa4>
 80077e8:	69c3      	ldr	r3, [r0, #28]
 80077ea:	b143      	cbz	r3, 80077fe <_reclaim_reent+0x22>
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d144      	bne.n	800787c <_reclaim_reent+0xa0>
 80077f2:	69e3      	ldr	r3, [r4, #28]
 80077f4:	6819      	ldr	r1, [r3, #0]
 80077f6:	b111      	cbz	r1, 80077fe <_reclaim_reent+0x22>
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 ff37 	bl	800866c <_free_r>
 80077fe:	6961      	ldr	r1, [r4, #20]
 8007800:	b111      	cbz	r1, 8007808 <_reclaim_reent+0x2c>
 8007802:	4620      	mov	r0, r4
 8007804:	f000 ff32 	bl	800866c <_free_r>
 8007808:	69e1      	ldr	r1, [r4, #28]
 800780a:	b111      	cbz	r1, 8007812 <_reclaim_reent+0x36>
 800780c:	4620      	mov	r0, r4
 800780e:	f000 ff2d 	bl	800866c <_free_r>
 8007812:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007814:	b111      	cbz	r1, 800781c <_reclaim_reent+0x40>
 8007816:	4620      	mov	r0, r4
 8007818:	f000 ff28 	bl	800866c <_free_r>
 800781c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800781e:	b111      	cbz	r1, 8007826 <_reclaim_reent+0x4a>
 8007820:	4620      	mov	r0, r4
 8007822:	f000 ff23 	bl	800866c <_free_r>
 8007826:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007828:	b111      	cbz	r1, 8007830 <_reclaim_reent+0x54>
 800782a:	4620      	mov	r0, r4
 800782c:	f000 ff1e 	bl	800866c <_free_r>
 8007830:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007832:	b111      	cbz	r1, 800783a <_reclaim_reent+0x5e>
 8007834:	4620      	mov	r0, r4
 8007836:	f000 ff19 	bl	800866c <_free_r>
 800783a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800783c:	b111      	cbz	r1, 8007844 <_reclaim_reent+0x68>
 800783e:	4620      	mov	r0, r4
 8007840:	f000 ff14 	bl	800866c <_free_r>
 8007844:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007846:	b111      	cbz	r1, 800784e <_reclaim_reent+0x72>
 8007848:	4620      	mov	r0, r4
 800784a:	f000 ff0f 	bl	800866c <_free_r>
 800784e:	6a23      	ldr	r3, [r4, #32]
 8007850:	b1b3      	cbz	r3, 8007880 <_reclaim_reent+0xa4>
 8007852:	4620      	mov	r0, r4
 8007854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007858:	4718      	bx	r3
 800785a:	5949      	ldr	r1, [r1, r5]
 800785c:	b941      	cbnz	r1, 8007870 <_reclaim_reent+0x94>
 800785e:	3504      	adds	r5, #4
 8007860:	69e3      	ldr	r3, [r4, #28]
 8007862:	2d80      	cmp	r5, #128	; 0x80
 8007864:	68d9      	ldr	r1, [r3, #12]
 8007866:	d1f8      	bne.n	800785a <_reclaim_reent+0x7e>
 8007868:	4620      	mov	r0, r4
 800786a:	f000 feff 	bl	800866c <_free_r>
 800786e:	e7c0      	b.n	80077f2 <_reclaim_reent+0x16>
 8007870:	680e      	ldr	r6, [r1, #0]
 8007872:	4620      	mov	r0, r4
 8007874:	f000 fefa 	bl	800866c <_free_r>
 8007878:	4631      	mov	r1, r6
 800787a:	e7ef      	b.n	800785c <_reclaim_reent+0x80>
 800787c:	2500      	movs	r5, #0
 800787e:	e7ef      	b.n	8007860 <_reclaim_reent+0x84>
 8007880:	bd70      	pop	{r4, r5, r6, pc}
 8007882:	bf00      	nop
 8007884:	20000068 	.word	0x20000068

08007888 <_lseek_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d07      	ldr	r5, [pc, #28]	; (80078a8 <_lseek_r+0x20>)
 800788c:	4604      	mov	r4, r0
 800788e:	4608      	mov	r0, r1
 8007890:	4611      	mov	r1, r2
 8007892:	2200      	movs	r2, #0
 8007894:	602a      	str	r2, [r5, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	f7fa f906 	bl	8001aa8 <_lseek>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_lseek_r+0x1e>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_lseek_r+0x1e>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	20004428 	.word	0x20004428

080078ac <_read_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	; (80078cc <_read_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7fa f894 	bl	80019e8 <_read>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_read_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_read_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	20004428 	.word	0x20004428

080078d0 <_write_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d07      	ldr	r5, [pc, #28]	; (80078f0 <_write_r+0x20>)
 80078d4:	4604      	mov	r4, r0
 80078d6:	4608      	mov	r0, r1
 80078d8:	4611      	mov	r1, r2
 80078da:	2200      	movs	r2, #0
 80078dc:	602a      	str	r2, [r5, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	f7fa f89f 	bl	8001a22 <_write>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_write_r+0x1e>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_write_r+0x1e>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	20004428 	.word	0x20004428

080078f4 <__errno>:
 80078f4:	4b01      	ldr	r3, [pc, #4]	; (80078fc <__errno+0x8>)
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	20000068 	.word	0x20000068

08007900 <__libc_init_array>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	4d0d      	ldr	r5, [pc, #52]	; (8007938 <__libc_init_array+0x38>)
 8007904:	4c0d      	ldr	r4, [pc, #52]	; (800793c <__libc_init_array+0x3c>)
 8007906:	1b64      	subs	r4, r4, r5
 8007908:	10a4      	asrs	r4, r4, #2
 800790a:	2600      	movs	r6, #0
 800790c:	42a6      	cmp	r6, r4
 800790e:	d109      	bne.n	8007924 <__libc_init_array+0x24>
 8007910:	4d0b      	ldr	r5, [pc, #44]	; (8007940 <__libc_init_array+0x40>)
 8007912:	4c0c      	ldr	r4, [pc, #48]	; (8007944 <__libc_init_array+0x44>)
 8007914:	f003 fb40 	bl	800af98 <_init>
 8007918:	1b64      	subs	r4, r4, r5
 800791a:	10a4      	asrs	r4, r4, #2
 800791c:	2600      	movs	r6, #0
 800791e:	42a6      	cmp	r6, r4
 8007920:	d105      	bne.n	800792e <__libc_init_array+0x2e>
 8007922:	bd70      	pop	{r4, r5, r6, pc}
 8007924:	f855 3b04 	ldr.w	r3, [r5], #4
 8007928:	4798      	blx	r3
 800792a:	3601      	adds	r6, #1
 800792c:	e7ee      	b.n	800790c <__libc_init_array+0xc>
 800792e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007932:	4798      	blx	r3
 8007934:	3601      	adds	r6, #1
 8007936:	e7f2      	b.n	800791e <__libc_init_array+0x1e>
 8007938:	0800b520 	.word	0x0800b520
 800793c:	0800b520 	.word	0x0800b520
 8007940:	0800b520 	.word	0x0800b520
 8007944:	0800b524 	.word	0x0800b524

08007948 <__retarget_lock_init_recursive>:
 8007948:	4770      	bx	lr

0800794a <__retarget_lock_acquire_recursive>:
 800794a:	4770      	bx	lr

0800794c <__retarget_lock_release_recursive>:
 800794c:	4770      	bx	lr

0800794e <memcpy>:
 800794e:	440a      	add	r2, r1
 8007950:	4291      	cmp	r1, r2
 8007952:	f100 33ff 	add.w	r3, r0, #4294967295
 8007956:	d100      	bne.n	800795a <memcpy+0xc>
 8007958:	4770      	bx	lr
 800795a:	b510      	push	{r4, lr}
 800795c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007960:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007964:	4291      	cmp	r1, r2
 8007966:	d1f9      	bne.n	800795c <memcpy+0xe>
 8007968:	bd10      	pop	{r4, pc}
	...

0800796c <nanf>:
 800796c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007974 <nanf+0x8>
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	7fc00000 	.word	0x7fc00000

08007978 <quorem>:
 8007978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	6903      	ldr	r3, [r0, #16]
 800797e:	690c      	ldr	r4, [r1, #16]
 8007980:	42a3      	cmp	r3, r4
 8007982:	4607      	mov	r7, r0
 8007984:	db7e      	blt.n	8007a84 <quorem+0x10c>
 8007986:	3c01      	subs	r4, #1
 8007988:	f101 0814 	add.w	r8, r1, #20
 800798c:	f100 0514 	add.w	r5, r0, #20
 8007990:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800799a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800799e:	3301      	adds	r3, #1
 80079a0:	429a      	cmp	r2, r3
 80079a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80079ae:	d331      	bcc.n	8007a14 <quorem+0x9c>
 80079b0:	f04f 0e00 	mov.w	lr, #0
 80079b4:	4640      	mov	r0, r8
 80079b6:	46ac      	mov	ip, r5
 80079b8:	46f2      	mov	sl, lr
 80079ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80079be:	b293      	uxth	r3, r2
 80079c0:	fb06 e303 	mla	r3, r6, r3, lr
 80079c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079c8:	0c1a      	lsrs	r2, r3, #16
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	ebaa 0303 	sub.w	r3, sl, r3
 80079d0:	f8dc a000 	ldr.w	sl, [ip]
 80079d4:	fa13 f38a 	uxtah	r3, r3, sl
 80079d8:	fb06 220e 	mla	r2, r6, lr, r2
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	9b00      	ldr	r3, [sp, #0]
 80079e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079e4:	b292      	uxth	r2, r2
 80079e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80079f2:	4581      	cmp	r9, r0
 80079f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079f8:	f84c 3b04 	str.w	r3, [ip], #4
 80079fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a00:	d2db      	bcs.n	80079ba <quorem+0x42>
 8007a02:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a06:	b92b      	cbnz	r3, 8007a14 <quorem+0x9c>
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	3b04      	subs	r3, #4
 8007a0c:	429d      	cmp	r5, r3
 8007a0e:	461a      	mov	r2, r3
 8007a10:	d32c      	bcc.n	8007a6c <quorem+0xf4>
 8007a12:	613c      	str	r4, [r7, #16]
 8007a14:	4638      	mov	r0, r7
 8007a16:	f001 f9ef 	bl	8008df8 <__mcmp>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	db22      	blt.n	8007a64 <quorem+0xec>
 8007a1e:	3601      	adds	r6, #1
 8007a20:	4629      	mov	r1, r5
 8007a22:	2000      	movs	r0, #0
 8007a24:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a28:	f8d1 c000 	ldr.w	ip, [r1]
 8007a2c:	b293      	uxth	r3, r2
 8007a2e:	1ac3      	subs	r3, r0, r3
 8007a30:	0c12      	lsrs	r2, r2, #16
 8007a32:	fa13 f38c 	uxtah	r3, r3, ip
 8007a36:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a44:	45c1      	cmp	r9, r8
 8007a46:	f841 3b04 	str.w	r3, [r1], #4
 8007a4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a4e:	d2e9      	bcs.n	8007a24 <quorem+0xac>
 8007a50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a58:	b922      	cbnz	r2, 8007a64 <quorem+0xec>
 8007a5a:	3b04      	subs	r3, #4
 8007a5c:	429d      	cmp	r5, r3
 8007a5e:	461a      	mov	r2, r3
 8007a60:	d30a      	bcc.n	8007a78 <quorem+0x100>
 8007a62:	613c      	str	r4, [r7, #16]
 8007a64:	4630      	mov	r0, r6
 8007a66:	b003      	add	sp, #12
 8007a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6c:	6812      	ldr	r2, [r2, #0]
 8007a6e:	3b04      	subs	r3, #4
 8007a70:	2a00      	cmp	r2, #0
 8007a72:	d1ce      	bne.n	8007a12 <quorem+0x9a>
 8007a74:	3c01      	subs	r4, #1
 8007a76:	e7c9      	b.n	8007a0c <quorem+0x94>
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	3b04      	subs	r3, #4
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	d1f0      	bne.n	8007a62 <quorem+0xea>
 8007a80:	3c01      	subs	r4, #1
 8007a82:	e7eb      	b.n	8007a5c <quorem+0xe4>
 8007a84:	2000      	movs	r0, #0
 8007a86:	e7ee      	b.n	8007a66 <quorem+0xee>

08007a88 <_dtoa_r>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	ed2d 8b04 	vpush	{d8-d9}
 8007a90:	69c5      	ldr	r5, [r0, #28]
 8007a92:	b093      	sub	sp, #76	; 0x4c
 8007a94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a98:	ec57 6b10 	vmov	r6, r7, d0
 8007a9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007aa0:	9107      	str	r1, [sp, #28]
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	920a      	str	r2, [sp, #40]	; 0x28
 8007aa6:	930d      	str	r3, [sp, #52]	; 0x34
 8007aa8:	b975      	cbnz	r5, 8007ac8 <_dtoa_r+0x40>
 8007aaa:	2010      	movs	r0, #16
 8007aac:	f000 fe2a 	bl	8008704 <malloc>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	61e0      	str	r0, [r4, #28]
 8007ab4:	b920      	cbnz	r0, 8007ac0 <_dtoa_r+0x38>
 8007ab6:	4bae      	ldr	r3, [pc, #696]	; (8007d70 <_dtoa_r+0x2e8>)
 8007ab8:	21ef      	movs	r1, #239	; 0xef
 8007aba:	48ae      	ldr	r0, [pc, #696]	; (8007d74 <_dtoa_r+0x2ec>)
 8007abc:	f002 fe2c 	bl	800a718 <__assert_func>
 8007ac0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ac4:	6005      	str	r5, [r0, #0]
 8007ac6:	60c5      	str	r5, [r0, #12]
 8007ac8:	69e3      	ldr	r3, [r4, #28]
 8007aca:	6819      	ldr	r1, [r3, #0]
 8007acc:	b151      	cbz	r1, 8007ae4 <_dtoa_r+0x5c>
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	604a      	str	r2, [r1, #4]
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4093      	lsls	r3, r2
 8007ad6:	608b      	str	r3, [r1, #8]
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 ff07 	bl	80088ec <_Bfree>
 8007ade:	69e3      	ldr	r3, [r4, #28]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	1e3b      	subs	r3, r7, #0
 8007ae6:	bfbb      	ittet	lt
 8007ae8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007aec:	9303      	strlt	r3, [sp, #12]
 8007aee:	2300      	movge	r3, #0
 8007af0:	2201      	movlt	r2, #1
 8007af2:	bfac      	ite	ge
 8007af4:	f8c8 3000 	strge.w	r3, [r8]
 8007af8:	f8c8 2000 	strlt.w	r2, [r8]
 8007afc:	4b9e      	ldr	r3, [pc, #632]	; (8007d78 <_dtoa_r+0x2f0>)
 8007afe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b02:	ea33 0308 	bics.w	r3, r3, r8
 8007b06:	d11b      	bne.n	8007b40 <_dtoa_r+0xb8>
 8007b08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b14:	4333      	orrs	r3, r6
 8007b16:	f000 8593 	beq.w	8008640 <_dtoa_r+0xbb8>
 8007b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b1c:	b963      	cbnz	r3, 8007b38 <_dtoa_r+0xb0>
 8007b1e:	4b97      	ldr	r3, [pc, #604]	; (8007d7c <_dtoa_r+0x2f4>)
 8007b20:	e027      	b.n	8007b72 <_dtoa_r+0xea>
 8007b22:	4b97      	ldr	r3, [pc, #604]	; (8007d80 <_dtoa_r+0x2f8>)
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	9800      	ldr	r0, [sp, #0]
 8007b2e:	b013      	add	sp, #76	; 0x4c
 8007b30:	ecbd 8b04 	vpop	{d8-d9}
 8007b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b38:	4b90      	ldr	r3, [pc, #576]	; (8007d7c <_dtoa_r+0x2f4>)
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	3303      	adds	r3, #3
 8007b3e:	e7f3      	b.n	8007b28 <_dtoa_r+0xa0>
 8007b40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b44:	2200      	movs	r2, #0
 8007b46:	ec51 0b17 	vmov	r0, r1, d7
 8007b4a:	eeb0 8a47 	vmov.f32	s16, s14
 8007b4e:	eef0 8a67 	vmov.f32	s17, s15
 8007b52:	2300      	movs	r3, #0
 8007b54:	f7f8 ffc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b58:	4681      	mov	r9, r0
 8007b5a:	b160      	cbz	r0, 8007b76 <_dtoa_r+0xee>
 8007b5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b5e:	2301      	movs	r3, #1
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8568 	beq.w	800863a <_dtoa_r+0xbb2>
 8007b6a:	4b86      	ldr	r3, [pc, #536]	; (8007d84 <_dtoa_r+0x2fc>)
 8007b6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	e7da      	b.n	8007b2c <_dtoa_r+0xa4>
 8007b76:	aa10      	add	r2, sp, #64	; 0x40
 8007b78:	a911      	add	r1, sp, #68	; 0x44
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b80:	eef0 0a68 	vmov.f32	s1, s17
 8007b84:	f001 fa4e 	bl	8009024 <__d2b>
 8007b88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b8c:	4682      	mov	sl, r0
 8007b8e:	2d00      	cmp	r5, #0
 8007b90:	d07f      	beq.n	8007c92 <_dtoa_r+0x20a>
 8007b92:	ee18 3a90 	vmov	r3, s17
 8007b96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b9e:	ec51 0b18 	vmov	r0, r1, d8
 8007ba2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ba6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007baa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007bae:	4619      	mov	r1, r3
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	4b75      	ldr	r3, [pc, #468]	; (8007d88 <_dtoa_r+0x300>)
 8007bb4:	f7f8 fb70 	bl	8000298 <__aeabi_dsub>
 8007bb8:	a367      	add	r3, pc, #412	; (adr r3, 8007d58 <_dtoa_r+0x2d0>)
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	f7f8 fd23 	bl	8000608 <__aeabi_dmul>
 8007bc2:	a367      	add	r3, pc, #412	; (adr r3, 8007d60 <_dtoa_r+0x2d8>)
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f7f8 fb68 	bl	800029c <__adddf3>
 8007bcc:	4606      	mov	r6, r0
 8007bce:	4628      	mov	r0, r5
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	f7f8 fcaf 	bl	8000534 <__aeabi_i2d>
 8007bd6:	a364      	add	r3, pc, #400	; (adr r3, 8007d68 <_dtoa_r+0x2e0>)
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f7f8 fd14 	bl	8000608 <__aeabi_dmul>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4630      	mov	r0, r6
 8007be6:	4639      	mov	r1, r7
 8007be8:	f7f8 fb58 	bl	800029c <__adddf3>
 8007bec:	4606      	mov	r6, r0
 8007bee:	460f      	mov	r7, r1
 8007bf0:	f7f8 ffba 	bl	8000b68 <__aeabi_d2iz>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4683      	mov	fp, r0
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	f7f8 ff75 	bl	8000aec <__aeabi_dcmplt>
 8007c02:	b148      	cbz	r0, 8007c18 <_dtoa_r+0x190>
 8007c04:	4658      	mov	r0, fp
 8007c06:	f7f8 fc95 	bl	8000534 <__aeabi_i2d>
 8007c0a:	4632      	mov	r2, r6
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	f7f8 ff63 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c12:	b908      	cbnz	r0, 8007c18 <_dtoa_r+0x190>
 8007c14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c18:	f1bb 0f16 	cmp.w	fp, #22
 8007c1c:	d857      	bhi.n	8007cce <_dtoa_r+0x246>
 8007c1e:	4b5b      	ldr	r3, [pc, #364]	; (8007d8c <_dtoa_r+0x304>)
 8007c20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	ec51 0b18 	vmov	r0, r1, d8
 8007c2c:	f7f8 ff5e 	bl	8000aec <__aeabi_dcmplt>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d04e      	beq.n	8007cd2 <_dtoa_r+0x24a>
 8007c34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c38:	2300      	movs	r3, #0
 8007c3a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c3e:	1b5b      	subs	r3, r3, r5
 8007c40:	1e5a      	subs	r2, r3, #1
 8007c42:	bf45      	ittet	mi
 8007c44:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c48:	9305      	strmi	r3, [sp, #20]
 8007c4a:	2300      	movpl	r3, #0
 8007c4c:	2300      	movmi	r3, #0
 8007c4e:	9206      	str	r2, [sp, #24]
 8007c50:	bf54      	ite	pl
 8007c52:	9305      	strpl	r3, [sp, #20]
 8007c54:	9306      	strmi	r3, [sp, #24]
 8007c56:	f1bb 0f00 	cmp.w	fp, #0
 8007c5a:	db3c      	blt.n	8007cd6 <_dtoa_r+0x24e>
 8007c5c:	9b06      	ldr	r3, [sp, #24]
 8007c5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c62:	445b      	add	r3, fp
 8007c64:	9306      	str	r3, [sp, #24]
 8007c66:	2300      	movs	r3, #0
 8007c68:	9308      	str	r3, [sp, #32]
 8007c6a:	9b07      	ldr	r3, [sp, #28]
 8007c6c:	2b09      	cmp	r3, #9
 8007c6e:	d868      	bhi.n	8007d42 <_dtoa_r+0x2ba>
 8007c70:	2b05      	cmp	r3, #5
 8007c72:	bfc4      	itt	gt
 8007c74:	3b04      	subgt	r3, #4
 8007c76:	9307      	strgt	r3, [sp, #28]
 8007c78:	9b07      	ldr	r3, [sp, #28]
 8007c7a:	f1a3 0302 	sub.w	r3, r3, #2
 8007c7e:	bfcc      	ite	gt
 8007c80:	2500      	movgt	r5, #0
 8007c82:	2501      	movle	r5, #1
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	f200 8085 	bhi.w	8007d94 <_dtoa_r+0x30c>
 8007c8a:	e8df f003 	tbb	[pc, r3]
 8007c8e:	3b2e      	.short	0x3b2e
 8007c90:	5839      	.short	0x5839
 8007c92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c96:	441d      	add	r5, r3
 8007c98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	bfc1      	itttt	gt
 8007ca0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ca4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007ca8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007cac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007cb0:	bfd6      	itet	le
 8007cb2:	f1c3 0320 	rsble	r3, r3, #32
 8007cb6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007cba:	fa06 f003 	lslle.w	r0, r6, r3
 8007cbe:	f7f8 fc29 	bl	8000514 <__aeabi_ui2d>
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007cc8:	3d01      	subs	r5, #1
 8007cca:	920e      	str	r2, [sp, #56]	; 0x38
 8007ccc:	e76f      	b.n	8007bae <_dtoa_r+0x126>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e7b3      	b.n	8007c3a <_dtoa_r+0x1b2>
 8007cd2:	900c      	str	r0, [sp, #48]	; 0x30
 8007cd4:	e7b2      	b.n	8007c3c <_dtoa_r+0x1b4>
 8007cd6:	9b05      	ldr	r3, [sp, #20]
 8007cd8:	eba3 030b 	sub.w	r3, r3, fp
 8007cdc:	9305      	str	r3, [sp, #20]
 8007cde:	f1cb 0300 	rsb	r3, fp, #0
 8007ce2:	9308      	str	r3, [sp, #32]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ce8:	e7bf      	b.n	8007c6a <_dtoa_r+0x1e2>
 8007cea:	2300      	movs	r3, #0
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
 8007cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dc52      	bgt.n	8007d9a <_dtoa_r+0x312>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	920a      	str	r2, [sp, #40]	; 0x28
 8007cfe:	e00b      	b.n	8007d18 <_dtoa_r+0x290>
 8007d00:	2301      	movs	r3, #1
 8007d02:	e7f3      	b.n	8007cec <_dtoa_r+0x264>
 8007d04:	2300      	movs	r3, #0
 8007d06:	9309      	str	r3, [sp, #36]	; 0x24
 8007d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d0a:	445b      	add	r3, fp
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	bfb8      	it	lt
 8007d16:	2301      	movlt	r3, #1
 8007d18:	69e0      	ldr	r0, [r4, #28]
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	f102 0614 	add.w	r6, r2, #20
 8007d22:	429e      	cmp	r6, r3
 8007d24:	d93d      	bls.n	8007da2 <_dtoa_r+0x31a>
 8007d26:	6041      	str	r1, [r0, #4]
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 fd9f 	bl	800886c <_Balloc>
 8007d2e:	9000      	str	r0, [sp, #0]
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d139      	bne.n	8007da8 <_dtoa_r+0x320>
 8007d34:	4b16      	ldr	r3, [pc, #88]	; (8007d90 <_dtoa_r+0x308>)
 8007d36:	4602      	mov	r2, r0
 8007d38:	f240 11af 	movw	r1, #431	; 0x1af
 8007d3c:	e6bd      	b.n	8007aba <_dtoa_r+0x32>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e7e1      	b.n	8007d06 <_dtoa_r+0x27e>
 8007d42:	2501      	movs	r5, #1
 8007d44:	2300      	movs	r3, #0
 8007d46:	9307      	str	r3, [sp, #28]
 8007d48:	9509      	str	r5, [sp, #36]	; 0x24
 8007d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	9304      	str	r3, [sp, #16]
 8007d52:	2200      	movs	r2, #0
 8007d54:	2312      	movs	r3, #18
 8007d56:	e7d1      	b.n	8007cfc <_dtoa_r+0x274>
 8007d58:	636f4361 	.word	0x636f4361
 8007d5c:	3fd287a7 	.word	0x3fd287a7
 8007d60:	8b60c8b3 	.word	0x8b60c8b3
 8007d64:	3fc68a28 	.word	0x3fc68a28
 8007d68:	509f79fb 	.word	0x509f79fb
 8007d6c:	3fd34413 	.word	0x3fd34413
 8007d70:	0800b136 	.word	0x0800b136
 8007d74:	0800b14d 	.word	0x0800b14d
 8007d78:	7ff00000 	.word	0x7ff00000
 8007d7c:	0800b132 	.word	0x0800b132
 8007d80:	0800b129 	.word	0x0800b129
 8007d84:	0800b101 	.word	0x0800b101
 8007d88:	3ff80000 	.word	0x3ff80000
 8007d8c:	0800b238 	.word	0x0800b238
 8007d90:	0800b1a5 	.word	0x0800b1a5
 8007d94:	2301      	movs	r3, #1
 8007d96:	9309      	str	r3, [sp, #36]	; 0x24
 8007d98:	e7d7      	b.n	8007d4a <_dtoa_r+0x2c2>
 8007d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	9304      	str	r3, [sp, #16]
 8007da0:	e7ba      	b.n	8007d18 <_dtoa_r+0x290>
 8007da2:	3101      	adds	r1, #1
 8007da4:	0052      	lsls	r2, r2, #1
 8007da6:	e7ba      	b.n	8007d1e <_dtoa_r+0x296>
 8007da8:	69e3      	ldr	r3, [r4, #28]
 8007daa:	9a00      	ldr	r2, [sp, #0]
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	2b0e      	cmp	r3, #14
 8007db2:	f200 80a8 	bhi.w	8007f06 <_dtoa_r+0x47e>
 8007db6:	2d00      	cmp	r5, #0
 8007db8:	f000 80a5 	beq.w	8007f06 <_dtoa_r+0x47e>
 8007dbc:	f1bb 0f00 	cmp.w	fp, #0
 8007dc0:	dd38      	ble.n	8007e34 <_dtoa_r+0x3ac>
 8007dc2:	4bc0      	ldr	r3, [pc, #768]	; (80080c4 <_dtoa_r+0x63c>)
 8007dc4:	f00b 020f 	and.w	r2, fp, #15
 8007dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007dd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007dd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007dd8:	d019      	beq.n	8007e0e <_dtoa_r+0x386>
 8007dda:	4bbb      	ldr	r3, [pc, #748]	; (80080c8 <_dtoa_r+0x640>)
 8007ddc:	ec51 0b18 	vmov	r0, r1, d8
 8007de0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007de4:	f7f8 fd3a 	bl	800085c <__aeabi_ddiv>
 8007de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dec:	f008 080f 	and.w	r8, r8, #15
 8007df0:	2503      	movs	r5, #3
 8007df2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80080c8 <_dtoa_r+0x640>
 8007df6:	f1b8 0f00 	cmp.w	r8, #0
 8007dfa:	d10a      	bne.n	8007e12 <_dtoa_r+0x38a>
 8007dfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e00:	4632      	mov	r2, r6
 8007e02:	463b      	mov	r3, r7
 8007e04:	f7f8 fd2a 	bl	800085c <__aeabi_ddiv>
 8007e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e0c:	e02b      	b.n	8007e66 <_dtoa_r+0x3de>
 8007e0e:	2502      	movs	r5, #2
 8007e10:	e7ef      	b.n	8007df2 <_dtoa_r+0x36a>
 8007e12:	f018 0f01 	tst.w	r8, #1
 8007e16:	d008      	beq.n	8007e2a <_dtoa_r+0x3a2>
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e20:	f7f8 fbf2 	bl	8000608 <__aeabi_dmul>
 8007e24:	3501      	adds	r5, #1
 8007e26:	4606      	mov	r6, r0
 8007e28:	460f      	mov	r7, r1
 8007e2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e2e:	f109 0908 	add.w	r9, r9, #8
 8007e32:	e7e0      	b.n	8007df6 <_dtoa_r+0x36e>
 8007e34:	f000 809f 	beq.w	8007f76 <_dtoa_r+0x4ee>
 8007e38:	f1cb 0600 	rsb	r6, fp, #0
 8007e3c:	4ba1      	ldr	r3, [pc, #644]	; (80080c4 <_dtoa_r+0x63c>)
 8007e3e:	4fa2      	ldr	r7, [pc, #648]	; (80080c8 <_dtoa_r+0x640>)
 8007e40:	f006 020f 	and.w	r2, r6, #15
 8007e44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	ec51 0b18 	vmov	r0, r1, d8
 8007e50:	f7f8 fbda 	bl	8000608 <__aeabi_dmul>
 8007e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e58:	1136      	asrs	r6, r6, #4
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2502      	movs	r5, #2
 8007e5e:	2e00      	cmp	r6, #0
 8007e60:	d17e      	bne.n	8007f60 <_dtoa_r+0x4d8>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1d0      	bne.n	8007e08 <_dtoa_r+0x380>
 8007e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 8084 	beq.w	8007f7a <_dtoa_r+0x4f2>
 8007e72:	4b96      	ldr	r3, [pc, #600]	; (80080cc <_dtoa_r+0x644>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	4640      	mov	r0, r8
 8007e78:	4649      	mov	r1, r9
 8007e7a:	f7f8 fe37 	bl	8000aec <__aeabi_dcmplt>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d07b      	beq.n	8007f7a <_dtoa_r+0x4f2>
 8007e82:	9b04      	ldr	r3, [sp, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d078      	beq.n	8007f7a <_dtoa_r+0x4f2>
 8007e88:	9b01      	ldr	r3, [sp, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	dd39      	ble.n	8007f02 <_dtoa_r+0x47a>
 8007e8e:	4b90      	ldr	r3, [pc, #576]	; (80080d0 <_dtoa_r+0x648>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	4640      	mov	r0, r8
 8007e94:	4649      	mov	r1, r9
 8007e96:	f7f8 fbb7 	bl	8000608 <__aeabi_dmul>
 8007e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e9e:	9e01      	ldr	r6, [sp, #4]
 8007ea0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007ea4:	3501      	adds	r5, #1
 8007ea6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f7f8 fb42 	bl	8000534 <__aeabi_i2d>
 8007eb0:	4642      	mov	r2, r8
 8007eb2:	464b      	mov	r3, r9
 8007eb4:	f7f8 fba8 	bl	8000608 <__aeabi_dmul>
 8007eb8:	4b86      	ldr	r3, [pc, #536]	; (80080d4 <_dtoa_r+0x64c>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f7f8 f9ee 	bl	800029c <__adddf3>
 8007ec0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ec8:	9303      	str	r3, [sp, #12]
 8007eca:	2e00      	cmp	r6, #0
 8007ecc:	d158      	bne.n	8007f80 <_dtoa_r+0x4f8>
 8007ece:	4b82      	ldr	r3, [pc, #520]	; (80080d8 <_dtoa_r+0x650>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	4649      	mov	r1, r9
 8007ed6:	f7f8 f9df 	bl	8000298 <__aeabi_dsub>
 8007eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ede:	4680      	mov	r8, r0
 8007ee0:	4689      	mov	r9, r1
 8007ee2:	f7f8 fe21 	bl	8000b28 <__aeabi_dcmpgt>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	f040 8296 	bne.w	8008418 <_dtoa_r+0x990>
 8007eec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	f7f8 fdf8 	bl	8000aec <__aeabi_dcmplt>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	f040 8289 	bne.w	8008414 <_dtoa_r+0x98c>
 8007f02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f2c0 814e 	blt.w	80081aa <_dtoa_r+0x722>
 8007f0e:	f1bb 0f0e 	cmp.w	fp, #14
 8007f12:	f300 814a 	bgt.w	80081aa <_dtoa_r+0x722>
 8007f16:	4b6b      	ldr	r3, [pc, #428]	; (80080c4 <_dtoa_r+0x63c>)
 8007f18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f280 80dc 	bge.w	80080e0 <_dtoa_r+0x658>
 8007f28:	9b04      	ldr	r3, [sp, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f300 80d8 	bgt.w	80080e0 <_dtoa_r+0x658>
 8007f30:	f040 826f 	bne.w	8008412 <_dtoa_r+0x98a>
 8007f34:	4b68      	ldr	r3, [pc, #416]	; (80080d8 <_dtoa_r+0x650>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	4640      	mov	r0, r8
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	f7f8 fb64 	bl	8000608 <__aeabi_dmul>
 8007f40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f44:	f7f8 fde6 	bl	8000b14 <__aeabi_dcmpge>
 8007f48:	9e04      	ldr	r6, [sp, #16]
 8007f4a:	4637      	mov	r7, r6
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	f040 8245 	bne.w	80083dc <_dtoa_r+0x954>
 8007f52:	9d00      	ldr	r5, [sp, #0]
 8007f54:	2331      	movs	r3, #49	; 0x31
 8007f56:	f805 3b01 	strb.w	r3, [r5], #1
 8007f5a:	f10b 0b01 	add.w	fp, fp, #1
 8007f5e:	e241      	b.n	80083e4 <_dtoa_r+0x95c>
 8007f60:	07f2      	lsls	r2, r6, #31
 8007f62:	d505      	bpl.n	8007f70 <_dtoa_r+0x4e8>
 8007f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f68:	f7f8 fb4e 	bl	8000608 <__aeabi_dmul>
 8007f6c:	3501      	adds	r5, #1
 8007f6e:	2301      	movs	r3, #1
 8007f70:	1076      	asrs	r6, r6, #1
 8007f72:	3708      	adds	r7, #8
 8007f74:	e773      	b.n	8007e5e <_dtoa_r+0x3d6>
 8007f76:	2502      	movs	r5, #2
 8007f78:	e775      	b.n	8007e66 <_dtoa_r+0x3de>
 8007f7a:	9e04      	ldr	r6, [sp, #16]
 8007f7c:	465f      	mov	r7, fp
 8007f7e:	e792      	b.n	8007ea6 <_dtoa_r+0x41e>
 8007f80:	9900      	ldr	r1, [sp, #0]
 8007f82:	4b50      	ldr	r3, [pc, #320]	; (80080c4 <_dtoa_r+0x63c>)
 8007f84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f88:	4431      	add	r1, r6
 8007f8a:	9102      	str	r1, [sp, #8]
 8007f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f8e:	eeb0 9a47 	vmov.f32	s18, s14
 8007f92:	eef0 9a67 	vmov.f32	s19, s15
 8007f96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f9e:	2900      	cmp	r1, #0
 8007fa0:	d044      	beq.n	800802c <_dtoa_r+0x5a4>
 8007fa2:	494e      	ldr	r1, [pc, #312]	; (80080dc <_dtoa_r+0x654>)
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	f7f8 fc59 	bl	800085c <__aeabi_ddiv>
 8007faa:	ec53 2b19 	vmov	r2, r3, d9
 8007fae:	f7f8 f973 	bl	8000298 <__aeabi_dsub>
 8007fb2:	9d00      	ldr	r5, [sp, #0]
 8007fb4:	ec41 0b19 	vmov	d9, r0, r1
 8007fb8:	4649      	mov	r1, r9
 8007fba:	4640      	mov	r0, r8
 8007fbc:	f7f8 fdd4 	bl	8000b68 <__aeabi_d2iz>
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	f7f8 fab7 	bl	8000534 <__aeabi_i2d>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4640      	mov	r0, r8
 8007fcc:	4649      	mov	r1, r9
 8007fce:	f7f8 f963 	bl	8000298 <__aeabi_dsub>
 8007fd2:	3630      	adds	r6, #48	; 0x30
 8007fd4:	f805 6b01 	strb.w	r6, [r5], #1
 8007fd8:	ec53 2b19 	vmov	r2, r3, d9
 8007fdc:	4680      	mov	r8, r0
 8007fde:	4689      	mov	r9, r1
 8007fe0:	f7f8 fd84 	bl	8000aec <__aeabi_dcmplt>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d164      	bne.n	80080b2 <_dtoa_r+0x62a>
 8007fe8:	4642      	mov	r2, r8
 8007fea:	464b      	mov	r3, r9
 8007fec:	4937      	ldr	r1, [pc, #220]	; (80080cc <_dtoa_r+0x644>)
 8007fee:	2000      	movs	r0, #0
 8007ff0:	f7f8 f952 	bl	8000298 <__aeabi_dsub>
 8007ff4:	ec53 2b19 	vmov	r2, r3, d9
 8007ff8:	f7f8 fd78 	bl	8000aec <__aeabi_dcmplt>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f040 80b6 	bne.w	800816e <_dtoa_r+0x6e6>
 8008002:	9b02      	ldr	r3, [sp, #8]
 8008004:	429d      	cmp	r5, r3
 8008006:	f43f af7c 	beq.w	8007f02 <_dtoa_r+0x47a>
 800800a:	4b31      	ldr	r3, [pc, #196]	; (80080d0 <_dtoa_r+0x648>)
 800800c:	ec51 0b19 	vmov	r0, r1, d9
 8008010:	2200      	movs	r2, #0
 8008012:	f7f8 faf9 	bl	8000608 <__aeabi_dmul>
 8008016:	4b2e      	ldr	r3, [pc, #184]	; (80080d0 <_dtoa_r+0x648>)
 8008018:	ec41 0b19 	vmov	d9, r0, r1
 800801c:	2200      	movs	r2, #0
 800801e:	4640      	mov	r0, r8
 8008020:	4649      	mov	r1, r9
 8008022:	f7f8 faf1 	bl	8000608 <__aeabi_dmul>
 8008026:	4680      	mov	r8, r0
 8008028:	4689      	mov	r9, r1
 800802a:	e7c5      	b.n	8007fb8 <_dtoa_r+0x530>
 800802c:	ec51 0b17 	vmov	r0, r1, d7
 8008030:	f7f8 faea 	bl	8000608 <__aeabi_dmul>
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	9d00      	ldr	r5, [sp, #0]
 8008038:	930f      	str	r3, [sp, #60]	; 0x3c
 800803a:	ec41 0b19 	vmov	d9, r0, r1
 800803e:	4649      	mov	r1, r9
 8008040:	4640      	mov	r0, r8
 8008042:	f7f8 fd91 	bl	8000b68 <__aeabi_d2iz>
 8008046:	4606      	mov	r6, r0
 8008048:	f7f8 fa74 	bl	8000534 <__aeabi_i2d>
 800804c:	3630      	adds	r6, #48	; 0x30
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4640      	mov	r0, r8
 8008054:	4649      	mov	r1, r9
 8008056:	f7f8 f91f 	bl	8000298 <__aeabi_dsub>
 800805a:	f805 6b01 	strb.w	r6, [r5], #1
 800805e:	9b02      	ldr	r3, [sp, #8]
 8008060:	429d      	cmp	r5, r3
 8008062:	4680      	mov	r8, r0
 8008064:	4689      	mov	r9, r1
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	d124      	bne.n	80080b6 <_dtoa_r+0x62e>
 800806c:	4b1b      	ldr	r3, [pc, #108]	; (80080dc <_dtoa_r+0x654>)
 800806e:	ec51 0b19 	vmov	r0, r1, d9
 8008072:	f7f8 f913 	bl	800029c <__adddf3>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4640      	mov	r0, r8
 800807c:	4649      	mov	r1, r9
 800807e:	f7f8 fd53 	bl	8000b28 <__aeabi_dcmpgt>
 8008082:	2800      	cmp	r0, #0
 8008084:	d173      	bne.n	800816e <_dtoa_r+0x6e6>
 8008086:	ec53 2b19 	vmov	r2, r3, d9
 800808a:	4914      	ldr	r1, [pc, #80]	; (80080dc <_dtoa_r+0x654>)
 800808c:	2000      	movs	r0, #0
 800808e:	f7f8 f903 	bl	8000298 <__aeabi_dsub>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4640      	mov	r0, r8
 8008098:	4649      	mov	r1, r9
 800809a:	f7f8 fd27 	bl	8000aec <__aeabi_dcmplt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	f43f af2f 	beq.w	8007f02 <_dtoa_r+0x47a>
 80080a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080a6:	1e6b      	subs	r3, r5, #1
 80080a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80080aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080ae:	2b30      	cmp	r3, #48	; 0x30
 80080b0:	d0f8      	beq.n	80080a4 <_dtoa_r+0x61c>
 80080b2:	46bb      	mov	fp, r7
 80080b4:	e04a      	b.n	800814c <_dtoa_r+0x6c4>
 80080b6:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <_dtoa_r+0x648>)
 80080b8:	f7f8 faa6 	bl	8000608 <__aeabi_dmul>
 80080bc:	4680      	mov	r8, r0
 80080be:	4689      	mov	r9, r1
 80080c0:	e7bd      	b.n	800803e <_dtoa_r+0x5b6>
 80080c2:	bf00      	nop
 80080c4:	0800b238 	.word	0x0800b238
 80080c8:	0800b210 	.word	0x0800b210
 80080cc:	3ff00000 	.word	0x3ff00000
 80080d0:	40240000 	.word	0x40240000
 80080d4:	401c0000 	.word	0x401c0000
 80080d8:	40140000 	.word	0x40140000
 80080dc:	3fe00000 	.word	0x3fe00000
 80080e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080e4:	9d00      	ldr	r5, [sp, #0]
 80080e6:	4642      	mov	r2, r8
 80080e8:	464b      	mov	r3, r9
 80080ea:	4630      	mov	r0, r6
 80080ec:	4639      	mov	r1, r7
 80080ee:	f7f8 fbb5 	bl	800085c <__aeabi_ddiv>
 80080f2:	f7f8 fd39 	bl	8000b68 <__aeabi_d2iz>
 80080f6:	9001      	str	r0, [sp, #4]
 80080f8:	f7f8 fa1c 	bl	8000534 <__aeabi_i2d>
 80080fc:	4642      	mov	r2, r8
 80080fe:	464b      	mov	r3, r9
 8008100:	f7f8 fa82 	bl	8000608 <__aeabi_dmul>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4630      	mov	r0, r6
 800810a:	4639      	mov	r1, r7
 800810c:	f7f8 f8c4 	bl	8000298 <__aeabi_dsub>
 8008110:	9e01      	ldr	r6, [sp, #4]
 8008112:	9f04      	ldr	r7, [sp, #16]
 8008114:	3630      	adds	r6, #48	; 0x30
 8008116:	f805 6b01 	strb.w	r6, [r5], #1
 800811a:	9e00      	ldr	r6, [sp, #0]
 800811c:	1bae      	subs	r6, r5, r6
 800811e:	42b7      	cmp	r7, r6
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	d134      	bne.n	8008190 <_dtoa_r+0x708>
 8008126:	f7f8 f8b9 	bl	800029c <__adddf3>
 800812a:	4642      	mov	r2, r8
 800812c:	464b      	mov	r3, r9
 800812e:	4606      	mov	r6, r0
 8008130:	460f      	mov	r7, r1
 8008132:	f7f8 fcf9 	bl	8000b28 <__aeabi_dcmpgt>
 8008136:	b9c8      	cbnz	r0, 800816c <_dtoa_r+0x6e4>
 8008138:	4642      	mov	r2, r8
 800813a:	464b      	mov	r3, r9
 800813c:	4630      	mov	r0, r6
 800813e:	4639      	mov	r1, r7
 8008140:	f7f8 fcca 	bl	8000ad8 <__aeabi_dcmpeq>
 8008144:	b110      	cbz	r0, 800814c <_dtoa_r+0x6c4>
 8008146:	9b01      	ldr	r3, [sp, #4]
 8008148:	07db      	lsls	r3, r3, #31
 800814a:	d40f      	bmi.n	800816c <_dtoa_r+0x6e4>
 800814c:	4651      	mov	r1, sl
 800814e:	4620      	mov	r0, r4
 8008150:	f000 fbcc 	bl	80088ec <_Bfree>
 8008154:	2300      	movs	r3, #0
 8008156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008158:	702b      	strb	r3, [r5, #0]
 800815a:	f10b 0301 	add.w	r3, fp, #1
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008162:	2b00      	cmp	r3, #0
 8008164:	f43f ace2 	beq.w	8007b2c <_dtoa_r+0xa4>
 8008168:	601d      	str	r5, [r3, #0]
 800816a:	e4df      	b.n	8007b2c <_dtoa_r+0xa4>
 800816c:	465f      	mov	r7, fp
 800816e:	462b      	mov	r3, r5
 8008170:	461d      	mov	r5, r3
 8008172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008176:	2a39      	cmp	r2, #57	; 0x39
 8008178:	d106      	bne.n	8008188 <_dtoa_r+0x700>
 800817a:	9a00      	ldr	r2, [sp, #0]
 800817c:	429a      	cmp	r2, r3
 800817e:	d1f7      	bne.n	8008170 <_dtoa_r+0x6e8>
 8008180:	9900      	ldr	r1, [sp, #0]
 8008182:	2230      	movs	r2, #48	; 0x30
 8008184:	3701      	adds	r7, #1
 8008186:	700a      	strb	r2, [r1, #0]
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	3201      	adds	r2, #1
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	e790      	b.n	80080b2 <_dtoa_r+0x62a>
 8008190:	4ba3      	ldr	r3, [pc, #652]	; (8008420 <_dtoa_r+0x998>)
 8008192:	2200      	movs	r2, #0
 8008194:	f7f8 fa38 	bl	8000608 <__aeabi_dmul>
 8008198:	2200      	movs	r2, #0
 800819a:	2300      	movs	r3, #0
 800819c:	4606      	mov	r6, r0
 800819e:	460f      	mov	r7, r1
 80081a0:	f7f8 fc9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d09e      	beq.n	80080e6 <_dtoa_r+0x65e>
 80081a8:	e7d0      	b.n	800814c <_dtoa_r+0x6c4>
 80081aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ac:	2a00      	cmp	r2, #0
 80081ae:	f000 80ca 	beq.w	8008346 <_dtoa_r+0x8be>
 80081b2:	9a07      	ldr	r2, [sp, #28]
 80081b4:	2a01      	cmp	r2, #1
 80081b6:	f300 80ad 	bgt.w	8008314 <_dtoa_r+0x88c>
 80081ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081bc:	2a00      	cmp	r2, #0
 80081be:	f000 80a5 	beq.w	800830c <_dtoa_r+0x884>
 80081c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081c6:	9e08      	ldr	r6, [sp, #32]
 80081c8:	9d05      	ldr	r5, [sp, #20]
 80081ca:	9a05      	ldr	r2, [sp, #20]
 80081cc:	441a      	add	r2, r3
 80081ce:	9205      	str	r2, [sp, #20]
 80081d0:	9a06      	ldr	r2, [sp, #24]
 80081d2:	2101      	movs	r1, #1
 80081d4:	441a      	add	r2, r3
 80081d6:	4620      	mov	r0, r4
 80081d8:	9206      	str	r2, [sp, #24]
 80081da:	f000 fc87 	bl	8008aec <__i2b>
 80081de:	4607      	mov	r7, r0
 80081e0:	b165      	cbz	r5, 80081fc <_dtoa_r+0x774>
 80081e2:	9b06      	ldr	r3, [sp, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dd09      	ble.n	80081fc <_dtoa_r+0x774>
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	9a05      	ldr	r2, [sp, #20]
 80081ec:	bfa8      	it	ge
 80081ee:	462b      	movge	r3, r5
 80081f0:	1ad2      	subs	r2, r2, r3
 80081f2:	9205      	str	r2, [sp, #20]
 80081f4:	9a06      	ldr	r2, [sp, #24]
 80081f6:	1aed      	subs	r5, r5, r3
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	9306      	str	r3, [sp, #24]
 80081fc:	9b08      	ldr	r3, [sp, #32]
 80081fe:	b1f3      	cbz	r3, 800823e <_dtoa_r+0x7b6>
 8008200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 80a3 	beq.w	800834e <_dtoa_r+0x8c6>
 8008208:	2e00      	cmp	r6, #0
 800820a:	dd10      	ble.n	800822e <_dtoa_r+0x7a6>
 800820c:	4639      	mov	r1, r7
 800820e:	4632      	mov	r2, r6
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fd2b 	bl	8008c6c <__pow5mult>
 8008216:	4652      	mov	r2, sl
 8008218:	4601      	mov	r1, r0
 800821a:	4607      	mov	r7, r0
 800821c:	4620      	mov	r0, r4
 800821e:	f000 fc7b 	bl	8008b18 <__multiply>
 8008222:	4651      	mov	r1, sl
 8008224:	4680      	mov	r8, r0
 8008226:	4620      	mov	r0, r4
 8008228:	f000 fb60 	bl	80088ec <_Bfree>
 800822c:	46c2      	mov	sl, r8
 800822e:	9b08      	ldr	r3, [sp, #32]
 8008230:	1b9a      	subs	r2, r3, r6
 8008232:	d004      	beq.n	800823e <_dtoa_r+0x7b6>
 8008234:	4651      	mov	r1, sl
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fd18 	bl	8008c6c <__pow5mult>
 800823c:	4682      	mov	sl, r0
 800823e:	2101      	movs	r1, #1
 8008240:	4620      	mov	r0, r4
 8008242:	f000 fc53 	bl	8008aec <__i2b>
 8008246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008248:	2b00      	cmp	r3, #0
 800824a:	4606      	mov	r6, r0
 800824c:	f340 8081 	ble.w	8008352 <_dtoa_r+0x8ca>
 8008250:	461a      	mov	r2, r3
 8008252:	4601      	mov	r1, r0
 8008254:	4620      	mov	r0, r4
 8008256:	f000 fd09 	bl	8008c6c <__pow5mult>
 800825a:	9b07      	ldr	r3, [sp, #28]
 800825c:	2b01      	cmp	r3, #1
 800825e:	4606      	mov	r6, r0
 8008260:	dd7a      	ble.n	8008358 <_dtoa_r+0x8d0>
 8008262:	f04f 0800 	mov.w	r8, #0
 8008266:	6933      	ldr	r3, [r6, #16]
 8008268:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800826c:	6918      	ldr	r0, [r3, #16]
 800826e:	f000 fbef 	bl	8008a50 <__hi0bits>
 8008272:	f1c0 0020 	rsb	r0, r0, #32
 8008276:	9b06      	ldr	r3, [sp, #24]
 8008278:	4418      	add	r0, r3
 800827a:	f010 001f 	ands.w	r0, r0, #31
 800827e:	f000 8094 	beq.w	80083aa <_dtoa_r+0x922>
 8008282:	f1c0 0320 	rsb	r3, r0, #32
 8008286:	2b04      	cmp	r3, #4
 8008288:	f340 8085 	ble.w	8008396 <_dtoa_r+0x90e>
 800828c:	9b05      	ldr	r3, [sp, #20]
 800828e:	f1c0 001c 	rsb	r0, r0, #28
 8008292:	4403      	add	r3, r0
 8008294:	9305      	str	r3, [sp, #20]
 8008296:	9b06      	ldr	r3, [sp, #24]
 8008298:	4403      	add	r3, r0
 800829a:	4405      	add	r5, r0
 800829c:	9306      	str	r3, [sp, #24]
 800829e:	9b05      	ldr	r3, [sp, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dd05      	ble.n	80082b0 <_dtoa_r+0x828>
 80082a4:	4651      	mov	r1, sl
 80082a6:	461a      	mov	r2, r3
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 fd39 	bl	8008d20 <__lshift>
 80082ae:	4682      	mov	sl, r0
 80082b0:	9b06      	ldr	r3, [sp, #24]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dd05      	ble.n	80082c2 <_dtoa_r+0x83a>
 80082b6:	4631      	mov	r1, r6
 80082b8:	461a      	mov	r2, r3
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fd30 	bl	8008d20 <__lshift>
 80082c0:	4606      	mov	r6, r0
 80082c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d072      	beq.n	80083ae <_dtoa_r+0x926>
 80082c8:	4631      	mov	r1, r6
 80082ca:	4650      	mov	r0, sl
 80082cc:	f000 fd94 	bl	8008df8 <__mcmp>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	da6c      	bge.n	80083ae <_dtoa_r+0x926>
 80082d4:	2300      	movs	r3, #0
 80082d6:	4651      	mov	r1, sl
 80082d8:	220a      	movs	r2, #10
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 fb28 	bl	8008930 <__multadd>
 80082e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082e6:	4682      	mov	sl, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 81b0 	beq.w	800864e <_dtoa_r+0xbc6>
 80082ee:	2300      	movs	r3, #0
 80082f0:	4639      	mov	r1, r7
 80082f2:	220a      	movs	r2, #10
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 fb1b 	bl	8008930 <__multadd>
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	4607      	mov	r7, r0
 8008300:	f300 8096 	bgt.w	8008430 <_dtoa_r+0x9a8>
 8008304:	9b07      	ldr	r3, [sp, #28]
 8008306:	2b02      	cmp	r3, #2
 8008308:	dc59      	bgt.n	80083be <_dtoa_r+0x936>
 800830a:	e091      	b.n	8008430 <_dtoa_r+0x9a8>
 800830c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800830e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008312:	e758      	b.n	80081c6 <_dtoa_r+0x73e>
 8008314:	9b04      	ldr	r3, [sp, #16]
 8008316:	1e5e      	subs	r6, r3, #1
 8008318:	9b08      	ldr	r3, [sp, #32]
 800831a:	42b3      	cmp	r3, r6
 800831c:	bfbf      	itttt	lt
 800831e:	9b08      	ldrlt	r3, [sp, #32]
 8008320:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008322:	9608      	strlt	r6, [sp, #32]
 8008324:	1af3      	sublt	r3, r6, r3
 8008326:	bfb4      	ite	lt
 8008328:	18d2      	addlt	r2, r2, r3
 800832a:	1b9e      	subge	r6, r3, r6
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	bfbc      	itt	lt
 8008330:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008332:	2600      	movlt	r6, #0
 8008334:	2b00      	cmp	r3, #0
 8008336:	bfb7      	itett	lt
 8008338:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800833c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008340:	1a9d      	sublt	r5, r3, r2
 8008342:	2300      	movlt	r3, #0
 8008344:	e741      	b.n	80081ca <_dtoa_r+0x742>
 8008346:	9e08      	ldr	r6, [sp, #32]
 8008348:	9d05      	ldr	r5, [sp, #20]
 800834a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800834c:	e748      	b.n	80081e0 <_dtoa_r+0x758>
 800834e:	9a08      	ldr	r2, [sp, #32]
 8008350:	e770      	b.n	8008234 <_dtoa_r+0x7ac>
 8008352:	9b07      	ldr	r3, [sp, #28]
 8008354:	2b01      	cmp	r3, #1
 8008356:	dc19      	bgt.n	800838c <_dtoa_r+0x904>
 8008358:	9b02      	ldr	r3, [sp, #8]
 800835a:	b9bb      	cbnz	r3, 800838c <_dtoa_r+0x904>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008362:	b99b      	cbnz	r3, 800838c <_dtoa_r+0x904>
 8008364:	9b03      	ldr	r3, [sp, #12]
 8008366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800836a:	0d1b      	lsrs	r3, r3, #20
 800836c:	051b      	lsls	r3, r3, #20
 800836e:	b183      	cbz	r3, 8008392 <_dtoa_r+0x90a>
 8008370:	9b05      	ldr	r3, [sp, #20]
 8008372:	3301      	adds	r3, #1
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	9b06      	ldr	r3, [sp, #24]
 8008378:	3301      	adds	r3, #1
 800837a:	9306      	str	r3, [sp, #24]
 800837c:	f04f 0801 	mov.w	r8, #1
 8008380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008382:	2b00      	cmp	r3, #0
 8008384:	f47f af6f 	bne.w	8008266 <_dtoa_r+0x7de>
 8008388:	2001      	movs	r0, #1
 800838a:	e774      	b.n	8008276 <_dtoa_r+0x7ee>
 800838c:	f04f 0800 	mov.w	r8, #0
 8008390:	e7f6      	b.n	8008380 <_dtoa_r+0x8f8>
 8008392:	4698      	mov	r8, r3
 8008394:	e7f4      	b.n	8008380 <_dtoa_r+0x8f8>
 8008396:	d082      	beq.n	800829e <_dtoa_r+0x816>
 8008398:	9a05      	ldr	r2, [sp, #20]
 800839a:	331c      	adds	r3, #28
 800839c:	441a      	add	r2, r3
 800839e:	9205      	str	r2, [sp, #20]
 80083a0:	9a06      	ldr	r2, [sp, #24]
 80083a2:	441a      	add	r2, r3
 80083a4:	441d      	add	r5, r3
 80083a6:	9206      	str	r2, [sp, #24]
 80083a8:	e779      	b.n	800829e <_dtoa_r+0x816>
 80083aa:	4603      	mov	r3, r0
 80083ac:	e7f4      	b.n	8008398 <_dtoa_r+0x910>
 80083ae:	9b04      	ldr	r3, [sp, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dc37      	bgt.n	8008424 <_dtoa_r+0x99c>
 80083b4:	9b07      	ldr	r3, [sp, #28]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	dd34      	ble.n	8008424 <_dtoa_r+0x99c>
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	9b01      	ldr	r3, [sp, #4]
 80083c0:	b963      	cbnz	r3, 80083dc <_dtoa_r+0x954>
 80083c2:	4631      	mov	r1, r6
 80083c4:	2205      	movs	r2, #5
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 fab2 	bl	8008930 <__multadd>
 80083cc:	4601      	mov	r1, r0
 80083ce:	4606      	mov	r6, r0
 80083d0:	4650      	mov	r0, sl
 80083d2:	f000 fd11 	bl	8008df8 <__mcmp>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f73f adbb 	bgt.w	8007f52 <_dtoa_r+0x4ca>
 80083dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083de:	9d00      	ldr	r5, [sp, #0]
 80083e0:	ea6f 0b03 	mvn.w	fp, r3
 80083e4:	f04f 0800 	mov.w	r8, #0
 80083e8:	4631      	mov	r1, r6
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 fa7e 	bl	80088ec <_Bfree>
 80083f0:	2f00      	cmp	r7, #0
 80083f2:	f43f aeab 	beq.w	800814c <_dtoa_r+0x6c4>
 80083f6:	f1b8 0f00 	cmp.w	r8, #0
 80083fa:	d005      	beq.n	8008408 <_dtoa_r+0x980>
 80083fc:	45b8      	cmp	r8, r7
 80083fe:	d003      	beq.n	8008408 <_dtoa_r+0x980>
 8008400:	4641      	mov	r1, r8
 8008402:	4620      	mov	r0, r4
 8008404:	f000 fa72 	bl	80088ec <_Bfree>
 8008408:	4639      	mov	r1, r7
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fa6e 	bl	80088ec <_Bfree>
 8008410:	e69c      	b.n	800814c <_dtoa_r+0x6c4>
 8008412:	2600      	movs	r6, #0
 8008414:	4637      	mov	r7, r6
 8008416:	e7e1      	b.n	80083dc <_dtoa_r+0x954>
 8008418:	46bb      	mov	fp, r7
 800841a:	4637      	mov	r7, r6
 800841c:	e599      	b.n	8007f52 <_dtoa_r+0x4ca>
 800841e:	bf00      	nop
 8008420:	40240000 	.word	0x40240000
 8008424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 80c8 	beq.w	80085bc <_dtoa_r+0xb34>
 800842c:	9b04      	ldr	r3, [sp, #16]
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	2d00      	cmp	r5, #0
 8008432:	dd05      	ble.n	8008440 <_dtoa_r+0x9b8>
 8008434:	4639      	mov	r1, r7
 8008436:	462a      	mov	r2, r5
 8008438:	4620      	mov	r0, r4
 800843a:	f000 fc71 	bl	8008d20 <__lshift>
 800843e:	4607      	mov	r7, r0
 8008440:	f1b8 0f00 	cmp.w	r8, #0
 8008444:	d05b      	beq.n	80084fe <_dtoa_r+0xa76>
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	4620      	mov	r0, r4
 800844a:	f000 fa0f 	bl	800886c <_Balloc>
 800844e:	4605      	mov	r5, r0
 8008450:	b928      	cbnz	r0, 800845e <_dtoa_r+0x9d6>
 8008452:	4b83      	ldr	r3, [pc, #524]	; (8008660 <_dtoa_r+0xbd8>)
 8008454:	4602      	mov	r2, r0
 8008456:	f240 21ef 	movw	r1, #751	; 0x2ef
 800845a:	f7ff bb2e 	b.w	8007aba <_dtoa_r+0x32>
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	3202      	adds	r2, #2
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	f107 010c 	add.w	r1, r7, #12
 8008468:	300c      	adds	r0, #12
 800846a:	f7ff fa70 	bl	800794e <memcpy>
 800846e:	2201      	movs	r2, #1
 8008470:	4629      	mov	r1, r5
 8008472:	4620      	mov	r0, r4
 8008474:	f000 fc54 	bl	8008d20 <__lshift>
 8008478:	9b00      	ldr	r3, [sp, #0]
 800847a:	3301      	adds	r3, #1
 800847c:	9304      	str	r3, [sp, #16]
 800847e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008482:	4413      	add	r3, r2
 8008484:	9308      	str	r3, [sp, #32]
 8008486:	9b02      	ldr	r3, [sp, #8]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	46b8      	mov	r8, r7
 800848e:	9306      	str	r3, [sp, #24]
 8008490:	4607      	mov	r7, r0
 8008492:	9b04      	ldr	r3, [sp, #16]
 8008494:	4631      	mov	r1, r6
 8008496:	3b01      	subs	r3, #1
 8008498:	4650      	mov	r0, sl
 800849a:	9301      	str	r3, [sp, #4]
 800849c:	f7ff fa6c 	bl	8007978 <quorem>
 80084a0:	4641      	mov	r1, r8
 80084a2:	9002      	str	r0, [sp, #8]
 80084a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084a8:	4650      	mov	r0, sl
 80084aa:	f000 fca5 	bl	8008df8 <__mcmp>
 80084ae:	463a      	mov	r2, r7
 80084b0:	9005      	str	r0, [sp, #20]
 80084b2:	4631      	mov	r1, r6
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 fcbb 	bl	8008e30 <__mdiff>
 80084ba:	68c2      	ldr	r2, [r0, #12]
 80084bc:	4605      	mov	r5, r0
 80084be:	bb02      	cbnz	r2, 8008502 <_dtoa_r+0xa7a>
 80084c0:	4601      	mov	r1, r0
 80084c2:	4650      	mov	r0, sl
 80084c4:	f000 fc98 	bl	8008df8 <__mcmp>
 80084c8:	4602      	mov	r2, r0
 80084ca:	4629      	mov	r1, r5
 80084cc:	4620      	mov	r0, r4
 80084ce:	9209      	str	r2, [sp, #36]	; 0x24
 80084d0:	f000 fa0c 	bl	80088ec <_Bfree>
 80084d4:	9b07      	ldr	r3, [sp, #28]
 80084d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084d8:	9d04      	ldr	r5, [sp, #16]
 80084da:	ea43 0102 	orr.w	r1, r3, r2
 80084de:	9b06      	ldr	r3, [sp, #24]
 80084e0:	4319      	orrs	r1, r3
 80084e2:	d110      	bne.n	8008506 <_dtoa_r+0xa7e>
 80084e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084e8:	d029      	beq.n	800853e <_dtoa_r+0xab6>
 80084ea:	9b05      	ldr	r3, [sp, #20]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	dd02      	ble.n	80084f6 <_dtoa_r+0xa6e>
 80084f0:	9b02      	ldr	r3, [sp, #8]
 80084f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80084f6:	9b01      	ldr	r3, [sp, #4]
 80084f8:	f883 9000 	strb.w	r9, [r3]
 80084fc:	e774      	b.n	80083e8 <_dtoa_r+0x960>
 80084fe:	4638      	mov	r0, r7
 8008500:	e7ba      	b.n	8008478 <_dtoa_r+0x9f0>
 8008502:	2201      	movs	r2, #1
 8008504:	e7e1      	b.n	80084ca <_dtoa_r+0xa42>
 8008506:	9b05      	ldr	r3, [sp, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	db04      	blt.n	8008516 <_dtoa_r+0xa8e>
 800850c:	9907      	ldr	r1, [sp, #28]
 800850e:	430b      	orrs	r3, r1
 8008510:	9906      	ldr	r1, [sp, #24]
 8008512:	430b      	orrs	r3, r1
 8008514:	d120      	bne.n	8008558 <_dtoa_r+0xad0>
 8008516:	2a00      	cmp	r2, #0
 8008518:	dded      	ble.n	80084f6 <_dtoa_r+0xa6e>
 800851a:	4651      	mov	r1, sl
 800851c:	2201      	movs	r2, #1
 800851e:	4620      	mov	r0, r4
 8008520:	f000 fbfe 	bl	8008d20 <__lshift>
 8008524:	4631      	mov	r1, r6
 8008526:	4682      	mov	sl, r0
 8008528:	f000 fc66 	bl	8008df8 <__mcmp>
 800852c:	2800      	cmp	r0, #0
 800852e:	dc03      	bgt.n	8008538 <_dtoa_r+0xab0>
 8008530:	d1e1      	bne.n	80084f6 <_dtoa_r+0xa6e>
 8008532:	f019 0f01 	tst.w	r9, #1
 8008536:	d0de      	beq.n	80084f6 <_dtoa_r+0xa6e>
 8008538:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800853c:	d1d8      	bne.n	80084f0 <_dtoa_r+0xa68>
 800853e:	9a01      	ldr	r2, [sp, #4]
 8008540:	2339      	movs	r3, #57	; 0x39
 8008542:	7013      	strb	r3, [r2, #0]
 8008544:	462b      	mov	r3, r5
 8008546:	461d      	mov	r5, r3
 8008548:	3b01      	subs	r3, #1
 800854a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800854e:	2a39      	cmp	r2, #57	; 0x39
 8008550:	d06c      	beq.n	800862c <_dtoa_r+0xba4>
 8008552:	3201      	adds	r2, #1
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	e747      	b.n	80083e8 <_dtoa_r+0x960>
 8008558:	2a00      	cmp	r2, #0
 800855a:	dd07      	ble.n	800856c <_dtoa_r+0xae4>
 800855c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008560:	d0ed      	beq.n	800853e <_dtoa_r+0xab6>
 8008562:	9a01      	ldr	r2, [sp, #4]
 8008564:	f109 0301 	add.w	r3, r9, #1
 8008568:	7013      	strb	r3, [r2, #0]
 800856a:	e73d      	b.n	80083e8 <_dtoa_r+0x960>
 800856c:	9b04      	ldr	r3, [sp, #16]
 800856e:	9a08      	ldr	r2, [sp, #32]
 8008570:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008574:	4293      	cmp	r3, r2
 8008576:	d043      	beq.n	8008600 <_dtoa_r+0xb78>
 8008578:	4651      	mov	r1, sl
 800857a:	2300      	movs	r3, #0
 800857c:	220a      	movs	r2, #10
 800857e:	4620      	mov	r0, r4
 8008580:	f000 f9d6 	bl	8008930 <__multadd>
 8008584:	45b8      	cmp	r8, r7
 8008586:	4682      	mov	sl, r0
 8008588:	f04f 0300 	mov.w	r3, #0
 800858c:	f04f 020a 	mov.w	r2, #10
 8008590:	4641      	mov	r1, r8
 8008592:	4620      	mov	r0, r4
 8008594:	d107      	bne.n	80085a6 <_dtoa_r+0xb1e>
 8008596:	f000 f9cb 	bl	8008930 <__multadd>
 800859a:	4680      	mov	r8, r0
 800859c:	4607      	mov	r7, r0
 800859e:	9b04      	ldr	r3, [sp, #16]
 80085a0:	3301      	adds	r3, #1
 80085a2:	9304      	str	r3, [sp, #16]
 80085a4:	e775      	b.n	8008492 <_dtoa_r+0xa0a>
 80085a6:	f000 f9c3 	bl	8008930 <__multadd>
 80085aa:	4639      	mov	r1, r7
 80085ac:	4680      	mov	r8, r0
 80085ae:	2300      	movs	r3, #0
 80085b0:	220a      	movs	r2, #10
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 f9bc 	bl	8008930 <__multadd>
 80085b8:	4607      	mov	r7, r0
 80085ba:	e7f0      	b.n	800859e <_dtoa_r+0xb16>
 80085bc:	9b04      	ldr	r3, [sp, #16]
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	9d00      	ldr	r5, [sp, #0]
 80085c2:	4631      	mov	r1, r6
 80085c4:	4650      	mov	r0, sl
 80085c6:	f7ff f9d7 	bl	8007978 <quorem>
 80085ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80085ce:	9b00      	ldr	r3, [sp, #0]
 80085d0:	f805 9b01 	strb.w	r9, [r5], #1
 80085d4:	1aea      	subs	r2, r5, r3
 80085d6:	9b01      	ldr	r3, [sp, #4]
 80085d8:	4293      	cmp	r3, r2
 80085da:	dd07      	ble.n	80085ec <_dtoa_r+0xb64>
 80085dc:	4651      	mov	r1, sl
 80085de:	2300      	movs	r3, #0
 80085e0:	220a      	movs	r2, #10
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 f9a4 	bl	8008930 <__multadd>
 80085e8:	4682      	mov	sl, r0
 80085ea:	e7ea      	b.n	80085c2 <_dtoa_r+0xb3a>
 80085ec:	9b01      	ldr	r3, [sp, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bfc8      	it	gt
 80085f2:	461d      	movgt	r5, r3
 80085f4:	9b00      	ldr	r3, [sp, #0]
 80085f6:	bfd8      	it	le
 80085f8:	2501      	movle	r5, #1
 80085fa:	441d      	add	r5, r3
 80085fc:	f04f 0800 	mov.w	r8, #0
 8008600:	4651      	mov	r1, sl
 8008602:	2201      	movs	r2, #1
 8008604:	4620      	mov	r0, r4
 8008606:	f000 fb8b 	bl	8008d20 <__lshift>
 800860a:	4631      	mov	r1, r6
 800860c:	4682      	mov	sl, r0
 800860e:	f000 fbf3 	bl	8008df8 <__mcmp>
 8008612:	2800      	cmp	r0, #0
 8008614:	dc96      	bgt.n	8008544 <_dtoa_r+0xabc>
 8008616:	d102      	bne.n	800861e <_dtoa_r+0xb96>
 8008618:	f019 0f01 	tst.w	r9, #1
 800861c:	d192      	bne.n	8008544 <_dtoa_r+0xabc>
 800861e:	462b      	mov	r3, r5
 8008620:	461d      	mov	r5, r3
 8008622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008626:	2a30      	cmp	r2, #48	; 0x30
 8008628:	d0fa      	beq.n	8008620 <_dtoa_r+0xb98>
 800862a:	e6dd      	b.n	80083e8 <_dtoa_r+0x960>
 800862c:	9a00      	ldr	r2, [sp, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d189      	bne.n	8008546 <_dtoa_r+0xabe>
 8008632:	f10b 0b01 	add.w	fp, fp, #1
 8008636:	2331      	movs	r3, #49	; 0x31
 8008638:	e796      	b.n	8008568 <_dtoa_r+0xae0>
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <_dtoa_r+0xbdc>)
 800863c:	f7ff ba99 	b.w	8007b72 <_dtoa_r+0xea>
 8008640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008642:	2b00      	cmp	r3, #0
 8008644:	f47f aa6d 	bne.w	8007b22 <_dtoa_r+0x9a>
 8008648:	4b07      	ldr	r3, [pc, #28]	; (8008668 <_dtoa_r+0xbe0>)
 800864a:	f7ff ba92 	b.w	8007b72 <_dtoa_r+0xea>
 800864e:	9b01      	ldr	r3, [sp, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	dcb5      	bgt.n	80085c0 <_dtoa_r+0xb38>
 8008654:	9b07      	ldr	r3, [sp, #28]
 8008656:	2b02      	cmp	r3, #2
 8008658:	f73f aeb1 	bgt.w	80083be <_dtoa_r+0x936>
 800865c:	e7b0      	b.n	80085c0 <_dtoa_r+0xb38>
 800865e:	bf00      	nop
 8008660:	0800b1a5 	.word	0x0800b1a5
 8008664:	0800b100 	.word	0x0800b100
 8008668:	0800b129 	.word	0x0800b129

0800866c <_free_r>:
 800866c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800866e:	2900      	cmp	r1, #0
 8008670:	d044      	beq.n	80086fc <_free_r+0x90>
 8008672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008676:	9001      	str	r0, [sp, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	f1a1 0404 	sub.w	r4, r1, #4
 800867e:	bfb8      	it	lt
 8008680:	18e4      	addlt	r4, r4, r3
 8008682:	f000 f8e7 	bl	8008854 <__malloc_lock>
 8008686:	4a1e      	ldr	r2, [pc, #120]	; (8008700 <_free_r+0x94>)
 8008688:	9801      	ldr	r0, [sp, #4]
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	b933      	cbnz	r3, 800869c <_free_r+0x30>
 800868e:	6063      	str	r3, [r4, #4]
 8008690:	6014      	str	r4, [r2, #0]
 8008692:	b003      	add	sp, #12
 8008694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008698:	f000 b8e2 	b.w	8008860 <__malloc_unlock>
 800869c:	42a3      	cmp	r3, r4
 800869e:	d908      	bls.n	80086b2 <_free_r+0x46>
 80086a0:	6825      	ldr	r5, [r4, #0]
 80086a2:	1961      	adds	r1, r4, r5
 80086a4:	428b      	cmp	r3, r1
 80086a6:	bf01      	itttt	eq
 80086a8:	6819      	ldreq	r1, [r3, #0]
 80086aa:	685b      	ldreq	r3, [r3, #4]
 80086ac:	1949      	addeq	r1, r1, r5
 80086ae:	6021      	streq	r1, [r4, #0]
 80086b0:	e7ed      	b.n	800868e <_free_r+0x22>
 80086b2:	461a      	mov	r2, r3
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	b10b      	cbz	r3, 80086bc <_free_r+0x50>
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	d9fa      	bls.n	80086b2 <_free_r+0x46>
 80086bc:	6811      	ldr	r1, [r2, #0]
 80086be:	1855      	adds	r5, r2, r1
 80086c0:	42a5      	cmp	r5, r4
 80086c2:	d10b      	bne.n	80086dc <_free_r+0x70>
 80086c4:	6824      	ldr	r4, [r4, #0]
 80086c6:	4421      	add	r1, r4
 80086c8:	1854      	adds	r4, r2, r1
 80086ca:	42a3      	cmp	r3, r4
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	d1e0      	bne.n	8008692 <_free_r+0x26>
 80086d0:	681c      	ldr	r4, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	6053      	str	r3, [r2, #4]
 80086d6:	440c      	add	r4, r1
 80086d8:	6014      	str	r4, [r2, #0]
 80086da:	e7da      	b.n	8008692 <_free_r+0x26>
 80086dc:	d902      	bls.n	80086e4 <_free_r+0x78>
 80086de:	230c      	movs	r3, #12
 80086e0:	6003      	str	r3, [r0, #0]
 80086e2:	e7d6      	b.n	8008692 <_free_r+0x26>
 80086e4:	6825      	ldr	r5, [r4, #0]
 80086e6:	1961      	adds	r1, r4, r5
 80086e8:	428b      	cmp	r3, r1
 80086ea:	bf04      	itt	eq
 80086ec:	6819      	ldreq	r1, [r3, #0]
 80086ee:	685b      	ldreq	r3, [r3, #4]
 80086f0:	6063      	str	r3, [r4, #4]
 80086f2:	bf04      	itt	eq
 80086f4:	1949      	addeq	r1, r1, r5
 80086f6:	6021      	streq	r1, [r4, #0]
 80086f8:	6054      	str	r4, [r2, #4]
 80086fa:	e7ca      	b.n	8008692 <_free_r+0x26>
 80086fc:	b003      	add	sp, #12
 80086fe:	bd30      	pop	{r4, r5, pc}
 8008700:	20004430 	.word	0x20004430

08008704 <malloc>:
 8008704:	4b02      	ldr	r3, [pc, #8]	; (8008710 <malloc+0xc>)
 8008706:	4601      	mov	r1, r0
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	f000 b823 	b.w	8008754 <_malloc_r>
 800870e:	bf00      	nop
 8008710:	20000068 	.word	0x20000068

08008714 <sbrk_aligned>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	4e0e      	ldr	r6, [pc, #56]	; (8008750 <sbrk_aligned+0x3c>)
 8008718:	460c      	mov	r4, r1
 800871a:	6831      	ldr	r1, [r6, #0]
 800871c:	4605      	mov	r5, r0
 800871e:	b911      	cbnz	r1, 8008726 <sbrk_aligned+0x12>
 8008720:	f001 ffe2 	bl	800a6e8 <_sbrk_r>
 8008724:	6030      	str	r0, [r6, #0]
 8008726:	4621      	mov	r1, r4
 8008728:	4628      	mov	r0, r5
 800872a:	f001 ffdd 	bl	800a6e8 <_sbrk_r>
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	d00a      	beq.n	8008748 <sbrk_aligned+0x34>
 8008732:	1cc4      	adds	r4, r0, #3
 8008734:	f024 0403 	bic.w	r4, r4, #3
 8008738:	42a0      	cmp	r0, r4
 800873a:	d007      	beq.n	800874c <sbrk_aligned+0x38>
 800873c:	1a21      	subs	r1, r4, r0
 800873e:	4628      	mov	r0, r5
 8008740:	f001 ffd2 	bl	800a6e8 <_sbrk_r>
 8008744:	3001      	adds	r0, #1
 8008746:	d101      	bne.n	800874c <sbrk_aligned+0x38>
 8008748:	f04f 34ff 	mov.w	r4, #4294967295
 800874c:	4620      	mov	r0, r4
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	20004434 	.word	0x20004434

08008754 <_malloc_r>:
 8008754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008758:	1ccd      	adds	r5, r1, #3
 800875a:	f025 0503 	bic.w	r5, r5, #3
 800875e:	3508      	adds	r5, #8
 8008760:	2d0c      	cmp	r5, #12
 8008762:	bf38      	it	cc
 8008764:	250c      	movcc	r5, #12
 8008766:	2d00      	cmp	r5, #0
 8008768:	4607      	mov	r7, r0
 800876a:	db01      	blt.n	8008770 <_malloc_r+0x1c>
 800876c:	42a9      	cmp	r1, r5
 800876e:	d905      	bls.n	800877c <_malloc_r+0x28>
 8008770:	230c      	movs	r3, #12
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	2600      	movs	r6, #0
 8008776:	4630      	mov	r0, r6
 8008778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800877c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008850 <_malloc_r+0xfc>
 8008780:	f000 f868 	bl	8008854 <__malloc_lock>
 8008784:	f8d8 3000 	ldr.w	r3, [r8]
 8008788:	461c      	mov	r4, r3
 800878a:	bb5c      	cbnz	r4, 80087e4 <_malloc_r+0x90>
 800878c:	4629      	mov	r1, r5
 800878e:	4638      	mov	r0, r7
 8008790:	f7ff ffc0 	bl	8008714 <sbrk_aligned>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	4604      	mov	r4, r0
 8008798:	d155      	bne.n	8008846 <_malloc_r+0xf2>
 800879a:	f8d8 4000 	ldr.w	r4, [r8]
 800879e:	4626      	mov	r6, r4
 80087a0:	2e00      	cmp	r6, #0
 80087a2:	d145      	bne.n	8008830 <_malloc_r+0xdc>
 80087a4:	2c00      	cmp	r4, #0
 80087a6:	d048      	beq.n	800883a <_malloc_r+0xe6>
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	4631      	mov	r1, r6
 80087ac:	4638      	mov	r0, r7
 80087ae:	eb04 0903 	add.w	r9, r4, r3
 80087b2:	f001 ff99 	bl	800a6e8 <_sbrk_r>
 80087b6:	4581      	cmp	r9, r0
 80087b8:	d13f      	bne.n	800883a <_malloc_r+0xe6>
 80087ba:	6821      	ldr	r1, [r4, #0]
 80087bc:	1a6d      	subs	r5, r5, r1
 80087be:	4629      	mov	r1, r5
 80087c0:	4638      	mov	r0, r7
 80087c2:	f7ff ffa7 	bl	8008714 <sbrk_aligned>
 80087c6:	3001      	adds	r0, #1
 80087c8:	d037      	beq.n	800883a <_malloc_r+0xe6>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	442b      	add	r3, r5
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	f8d8 3000 	ldr.w	r3, [r8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d038      	beq.n	800884a <_malloc_r+0xf6>
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	42a2      	cmp	r2, r4
 80087dc:	d12b      	bne.n	8008836 <_malloc_r+0xe2>
 80087de:	2200      	movs	r2, #0
 80087e0:	605a      	str	r2, [r3, #4]
 80087e2:	e00f      	b.n	8008804 <_malloc_r+0xb0>
 80087e4:	6822      	ldr	r2, [r4, #0]
 80087e6:	1b52      	subs	r2, r2, r5
 80087e8:	d41f      	bmi.n	800882a <_malloc_r+0xd6>
 80087ea:	2a0b      	cmp	r2, #11
 80087ec:	d917      	bls.n	800881e <_malloc_r+0xca>
 80087ee:	1961      	adds	r1, r4, r5
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	6025      	str	r5, [r4, #0]
 80087f4:	bf18      	it	ne
 80087f6:	6059      	strne	r1, [r3, #4]
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	bf08      	it	eq
 80087fc:	f8c8 1000 	streq.w	r1, [r8]
 8008800:	5162      	str	r2, [r4, r5]
 8008802:	604b      	str	r3, [r1, #4]
 8008804:	4638      	mov	r0, r7
 8008806:	f104 060b 	add.w	r6, r4, #11
 800880a:	f000 f829 	bl	8008860 <__malloc_unlock>
 800880e:	f026 0607 	bic.w	r6, r6, #7
 8008812:	1d23      	adds	r3, r4, #4
 8008814:	1af2      	subs	r2, r6, r3
 8008816:	d0ae      	beq.n	8008776 <_malloc_r+0x22>
 8008818:	1b9b      	subs	r3, r3, r6
 800881a:	50a3      	str	r3, [r4, r2]
 800881c:	e7ab      	b.n	8008776 <_malloc_r+0x22>
 800881e:	42a3      	cmp	r3, r4
 8008820:	6862      	ldr	r2, [r4, #4]
 8008822:	d1dd      	bne.n	80087e0 <_malloc_r+0x8c>
 8008824:	f8c8 2000 	str.w	r2, [r8]
 8008828:	e7ec      	b.n	8008804 <_malloc_r+0xb0>
 800882a:	4623      	mov	r3, r4
 800882c:	6864      	ldr	r4, [r4, #4]
 800882e:	e7ac      	b.n	800878a <_malloc_r+0x36>
 8008830:	4634      	mov	r4, r6
 8008832:	6876      	ldr	r6, [r6, #4]
 8008834:	e7b4      	b.n	80087a0 <_malloc_r+0x4c>
 8008836:	4613      	mov	r3, r2
 8008838:	e7cc      	b.n	80087d4 <_malloc_r+0x80>
 800883a:	230c      	movs	r3, #12
 800883c:	603b      	str	r3, [r7, #0]
 800883e:	4638      	mov	r0, r7
 8008840:	f000 f80e 	bl	8008860 <__malloc_unlock>
 8008844:	e797      	b.n	8008776 <_malloc_r+0x22>
 8008846:	6025      	str	r5, [r4, #0]
 8008848:	e7dc      	b.n	8008804 <_malloc_r+0xb0>
 800884a:	605b      	str	r3, [r3, #4]
 800884c:	deff      	udf	#255	; 0xff
 800884e:	bf00      	nop
 8008850:	20004430 	.word	0x20004430

08008854 <__malloc_lock>:
 8008854:	4801      	ldr	r0, [pc, #4]	; (800885c <__malloc_lock+0x8>)
 8008856:	f7ff b878 	b.w	800794a <__retarget_lock_acquire_recursive>
 800885a:	bf00      	nop
 800885c:	2000442c 	.word	0x2000442c

08008860 <__malloc_unlock>:
 8008860:	4801      	ldr	r0, [pc, #4]	; (8008868 <__malloc_unlock+0x8>)
 8008862:	f7ff b873 	b.w	800794c <__retarget_lock_release_recursive>
 8008866:	bf00      	nop
 8008868:	2000442c 	.word	0x2000442c

0800886c <_Balloc>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	69c6      	ldr	r6, [r0, #28]
 8008870:	4604      	mov	r4, r0
 8008872:	460d      	mov	r5, r1
 8008874:	b976      	cbnz	r6, 8008894 <_Balloc+0x28>
 8008876:	2010      	movs	r0, #16
 8008878:	f7ff ff44 	bl	8008704 <malloc>
 800887c:	4602      	mov	r2, r0
 800887e:	61e0      	str	r0, [r4, #28]
 8008880:	b920      	cbnz	r0, 800888c <_Balloc+0x20>
 8008882:	4b18      	ldr	r3, [pc, #96]	; (80088e4 <_Balloc+0x78>)
 8008884:	4818      	ldr	r0, [pc, #96]	; (80088e8 <_Balloc+0x7c>)
 8008886:	216b      	movs	r1, #107	; 0x6b
 8008888:	f001 ff46 	bl	800a718 <__assert_func>
 800888c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008890:	6006      	str	r6, [r0, #0]
 8008892:	60c6      	str	r6, [r0, #12]
 8008894:	69e6      	ldr	r6, [r4, #28]
 8008896:	68f3      	ldr	r3, [r6, #12]
 8008898:	b183      	cbz	r3, 80088bc <_Balloc+0x50>
 800889a:	69e3      	ldr	r3, [r4, #28]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088a2:	b9b8      	cbnz	r0, 80088d4 <_Balloc+0x68>
 80088a4:	2101      	movs	r1, #1
 80088a6:	fa01 f605 	lsl.w	r6, r1, r5
 80088aa:	1d72      	adds	r2, r6, #5
 80088ac:	0092      	lsls	r2, r2, #2
 80088ae:	4620      	mov	r0, r4
 80088b0:	f001 ff50 	bl	800a754 <_calloc_r>
 80088b4:	b160      	cbz	r0, 80088d0 <_Balloc+0x64>
 80088b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088ba:	e00e      	b.n	80088da <_Balloc+0x6e>
 80088bc:	2221      	movs	r2, #33	; 0x21
 80088be:	2104      	movs	r1, #4
 80088c0:	4620      	mov	r0, r4
 80088c2:	f001 ff47 	bl	800a754 <_calloc_r>
 80088c6:	69e3      	ldr	r3, [r4, #28]
 80088c8:	60f0      	str	r0, [r6, #12]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e4      	bne.n	800889a <_Balloc+0x2e>
 80088d0:	2000      	movs	r0, #0
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
 80088d4:	6802      	ldr	r2, [r0, #0]
 80088d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088da:	2300      	movs	r3, #0
 80088dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088e0:	e7f7      	b.n	80088d2 <_Balloc+0x66>
 80088e2:	bf00      	nop
 80088e4:	0800b136 	.word	0x0800b136
 80088e8:	0800b1b6 	.word	0x0800b1b6

080088ec <_Bfree>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	69c6      	ldr	r6, [r0, #28]
 80088f0:	4605      	mov	r5, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	b976      	cbnz	r6, 8008914 <_Bfree+0x28>
 80088f6:	2010      	movs	r0, #16
 80088f8:	f7ff ff04 	bl	8008704 <malloc>
 80088fc:	4602      	mov	r2, r0
 80088fe:	61e8      	str	r0, [r5, #28]
 8008900:	b920      	cbnz	r0, 800890c <_Bfree+0x20>
 8008902:	4b09      	ldr	r3, [pc, #36]	; (8008928 <_Bfree+0x3c>)
 8008904:	4809      	ldr	r0, [pc, #36]	; (800892c <_Bfree+0x40>)
 8008906:	218f      	movs	r1, #143	; 0x8f
 8008908:	f001 ff06 	bl	800a718 <__assert_func>
 800890c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008910:	6006      	str	r6, [r0, #0]
 8008912:	60c6      	str	r6, [r0, #12]
 8008914:	b13c      	cbz	r4, 8008926 <_Bfree+0x3a>
 8008916:	69eb      	ldr	r3, [r5, #28]
 8008918:	6862      	ldr	r2, [r4, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008920:	6021      	str	r1, [r4, #0]
 8008922:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	0800b136 	.word	0x0800b136
 800892c:	0800b1b6 	.word	0x0800b1b6

08008930 <__multadd>:
 8008930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008934:	690d      	ldr	r5, [r1, #16]
 8008936:	4607      	mov	r7, r0
 8008938:	460c      	mov	r4, r1
 800893a:	461e      	mov	r6, r3
 800893c:	f101 0c14 	add.w	ip, r1, #20
 8008940:	2000      	movs	r0, #0
 8008942:	f8dc 3000 	ldr.w	r3, [ip]
 8008946:	b299      	uxth	r1, r3
 8008948:	fb02 6101 	mla	r1, r2, r1, r6
 800894c:	0c1e      	lsrs	r6, r3, #16
 800894e:	0c0b      	lsrs	r3, r1, #16
 8008950:	fb02 3306 	mla	r3, r2, r6, r3
 8008954:	b289      	uxth	r1, r1
 8008956:	3001      	adds	r0, #1
 8008958:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800895c:	4285      	cmp	r5, r0
 800895e:	f84c 1b04 	str.w	r1, [ip], #4
 8008962:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008966:	dcec      	bgt.n	8008942 <__multadd+0x12>
 8008968:	b30e      	cbz	r6, 80089ae <__multadd+0x7e>
 800896a:	68a3      	ldr	r3, [r4, #8]
 800896c:	42ab      	cmp	r3, r5
 800896e:	dc19      	bgt.n	80089a4 <__multadd+0x74>
 8008970:	6861      	ldr	r1, [r4, #4]
 8008972:	4638      	mov	r0, r7
 8008974:	3101      	adds	r1, #1
 8008976:	f7ff ff79 	bl	800886c <_Balloc>
 800897a:	4680      	mov	r8, r0
 800897c:	b928      	cbnz	r0, 800898a <__multadd+0x5a>
 800897e:	4602      	mov	r2, r0
 8008980:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <__multadd+0x84>)
 8008982:	480d      	ldr	r0, [pc, #52]	; (80089b8 <__multadd+0x88>)
 8008984:	21ba      	movs	r1, #186	; 0xba
 8008986:	f001 fec7 	bl	800a718 <__assert_func>
 800898a:	6922      	ldr	r2, [r4, #16]
 800898c:	3202      	adds	r2, #2
 800898e:	f104 010c 	add.w	r1, r4, #12
 8008992:	0092      	lsls	r2, r2, #2
 8008994:	300c      	adds	r0, #12
 8008996:	f7fe ffda 	bl	800794e <memcpy>
 800899a:	4621      	mov	r1, r4
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff ffa5 	bl	80088ec <_Bfree>
 80089a2:	4644      	mov	r4, r8
 80089a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089a8:	3501      	adds	r5, #1
 80089aa:	615e      	str	r6, [r3, #20]
 80089ac:	6125      	str	r5, [r4, #16]
 80089ae:	4620      	mov	r0, r4
 80089b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b4:	0800b1a5 	.word	0x0800b1a5
 80089b8:	0800b1b6 	.word	0x0800b1b6

080089bc <__s2b>:
 80089bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c0:	460c      	mov	r4, r1
 80089c2:	4615      	mov	r5, r2
 80089c4:	461f      	mov	r7, r3
 80089c6:	2209      	movs	r2, #9
 80089c8:	3308      	adds	r3, #8
 80089ca:	4606      	mov	r6, r0
 80089cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80089d0:	2100      	movs	r1, #0
 80089d2:	2201      	movs	r2, #1
 80089d4:	429a      	cmp	r2, r3
 80089d6:	db09      	blt.n	80089ec <__s2b+0x30>
 80089d8:	4630      	mov	r0, r6
 80089da:	f7ff ff47 	bl	800886c <_Balloc>
 80089de:	b940      	cbnz	r0, 80089f2 <__s2b+0x36>
 80089e0:	4602      	mov	r2, r0
 80089e2:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <__s2b+0x8c>)
 80089e4:	4819      	ldr	r0, [pc, #100]	; (8008a4c <__s2b+0x90>)
 80089e6:	21d3      	movs	r1, #211	; 0xd3
 80089e8:	f001 fe96 	bl	800a718 <__assert_func>
 80089ec:	0052      	lsls	r2, r2, #1
 80089ee:	3101      	adds	r1, #1
 80089f0:	e7f0      	b.n	80089d4 <__s2b+0x18>
 80089f2:	9b08      	ldr	r3, [sp, #32]
 80089f4:	6143      	str	r3, [r0, #20]
 80089f6:	2d09      	cmp	r5, #9
 80089f8:	f04f 0301 	mov.w	r3, #1
 80089fc:	6103      	str	r3, [r0, #16]
 80089fe:	dd16      	ble.n	8008a2e <__s2b+0x72>
 8008a00:	f104 0909 	add.w	r9, r4, #9
 8008a04:	46c8      	mov	r8, r9
 8008a06:	442c      	add	r4, r5
 8008a08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008a0c:	4601      	mov	r1, r0
 8008a0e:	3b30      	subs	r3, #48	; 0x30
 8008a10:	220a      	movs	r2, #10
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7ff ff8c 	bl	8008930 <__multadd>
 8008a18:	45a0      	cmp	r8, r4
 8008a1a:	d1f5      	bne.n	8008a08 <__s2b+0x4c>
 8008a1c:	f1a5 0408 	sub.w	r4, r5, #8
 8008a20:	444c      	add	r4, r9
 8008a22:	1b2d      	subs	r5, r5, r4
 8008a24:	1963      	adds	r3, r4, r5
 8008a26:	42bb      	cmp	r3, r7
 8008a28:	db04      	blt.n	8008a34 <__s2b+0x78>
 8008a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2e:	340a      	adds	r4, #10
 8008a30:	2509      	movs	r5, #9
 8008a32:	e7f6      	b.n	8008a22 <__s2b+0x66>
 8008a34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a38:	4601      	mov	r1, r0
 8008a3a:	3b30      	subs	r3, #48	; 0x30
 8008a3c:	220a      	movs	r2, #10
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7ff ff76 	bl	8008930 <__multadd>
 8008a44:	e7ee      	b.n	8008a24 <__s2b+0x68>
 8008a46:	bf00      	nop
 8008a48:	0800b1a5 	.word	0x0800b1a5
 8008a4c:	0800b1b6 	.word	0x0800b1b6

08008a50 <__hi0bits>:
 8008a50:	0c03      	lsrs	r3, r0, #16
 8008a52:	041b      	lsls	r3, r3, #16
 8008a54:	b9d3      	cbnz	r3, 8008a8c <__hi0bits+0x3c>
 8008a56:	0400      	lsls	r0, r0, #16
 8008a58:	2310      	movs	r3, #16
 8008a5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a5e:	bf04      	itt	eq
 8008a60:	0200      	lsleq	r0, r0, #8
 8008a62:	3308      	addeq	r3, #8
 8008a64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a68:	bf04      	itt	eq
 8008a6a:	0100      	lsleq	r0, r0, #4
 8008a6c:	3304      	addeq	r3, #4
 8008a6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a72:	bf04      	itt	eq
 8008a74:	0080      	lsleq	r0, r0, #2
 8008a76:	3302      	addeq	r3, #2
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	db05      	blt.n	8008a88 <__hi0bits+0x38>
 8008a7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a80:	f103 0301 	add.w	r3, r3, #1
 8008a84:	bf08      	it	eq
 8008a86:	2320      	moveq	r3, #32
 8008a88:	4618      	mov	r0, r3
 8008a8a:	4770      	bx	lr
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	e7e4      	b.n	8008a5a <__hi0bits+0xa>

08008a90 <__lo0bits>:
 8008a90:	6803      	ldr	r3, [r0, #0]
 8008a92:	f013 0207 	ands.w	r2, r3, #7
 8008a96:	d00c      	beq.n	8008ab2 <__lo0bits+0x22>
 8008a98:	07d9      	lsls	r1, r3, #31
 8008a9a:	d422      	bmi.n	8008ae2 <__lo0bits+0x52>
 8008a9c:	079a      	lsls	r2, r3, #30
 8008a9e:	bf49      	itett	mi
 8008aa0:	085b      	lsrmi	r3, r3, #1
 8008aa2:	089b      	lsrpl	r3, r3, #2
 8008aa4:	6003      	strmi	r3, [r0, #0]
 8008aa6:	2201      	movmi	r2, #1
 8008aa8:	bf5c      	itt	pl
 8008aaa:	6003      	strpl	r3, [r0, #0]
 8008aac:	2202      	movpl	r2, #2
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4770      	bx	lr
 8008ab2:	b299      	uxth	r1, r3
 8008ab4:	b909      	cbnz	r1, 8008aba <__lo0bits+0x2a>
 8008ab6:	0c1b      	lsrs	r3, r3, #16
 8008ab8:	2210      	movs	r2, #16
 8008aba:	b2d9      	uxtb	r1, r3
 8008abc:	b909      	cbnz	r1, 8008ac2 <__lo0bits+0x32>
 8008abe:	3208      	adds	r2, #8
 8008ac0:	0a1b      	lsrs	r3, r3, #8
 8008ac2:	0719      	lsls	r1, r3, #28
 8008ac4:	bf04      	itt	eq
 8008ac6:	091b      	lsreq	r3, r3, #4
 8008ac8:	3204      	addeq	r2, #4
 8008aca:	0799      	lsls	r1, r3, #30
 8008acc:	bf04      	itt	eq
 8008ace:	089b      	lsreq	r3, r3, #2
 8008ad0:	3202      	addeq	r2, #2
 8008ad2:	07d9      	lsls	r1, r3, #31
 8008ad4:	d403      	bmi.n	8008ade <__lo0bits+0x4e>
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	f102 0201 	add.w	r2, r2, #1
 8008adc:	d003      	beq.n	8008ae6 <__lo0bits+0x56>
 8008ade:	6003      	str	r3, [r0, #0]
 8008ae0:	e7e5      	b.n	8008aae <__lo0bits+0x1e>
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	e7e3      	b.n	8008aae <__lo0bits+0x1e>
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	e7e1      	b.n	8008aae <__lo0bits+0x1e>
	...

08008aec <__i2b>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	460c      	mov	r4, r1
 8008af0:	2101      	movs	r1, #1
 8008af2:	f7ff febb 	bl	800886c <_Balloc>
 8008af6:	4602      	mov	r2, r0
 8008af8:	b928      	cbnz	r0, 8008b06 <__i2b+0x1a>
 8008afa:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <__i2b+0x24>)
 8008afc:	4805      	ldr	r0, [pc, #20]	; (8008b14 <__i2b+0x28>)
 8008afe:	f240 1145 	movw	r1, #325	; 0x145
 8008b02:	f001 fe09 	bl	800a718 <__assert_func>
 8008b06:	2301      	movs	r3, #1
 8008b08:	6144      	str	r4, [r0, #20]
 8008b0a:	6103      	str	r3, [r0, #16]
 8008b0c:	bd10      	pop	{r4, pc}
 8008b0e:	bf00      	nop
 8008b10:	0800b1a5 	.word	0x0800b1a5
 8008b14:	0800b1b6 	.word	0x0800b1b6

08008b18 <__multiply>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	4691      	mov	r9, r2
 8008b1e:	690a      	ldr	r2, [r1, #16]
 8008b20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	bfb8      	it	lt
 8008b28:	460b      	movlt	r3, r1
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	bfbc      	itt	lt
 8008b2e:	464c      	movlt	r4, r9
 8008b30:	4699      	movlt	r9, r3
 8008b32:	6927      	ldr	r7, [r4, #16]
 8008b34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b38:	68a3      	ldr	r3, [r4, #8]
 8008b3a:	6861      	ldr	r1, [r4, #4]
 8008b3c:	eb07 060a 	add.w	r6, r7, sl
 8008b40:	42b3      	cmp	r3, r6
 8008b42:	b085      	sub	sp, #20
 8008b44:	bfb8      	it	lt
 8008b46:	3101      	addlt	r1, #1
 8008b48:	f7ff fe90 	bl	800886c <_Balloc>
 8008b4c:	b930      	cbnz	r0, 8008b5c <__multiply+0x44>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	4b44      	ldr	r3, [pc, #272]	; (8008c64 <__multiply+0x14c>)
 8008b52:	4845      	ldr	r0, [pc, #276]	; (8008c68 <__multiply+0x150>)
 8008b54:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008b58:	f001 fdde 	bl	800a718 <__assert_func>
 8008b5c:	f100 0514 	add.w	r5, r0, #20
 8008b60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b64:	462b      	mov	r3, r5
 8008b66:	2200      	movs	r2, #0
 8008b68:	4543      	cmp	r3, r8
 8008b6a:	d321      	bcc.n	8008bb0 <__multiply+0x98>
 8008b6c:	f104 0314 	add.w	r3, r4, #20
 8008b70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b74:	f109 0314 	add.w	r3, r9, #20
 8008b78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b7c:	9202      	str	r2, [sp, #8]
 8008b7e:	1b3a      	subs	r2, r7, r4
 8008b80:	3a15      	subs	r2, #21
 8008b82:	f022 0203 	bic.w	r2, r2, #3
 8008b86:	3204      	adds	r2, #4
 8008b88:	f104 0115 	add.w	r1, r4, #21
 8008b8c:	428f      	cmp	r7, r1
 8008b8e:	bf38      	it	cc
 8008b90:	2204      	movcc	r2, #4
 8008b92:	9201      	str	r2, [sp, #4]
 8008b94:	9a02      	ldr	r2, [sp, #8]
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d80c      	bhi.n	8008bb6 <__multiply+0x9e>
 8008b9c:	2e00      	cmp	r6, #0
 8008b9e:	dd03      	ble.n	8008ba8 <__multiply+0x90>
 8008ba0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d05b      	beq.n	8008c60 <__multiply+0x148>
 8008ba8:	6106      	str	r6, [r0, #16]
 8008baa:	b005      	add	sp, #20
 8008bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb0:	f843 2b04 	str.w	r2, [r3], #4
 8008bb4:	e7d8      	b.n	8008b68 <__multiply+0x50>
 8008bb6:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bba:	f1ba 0f00 	cmp.w	sl, #0
 8008bbe:	d024      	beq.n	8008c0a <__multiply+0xf2>
 8008bc0:	f104 0e14 	add.w	lr, r4, #20
 8008bc4:	46a9      	mov	r9, r5
 8008bc6:	f04f 0c00 	mov.w	ip, #0
 8008bca:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008bce:	f8d9 1000 	ldr.w	r1, [r9]
 8008bd2:	fa1f fb82 	uxth.w	fp, r2
 8008bd6:	b289      	uxth	r1, r1
 8008bd8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008bdc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008be0:	f8d9 2000 	ldr.w	r2, [r9]
 8008be4:	4461      	add	r1, ip
 8008be6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bea:	fb0a c20b 	mla	r2, sl, fp, ip
 8008bee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008bf2:	b289      	uxth	r1, r1
 8008bf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008bf8:	4577      	cmp	r7, lr
 8008bfa:	f849 1b04 	str.w	r1, [r9], #4
 8008bfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c02:	d8e2      	bhi.n	8008bca <__multiply+0xb2>
 8008c04:	9a01      	ldr	r2, [sp, #4]
 8008c06:	f845 c002 	str.w	ip, [r5, r2]
 8008c0a:	9a03      	ldr	r2, [sp, #12]
 8008c0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c10:	3304      	adds	r3, #4
 8008c12:	f1b9 0f00 	cmp.w	r9, #0
 8008c16:	d021      	beq.n	8008c5c <__multiply+0x144>
 8008c18:	6829      	ldr	r1, [r5, #0]
 8008c1a:	f104 0c14 	add.w	ip, r4, #20
 8008c1e:	46ae      	mov	lr, r5
 8008c20:	f04f 0a00 	mov.w	sl, #0
 8008c24:	f8bc b000 	ldrh.w	fp, [ip]
 8008c28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c2c:	fb09 220b 	mla	r2, r9, fp, r2
 8008c30:	4452      	add	r2, sl
 8008c32:	b289      	uxth	r1, r1
 8008c34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c38:	f84e 1b04 	str.w	r1, [lr], #4
 8008c3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c44:	f8be 1000 	ldrh.w	r1, [lr]
 8008c48:	fb09 110a 	mla	r1, r9, sl, r1
 8008c4c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008c50:	4567      	cmp	r7, ip
 8008c52:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c56:	d8e5      	bhi.n	8008c24 <__multiply+0x10c>
 8008c58:	9a01      	ldr	r2, [sp, #4]
 8008c5a:	50a9      	str	r1, [r5, r2]
 8008c5c:	3504      	adds	r5, #4
 8008c5e:	e799      	b.n	8008b94 <__multiply+0x7c>
 8008c60:	3e01      	subs	r6, #1
 8008c62:	e79b      	b.n	8008b9c <__multiply+0x84>
 8008c64:	0800b1a5 	.word	0x0800b1a5
 8008c68:	0800b1b6 	.word	0x0800b1b6

08008c6c <__pow5mult>:
 8008c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c70:	4615      	mov	r5, r2
 8008c72:	f012 0203 	ands.w	r2, r2, #3
 8008c76:	4606      	mov	r6, r0
 8008c78:	460f      	mov	r7, r1
 8008c7a:	d007      	beq.n	8008c8c <__pow5mult+0x20>
 8008c7c:	4c25      	ldr	r4, [pc, #148]	; (8008d14 <__pow5mult+0xa8>)
 8008c7e:	3a01      	subs	r2, #1
 8008c80:	2300      	movs	r3, #0
 8008c82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c86:	f7ff fe53 	bl	8008930 <__multadd>
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	10ad      	asrs	r5, r5, #2
 8008c8e:	d03d      	beq.n	8008d0c <__pow5mult+0xa0>
 8008c90:	69f4      	ldr	r4, [r6, #28]
 8008c92:	b97c      	cbnz	r4, 8008cb4 <__pow5mult+0x48>
 8008c94:	2010      	movs	r0, #16
 8008c96:	f7ff fd35 	bl	8008704 <malloc>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	61f0      	str	r0, [r6, #28]
 8008c9e:	b928      	cbnz	r0, 8008cac <__pow5mult+0x40>
 8008ca0:	4b1d      	ldr	r3, [pc, #116]	; (8008d18 <__pow5mult+0xac>)
 8008ca2:	481e      	ldr	r0, [pc, #120]	; (8008d1c <__pow5mult+0xb0>)
 8008ca4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008ca8:	f001 fd36 	bl	800a718 <__assert_func>
 8008cac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cb0:	6004      	str	r4, [r0, #0]
 8008cb2:	60c4      	str	r4, [r0, #12]
 8008cb4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008cb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cbc:	b94c      	cbnz	r4, 8008cd2 <__pow5mult+0x66>
 8008cbe:	f240 2171 	movw	r1, #625	; 0x271
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f7ff ff12 	bl	8008aec <__i2b>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cce:	4604      	mov	r4, r0
 8008cd0:	6003      	str	r3, [r0, #0]
 8008cd2:	f04f 0900 	mov.w	r9, #0
 8008cd6:	07eb      	lsls	r3, r5, #31
 8008cd8:	d50a      	bpl.n	8008cf0 <__pow5mult+0x84>
 8008cda:	4639      	mov	r1, r7
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f7ff ff1a 	bl	8008b18 <__multiply>
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	4680      	mov	r8, r0
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7ff fdff 	bl	80088ec <_Bfree>
 8008cee:	4647      	mov	r7, r8
 8008cf0:	106d      	asrs	r5, r5, #1
 8008cf2:	d00b      	beq.n	8008d0c <__pow5mult+0xa0>
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	b938      	cbnz	r0, 8008d08 <__pow5mult+0x9c>
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f7ff ff0b 	bl	8008b18 <__multiply>
 8008d02:	6020      	str	r0, [r4, #0]
 8008d04:	f8c0 9000 	str.w	r9, [r0]
 8008d08:	4604      	mov	r4, r0
 8008d0a:	e7e4      	b.n	8008cd6 <__pow5mult+0x6a>
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d12:	bf00      	nop
 8008d14:	0800b300 	.word	0x0800b300
 8008d18:	0800b136 	.word	0x0800b136
 8008d1c:	0800b1b6 	.word	0x0800b1b6

08008d20 <__lshift>:
 8008d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d24:	460c      	mov	r4, r1
 8008d26:	6849      	ldr	r1, [r1, #4]
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d2e:	68a3      	ldr	r3, [r4, #8]
 8008d30:	4607      	mov	r7, r0
 8008d32:	4691      	mov	r9, r2
 8008d34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d38:	f108 0601 	add.w	r6, r8, #1
 8008d3c:	42b3      	cmp	r3, r6
 8008d3e:	db0b      	blt.n	8008d58 <__lshift+0x38>
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7ff fd93 	bl	800886c <_Balloc>
 8008d46:	4605      	mov	r5, r0
 8008d48:	b948      	cbnz	r0, 8008d5e <__lshift+0x3e>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	4b28      	ldr	r3, [pc, #160]	; (8008df0 <__lshift+0xd0>)
 8008d4e:	4829      	ldr	r0, [pc, #164]	; (8008df4 <__lshift+0xd4>)
 8008d50:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008d54:	f001 fce0 	bl	800a718 <__assert_func>
 8008d58:	3101      	adds	r1, #1
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	e7ee      	b.n	8008d3c <__lshift+0x1c>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f100 0114 	add.w	r1, r0, #20
 8008d64:	f100 0210 	add.w	r2, r0, #16
 8008d68:	4618      	mov	r0, r3
 8008d6a:	4553      	cmp	r3, sl
 8008d6c:	db33      	blt.n	8008dd6 <__lshift+0xb6>
 8008d6e:	6920      	ldr	r0, [r4, #16]
 8008d70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d74:	f104 0314 	add.w	r3, r4, #20
 8008d78:	f019 091f 	ands.w	r9, r9, #31
 8008d7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d84:	d02b      	beq.n	8008dde <__lshift+0xbe>
 8008d86:	f1c9 0e20 	rsb	lr, r9, #32
 8008d8a:	468a      	mov	sl, r1
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	fa00 f009 	lsl.w	r0, r0, r9
 8008d94:	4310      	orrs	r0, r2
 8008d96:	f84a 0b04 	str.w	r0, [sl], #4
 8008d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d9e:	459c      	cmp	ip, r3
 8008da0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008da4:	d8f3      	bhi.n	8008d8e <__lshift+0x6e>
 8008da6:	ebac 0304 	sub.w	r3, ip, r4
 8008daa:	3b15      	subs	r3, #21
 8008dac:	f023 0303 	bic.w	r3, r3, #3
 8008db0:	3304      	adds	r3, #4
 8008db2:	f104 0015 	add.w	r0, r4, #21
 8008db6:	4584      	cmp	ip, r0
 8008db8:	bf38      	it	cc
 8008dba:	2304      	movcc	r3, #4
 8008dbc:	50ca      	str	r2, [r1, r3]
 8008dbe:	b10a      	cbz	r2, 8008dc4 <__lshift+0xa4>
 8008dc0:	f108 0602 	add.w	r6, r8, #2
 8008dc4:	3e01      	subs	r6, #1
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	612e      	str	r6, [r5, #16]
 8008dca:	4621      	mov	r1, r4
 8008dcc:	f7ff fd8e 	bl	80088ec <_Bfree>
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dda:	3301      	adds	r3, #1
 8008ddc:	e7c5      	b.n	8008d6a <__lshift+0x4a>
 8008dde:	3904      	subs	r1, #4
 8008de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008de8:	459c      	cmp	ip, r3
 8008dea:	d8f9      	bhi.n	8008de0 <__lshift+0xc0>
 8008dec:	e7ea      	b.n	8008dc4 <__lshift+0xa4>
 8008dee:	bf00      	nop
 8008df0:	0800b1a5 	.word	0x0800b1a5
 8008df4:	0800b1b6 	.word	0x0800b1b6

08008df8 <__mcmp>:
 8008df8:	b530      	push	{r4, r5, lr}
 8008dfa:	6902      	ldr	r2, [r0, #16]
 8008dfc:	690c      	ldr	r4, [r1, #16]
 8008dfe:	1b12      	subs	r2, r2, r4
 8008e00:	d10e      	bne.n	8008e20 <__mcmp+0x28>
 8008e02:	f100 0314 	add.w	r3, r0, #20
 8008e06:	3114      	adds	r1, #20
 8008e08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e18:	42a5      	cmp	r5, r4
 8008e1a:	d003      	beq.n	8008e24 <__mcmp+0x2c>
 8008e1c:	d305      	bcc.n	8008e2a <__mcmp+0x32>
 8008e1e:	2201      	movs	r2, #1
 8008e20:	4610      	mov	r0, r2
 8008e22:	bd30      	pop	{r4, r5, pc}
 8008e24:	4283      	cmp	r3, r0
 8008e26:	d3f3      	bcc.n	8008e10 <__mcmp+0x18>
 8008e28:	e7fa      	b.n	8008e20 <__mcmp+0x28>
 8008e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2e:	e7f7      	b.n	8008e20 <__mcmp+0x28>

08008e30 <__mdiff>:
 8008e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e34:	460c      	mov	r4, r1
 8008e36:	4606      	mov	r6, r0
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	4690      	mov	r8, r2
 8008e3e:	f7ff ffdb 	bl	8008df8 <__mcmp>
 8008e42:	1e05      	subs	r5, r0, #0
 8008e44:	d110      	bne.n	8008e68 <__mdiff+0x38>
 8008e46:	4629      	mov	r1, r5
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7ff fd0f 	bl	800886c <_Balloc>
 8008e4e:	b930      	cbnz	r0, 8008e5e <__mdiff+0x2e>
 8008e50:	4b3a      	ldr	r3, [pc, #232]	; (8008f3c <__mdiff+0x10c>)
 8008e52:	4602      	mov	r2, r0
 8008e54:	f240 2137 	movw	r1, #567	; 0x237
 8008e58:	4839      	ldr	r0, [pc, #228]	; (8008f40 <__mdiff+0x110>)
 8008e5a:	f001 fc5d 	bl	800a718 <__assert_func>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e68:	bfa4      	itt	ge
 8008e6a:	4643      	movge	r3, r8
 8008e6c:	46a0      	movge	r8, r4
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e74:	bfa6      	itte	ge
 8008e76:	461c      	movge	r4, r3
 8008e78:	2500      	movge	r5, #0
 8008e7a:	2501      	movlt	r5, #1
 8008e7c:	f7ff fcf6 	bl	800886c <_Balloc>
 8008e80:	b920      	cbnz	r0, 8008e8c <__mdiff+0x5c>
 8008e82:	4b2e      	ldr	r3, [pc, #184]	; (8008f3c <__mdiff+0x10c>)
 8008e84:	4602      	mov	r2, r0
 8008e86:	f240 2145 	movw	r1, #581	; 0x245
 8008e8a:	e7e5      	b.n	8008e58 <__mdiff+0x28>
 8008e8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e90:	6926      	ldr	r6, [r4, #16]
 8008e92:	60c5      	str	r5, [r0, #12]
 8008e94:	f104 0914 	add.w	r9, r4, #20
 8008e98:	f108 0514 	add.w	r5, r8, #20
 8008e9c:	f100 0e14 	add.w	lr, r0, #20
 8008ea0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ea4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ea8:	f108 0210 	add.w	r2, r8, #16
 8008eac:	46f2      	mov	sl, lr
 8008eae:	2100      	movs	r1, #0
 8008eb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008eb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008eb8:	fa11 f88b 	uxtah	r8, r1, fp
 8008ebc:	b299      	uxth	r1, r3
 8008ebe:	0c1b      	lsrs	r3, r3, #16
 8008ec0:	eba8 0801 	sub.w	r8, r8, r1
 8008ec4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ec8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ecc:	fa1f f888 	uxth.w	r8, r8
 8008ed0:	1419      	asrs	r1, r3, #16
 8008ed2:	454e      	cmp	r6, r9
 8008ed4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ed8:	f84a 3b04 	str.w	r3, [sl], #4
 8008edc:	d8e8      	bhi.n	8008eb0 <__mdiff+0x80>
 8008ede:	1b33      	subs	r3, r6, r4
 8008ee0:	3b15      	subs	r3, #21
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	3415      	adds	r4, #21
 8008eea:	42a6      	cmp	r6, r4
 8008eec:	bf38      	it	cc
 8008eee:	2304      	movcc	r3, #4
 8008ef0:	441d      	add	r5, r3
 8008ef2:	4473      	add	r3, lr
 8008ef4:	469e      	mov	lr, r3
 8008ef6:	462e      	mov	r6, r5
 8008ef8:	4566      	cmp	r6, ip
 8008efa:	d30e      	bcc.n	8008f1a <__mdiff+0xea>
 8008efc:	f10c 0203 	add.w	r2, ip, #3
 8008f00:	1b52      	subs	r2, r2, r5
 8008f02:	f022 0203 	bic.w	r2, r2, #3
 8008f06:	3d03      	subs	r5, #3
 8008f08:	45ac      	cmp	ip, r5
 8008f0a:	bf38      	it	cc
 8008f0c:	2200      	movcc	r2, #0
 8008f0e:	4413      	add	r3, r2
 8008f10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008f14:	b17a      	cbz	r2, 8008f36 <__mdiff+0x106>
 8008f16:	6107      	str	r7, [r0, #16]
 8008f18:	e7a4      	b.n	8008e64 <__mdiff+0x34>
 8008f1a:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f1e:	fa11 f288 	uxtah	r2, r1, r8
 8008f22:	1414      	asrs	r4, r2, #16
 8008f24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f28:	b292      	uxth	r2, r2
 8008f2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f2e:	f84e 2b04 	str.w	r2, [lr], #4
 8008f32:	1421      	asrs	r1, r4, #16
 8008f34:	e7e0      	b.n	8008ef8 <__mdiff+0xc8>
 8008f36:	3f01      	subs	r7, #1
 8008f38:	e7ea      	b.n	8008f10 <__mdiff+0xe0>
 8008f3a:	bf00      	nop
 8008f3c:	0800b1a5 	.word	0x0800b1a5
 8008f40:	0800b1b6 	.word	0x0800b1b6

08008f44 <__ulp>:
 8008f44:	b082      	sub	sp, #8
 8008f46:	ed8d 0b00 	vstr	d0, [sp]
 8008f4a:	9a01      	ldr	r2, [sp, #4]
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	; (8008f8c <__ulp+0x48>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	dc08      	bgt.n	8008f6a <__ulp+0x26>
 8008f58:	425b      	negs	r3, r3
 8008f5a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008f5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f62:	da04      	bge.n	8008f6e <__ulp+0x2a>
 8008f64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f68:	4113      	asrs	r3, r2
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	e008      	b.n	8008f80 <__ulp+0x3c>
 8008f6e:	f1a2 0314 	sub.w	r3, r2, #20
 8008f72:	2b1e      	cmp	r3, #30
 8008f74:	bfda      	itte	le
 8008f76:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008f7a:	40da      	lsrle	r2, r3
 8008f7c:	2201      	movgt	r2, #1
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4619      	mov	r1, r3
 8008f82:	4610      	mov	r0, r2
 8008f84:	ec41 0b10 	vmov	d0, r0, r1
 8008f88:	b002      	add	sp, #8
 8008f8a:	4770      	bx	lr
 8008f8c:	7ff00000 	.word	0x7ff00000

08008f90 <__b2d>:
 8008f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f94:	6906      	ldr	r6, [r0, #16]
 8008f96:	f100 0814 	add.w	r8, r0, #20
 8008f9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f9e:	1f37      	subs	r7, r6, #4
 8008fa0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	f7ff fd53 	bl	8008a50 <__hi0bits>
 8008faa:	f1c0 0320 	rsb	r3, r0, #32
 8008fae:	280a      	cmp	r0, #10
 8008fb0:	600b      	str	r3, [r1, #0]
 8008fb2:	491b      	ldr	r1, [pc, #108]	; (8009020 <__b2d+0x90>)
 8008fb4:	dc15      	bgt.n	8008fe2 <__b2d+0x52>
 8008fb6:	f1c0 0c0b 	rsb	ip, r0, #11
 8008fba:	fa22 f30c 	lsr.w	r3, r2, ip
 8008fbe:	45b8      	cmp	r8, r7
 8008fc0:	ea43 0501 	orr.w	r5, r3, r1
 8008fc4:	bf34      	ite	cc
 8008fc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008fca:	2300      	movcs	r3, #0
 8008fcc:	3015      	adds	r0, #21
 8008fce:	fa02 f000 	lsl.w	r0, r2, r0
 8008fd2:	fa23 f30c 	lsr.w	r3, r3, ip
 8008fd6:	4303      	orrs	r3, r0
 8008fd8:	461c      	mov	r4, r3
 8008fda:	ec45 4b10 	vmov	d0, r4, r5
 8008fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe2:	45b8      	cmp	r8, r7
 8008fe4:	bf3a      	itte	cc
 8008fe6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008fea:	f1a6 0708 	subcc.w	r7, r6, #8
 8008fee:	2300      	movcs	r3, #0
 8008ff0:	380b      	subs	r0, #11
 8008ff2:	d012      	beq.n	800901a <__b2d+0x8a>
 8008ff4:	f1c0 0120 	rsb	r1, r0, #32
 8008ff8:	fa23 f401 	lsr.w	r4, r3, r1
 8008ffc:	4082      	lsls	r2, r0
 8008ffe:	4322      	orrs	r2, r4
 8009000:	4547      	cmp	r7, r8
 8009002:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009006:	bf8c      	ite	hi
 8009008:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800900c:	2200      	movls	r2, #0
 800900e:	4083      	lsls	r3, r0
 8009010:	40ca      	lsrs	r2, r1
 8009012:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009016:	4313      	orrs	r3, r2
 8009018:	e7de      	b.n	8008fd8 <__b2d+0x48>
 800901a:	ea42 0501 	orr.w	r5, r2, r1
 800901e:	e7db      	b.n	8008fd8 <__b2d+0x48>
 8009020:	3ff00000 	.word	0x3ff00000

08009024 <__d2b>:
 8009024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009028:	460f      	mov	r7, r1
 800902a:	2101      	movs	r1, #1
 800902c:	ec59 8b10 	vmov	r8, r9, d0
 8009030:	4616      	mov	r6, r2
 8009032:	f7ff fc1b 	bl	800886c <_Balloc>
 8009036:	4604      	mov	r4, r0
 8009038:	b930      	cbnz	r0, 8009048 <__d2b+0x24>
 800903a:	4602      	mov	r2, r0
 800903c:	4b24      	ldr	r3, [pc, #144]	; (80090d0 <__d2b+0xac>)
 800903e:	4825      	ldr	r0, [pc, #148]	; (80090d4 <__d2b+0xb0>)
 8009040:	f240 310f 	movw	r1, #783	; 0x30f
 8009044:	f001 fb68 	bl	800a718 <__assert_func>
 8009048:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800904c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009050:	bb2d      	cbnz	r5, 800909e <__d2b+0x7a>
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	f1b8 0300 	subs.w	r3, r8, #0
 8009058:	d026      	beq.n	80090a8 <__d2b+0x84>
 800905a:	4668      	mov	r0, sp
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	f7ff fd17 	bl	8008a90 <__lo0bits>
 8009062:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009066:	b1e8      	cbz	r0, 80090a4 <__d2b+0x80>
 8009068:	f1c0 0320 	rsb	r3, r0, #32
 800906c:	fa02 f303 	lsl.w	r3, r2, r3
 8009070:	430b      	orrs	r3, r1
 8009072:	40c2      	lsrs	r2, r0
 8009074:	6163      	str	r3, [r4, #20]
 8009076:	9201      	str	r2, [sp, #4]
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	61a3      	str	r3, [r4, #24]
 800907c:	2b00      	cmp	r3, #0
 800907e:	bf14      	ite	ne
 8009080:	2202      	movne	r2, #2
 8009082:	2201      	moveq	r2, #1
 8009084:	6122      	str	r2, [r4, #16]
 8009086:	b1bd      	cbz	r5, 80090b8 <__d2b+0x94>
 8009088:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800908c:	4405      	add	r5, r0
 800908e:	603d      	str	r5, [r7, #0]
 8009090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009094:	6030      	str	r0, [r6, #0]
 8009096:	4620      	mov	r0, r4
 8009098:	b003      	add	sp, #12
 800909a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800909e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090a2:	e7d6      	b.n	8009052 <__d2b+0x2e>
 80090a4:	6161      	str	r1, [r4, #20]
 80090a6:	e7e7      	b.n	8009078 <__d2b+0x54>
 80090a8:	a801      	add	r0, sp, #4
 80090aa:	f7ff fcf1 	bl	8008a90 <__lo0bits>
 80090ae:	9b01      	ldr	r3, [sp, #4]
 80090b0:	6163      	str	r3, [r4, #20]
 80090b2:	3020      	adds	r0, #32
 80090b4:	2201      	movs	r2, #1
 80090b6:	e7e5      	b.n	8009084 <__d2b+0x60>
 80090b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090c0:	6038      	str	r0, [r7, #0]
 80090c2:	6918      	ldr	r0, [r3, #16]
 80090c4:	f7ff fcc4 	bl	8008a50 <__hi0bits>
 80090c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090cc:	e7e2      	b.n	8009094 <__d2b+0x70>
 80090ce:	bf00      	nop
 80090d0:	0800b1a5 	.word	0x0800b1a5
 80090d4:	0800b1b6 	.word	0x0800b1b6

080090d8 <__ratio>:
 80090d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	4688      	mov	r8, r1
 80090de:	4669      	mov	r1, sp
 80090e0:	4681      	mov	r9, r0
 80090e2:	f7ff ff55 	bl	8008f90 <__b2d>
 80090e6:	a901      	add	r1, sp, #4
 80090e8:	4640      	mov	r0, r8
 80090ea:	ec55 4b10 	vmov	r4, r5, d0
 80090ee:	f7ff ff4f 	bl	8008f90 <__b2d>
 80090f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090fa:	eba3 0c02 	sub.w	ip, r3, r2
 80090fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009102:	1a9b      	subs	r3, r3, r2
 8009104:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009108:	ec51 0b10 	vmov	r0, r1, d0
 800910c:	2b00      	cmp	r3, #0
 800910e:	bfd6      	itet	le
 8009110:	460a      	movle	r2, r1
 8009112:	462a      	movgt	r2, r5
 8009114:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009118:	468b      	mov	fp, r1
 800911a:	462f      	mov	r7, r5
 800911c:	bfd4      	ite	le
 800911e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009122:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009126:	4620      	mov	r0, r4
 8009128:	ee10 2a10 	vmov	r2, s0
 800912c:	465b      	mov	r3, fp
 800912e:	4639      	mov	r1, r7
 8009130:	f7f7 fb94 	bl	800085c <__aeabi_ddiv>
 8009134:	ec41 0b10 	vmov	d0, r0, r1
 8009138:	b003      	add	sp, #12
 800913a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800913e <__copybits>:
 800913e:	3901      	subs	r1, #1
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	1149      	asrs	r1, r1, #5
 8009144:	6914      	ldr	r4, [r2, #16]
 8009146:	3101      	adds	r1, #1
 8009148:	f102 0314 	add.w	r3, r2, #20
 800914c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009150:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009154:	1f05      	subs	r5, r0, #4
 8009156:	42a3      	cmp	r3, r4
 8009158:	d30c      	bcc.n	8009174 <__copybits+0x36>
 800915a:	1aa3      	subs	r3, r4, r2
 800915c:	3b11      	subs	r3, #17
 800915e:	f023 0303 	bic.w	r3, r3, #3
 8009162:	3211      	adds	r2, #17
 8009164:	42a2      	cmp	r2, r4
 8009166:	bf88      	it	hi
 8009168:	2300      	movhi	r3, #0
 800916a:	4418      	add	r0, r3
 800916c:	2300      	movs	r3, #0
 800916e:	4288      	cmp	r0, r1
 8009170:	d305      	bcc.n	800917e <__copybits+0x40>
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	f853 6b04 	ldr.w	r6, [r3], #4
 8009178:	f845 6f04 	str.w	r6, [r5, #4]!
 800917c:	e7eb      	b.n	8009156 <__copybits+0x18>
 800917e:	f840 3b04 	str.w	r3, [r0], #4
 8009182:	e7f4      	b.n	800916e <__copybits+0x30>

08009184 <__any_on>:
 8009184:	f100 0214 	add.w	r2, r0, #20
 8009188:	6900      	ldr	r0, [r0, #16]
 800918a:	114b      	asrs	r3, r1, #5
 800918c:	4298      	cmp	r0, r3
 800918e:	b510      	push	{r4, lr}
 8009190:	db11      	blt.n	80091b6 <__any_on+0x32>
 8009192:	dd0a      	ble.n	80091aa <__any_on+0x26>
 8009194:	f011 011f 	ands.w	r1, r1, #31
 8009198:	d007      	beq.n	80091aa <__any_on+0x26>
 800919a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800919e:	fa24 f001 	lsr.w	r0, r4, r1
 80091a2:	fa00 f101 	lsl.w	r1, r0, r1
 80091a6:	428c      	cmp	r4, r1
 80091a8:	d10b      	bne.n	80091c2 <__any_on+0x3e>
 80091aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d803      	bhi.n	80091ba <__any_on+0x36>
 80091b2:	2000      	movs	r0, #0
 80091b4:	bd10      	pop	{r4, pc}
 80091b6:	4603      	mov	r3, r0
 80091b8:	e7f7      	b.n	80091aa <__any_on+0x26>
 80091ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091be:	2900      	cmp	r1, #0
 80091c0:	d0f5      	beq.n	80091ae <__any_on+0x2a>
 80091c2:	2001      	movs	r0, #1
 80091c4:	e7f6      	b.n	80091b4 <__any_on+0x30>

080091c6 <sulp>:
 80091c6:	b570      	push	{r4, r5, r6, lr}
 80091c8:	4604      	mov	r4, r0
 80091ca:	460d      	mov	r5, r1
 80091cc:	ec45 4b10 	vmov	d0, r4, r5
 80091d0:	4616      	mov	r6, r2
 80091d2:	f7ff feb7 	bl	8008f44 <__ulp>
 80091d6:	ec51 0b10 	vmov	r0, r1, d0
 80091da:	b17e      	cbz	r6, 80091fc <sulp+0x36>
 80091dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80091e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dd09      	ble.n	80091fc <sulp+0x36>
 80091e8:	051b      	lsls	r3, r3, #20
 80091ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80091ee:	2400      	movs	r4, #0
 80091f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80091f4:	4622      	mov	r2, r4
 80091f6:	462b      	mov	r3, r5
 80091f8:	f7f7 fa06 	bl	8000608 <__aeabi_dmul>
 80091fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009200 <_strtod_l>:
 8009200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	ed2d 8b02 	vpush	{d8}
 8009208:	b09b      	sub	sp, #108	; 0x6c
 800920a:	4604      	mov	r4, r0
 800920c:	9213      	str	r2, [sp, #76]	; 0x4c
 800920e:	2200      	movs	r2, #0
 8009210:	9216      	str	r2, [sp, #88]	; 0x58
 8009212:	460d      	mov	r5, r1
 8009214:	f04f 0800 	mov.w	r8, #0
 8009218:	f04f 0900 	mov.w	r9, #0
 800921c:	460a      	mov	r2, r1
 800921e:	9215      	str	r2, [sp, #84]	; 0x54
 8009220:	7811      	ldrb	r1, [r2, #0]
 8009222:	292b      	cmp	r1, #43	; 0x2b
 8009224:	d04c      	beq.n	80092c0 <_strtod_l+0xc0>
 8009226:	d83a      	bhi.n	800929e <_strtod_l+0x9e>
 8009228:	290d      	cmp	r1, #13
 800922a:	d834      	bhi.n	8009296 <_strtod_l+0x96>
 800922c:	2908      	cmp	r1, #8
 800922e:	d834      	bhi.n	800929a <_strtod_l+0x9a>
 8009230:	2900      	cmp	r1, #0
 8009232:	d03d      	beq.n	80092b0 <_strtod_l+0xb0>
 8009234:	2200      	movs	r2, #0
 8009236:	920a      	str	r2, [sp, #40]	; 0x28
 8009238:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800923a:	7832      	ldrb	r2, [r6, #0]
 800923c:	2a30      	cmp	r2, #48	; 0x30
 800923e:	f040 80b4 	bne.w	80093aa <_strtod_l+0x1aa>
 8009242:	7872      	ldrb	r2, [r6, #1]
 8009244:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009248:	2a58      	cmp	r2, #88	; 0x58
 800924a:	d170      	bne.n	800932e <_strtod_l+0x12e>
 800924c:	9302      	str	r3, [sp, #8]
 800924e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	ab16      	add	r3, sp, #88	; 0x58
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	4a8e      	ldr	r2, [pc, #568]	; (8009490 <_strtod_l+0x290>)
 8009258:	ab17      	add	r3, sp, #92	; 0x5c
 800925a:	a915      	add	r1, sp, #84	; 0x54
 800925c:	4620      	mov	r0, r4
 800925e:	f001 faf7 	bl	800a850 <__gethex>
 8009262:	f010 070f 	ands.w	r7, r0, #15
 8009266:	4605      	mov	r5, r0
 8009268:	d005      	beq.n	8009276 <_strtod_l+0x76>
 800926a:	2f06      	cmp	r7, #6
 800926c:	d12a      	bne.n	80092c4 <_strtod_l+0xc4>
 800926e:	3601      	adds	r6, #1
 8009270:	2300      	movs	r3, #0
 8009272:	9615      	str	r6, [sp, #84]	; 0x54
 8009274:	930a      	str	r3, [sp, #40]	; 0x28
 8009276:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009278:	2b00      	cmp	r3, #0
 800927a:	f040 857f 	bne.w	8009d7c <_strtod_l+0xb7c>
 800927e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009280:	b1db      	cbz	r3, 80092ba <_strtod_l+0xba>
 8009282:	4642      	mov	r2, r8
 8009284:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009288:	ec43 2b10 	vmov	d0, r2, r3
 800928c:	b01b      	add	sp, #108	; 0x6c
 800928e:	ecbd 8b02 	vpop	{d8}
 8009292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009296:	2920      	cmp	r1, #32
 8009298:	d1cc      	bne.n	8009234 <_strtod_l+0x34>
 800929a:	3201      	adds	r2, #1
 800929c:	e7bf      	b.n	800921e <_strtod_l+0x1e>
 800929e:	292d      	cmp	r1, #45	; 0x2d
 80092a0:	d1c8      	bne.n	8009234 <_strtod_l+0x34>
 80092a2:	2101      	movs	r1, #1
 80092a4:	910a      	str	r1, [sp, #40]	; 0x28
 80092a6:	1c51      	adds	r1, r2, #1
 80092a8:	9115      	str	r1, [sp, #84]	; 0x54
 80092aa:	7852      	ldrb	r2, [r2, #1]
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d1c3      	bne.n	8009238 <_strtod_l+0x38>
 80092b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092b2:	9515      	str	r5, [sp, #84]	; 0x54
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f040 855f 	bne.w	8009d78 <_strtod_l+0xb78>
 80092ba:	4642      	mov	r2, r8
 80092bc:	464b      	mov	r3, r9
 80092be:	e7e3      	b.n	8009288 <_strtod_l+0x88>
 80092c0:	2100      	movs	r1, #0
 80092c2:	e7ef      	b.n	80092a4 <_strtod_l+0xa4>
 80092c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80092c6:	b13a      	cbz	r2, 80092d8 <_strtod_l+0xd8>
 80092c8:	2135      	movs	r1, #53	; 0x35
 80092ca:	a818      	add	r0, sp, #96	; 0x60
 80092cc:	f7ff ff37 	bl	800913e <__copybits>
 80092d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80092d2:	4620      	mov	r0, r4
 80092d4:	f7ff fb0a 	bl	80088ec <_Bfree>
 80092d8:	3f01      	subs	r7, #1
 80092da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092dc:	2f04      	cmp	r7, #4
 80092de:	d806      	bhi.n	80092ee <_strtod_l+0xee>
 80092e0:	e8df f007 	tbb	[pc, r7]
 80092e4:	201d0314 	.word	0x201d0314
 80092e8:	14          	.byte	0x14
 80092e9:	00          	.byte	0x00
 80092ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80092ee:	05e9      	lsls	r1, r5, #23
 80092f0:	bf48      	it	mi
 80092f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80092f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092fa:	0d1b      	lsrs	r3, r3, #20
 80092fc:	051b      	lsls	r3, r3, #20
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1b9      	bne.n	8009276 <_strtod_l+0x76>
 8009302:	f7fe faf7 	bl	80078f4 <__errno>
 8009306:	2322      	movs	r3, #34	; 0x22
 8009308:	6003      	str	r3, [r0, #0]
 800930a:	e7b4      	b.n	8009276 <_strtod_l+0x76>
 800930c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009310:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009314:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009318:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800931c:	e7e7      	b.n	80092ee <_strtod_l+0xee>
 800931e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009498 <_strtod_l+0x298>
 8009322:	e7e4      	b.n	80092ee <_strtod_l+0xee>
 8009324:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009328:	f04f 38ff 	mov.w	r8, #4294967295
 800932c:	e7df      	b.n	80092ee <_strtod_l+0xee>
 800932e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	9215      	str	r2, [sp, #84]	; 0x54
 8009334:	785b      	ldrb	r3, [r3, #1]
 8009336:	2b30      	cmp	r3, #48	; 0x30
 8009338:	d0f9      	beq.n	800932e <_strtod_l+0x12e>
 800933a:	2b00      	cmp	r3, #0
 800933c:	d09b      	beq.n	8009276 <_strtod_l+0x76>
 800933e:	2301      	movs	r3, #1
 8009340:	f04f 0a00 	mov.w	sl, #0
 8009344:	9304      	str	r3, [sp, #16]
 8009346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009348:	930b      	str	r3, [sp, #44]	; 0x2c
 800934a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800934e:	46d3      	mov	fp, sl
 8009350:	220a      	movs	r2, #10
 8009352:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009354:	7806      	ldrb	r6, [r0, #0]
 8009356:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800935a:	b2d9      	uxtb	r1, r3
 800935c:	2909      	cmp	r1, #9
 800935e:	d926      	bls.n	80093ae <_strtod_l+0x1ae>
 8009360:	494c      	ldr	r1, [pc, #304]	; (8009494 <_strtod_l+0x294>)
 8009362:	2201      	movs	r2, #1
 8009364:	f001 f98c 	bl	800a680 <strncmp>
 8009368:	2800      	cmp	r0, #0
 800936a:	d030      	beq.n	80093ce <_strtod_l+0x1ce>
 800936c:	2000      	movs	r0, #0
 800936e:	4632      	mov	r2, r6
 8009370:	9005      	str	r0, [sp, #20]
 8009372:	465e      	mov	r6, fp
 8009374:	4603      	mov	r3, r0
 8009376:	2a65      	cmp	r2, #101	; 0x65
 8009378:	d001      	beq.n	800937e <_strtod_l+0x17e>
 800937a:	2a45      	cmp	r2, #69	; 0x45
 800937c:	d113      	bne.n	80093a6 <_strtod_l+0x1a6>
 800937e:	b91e      	cbnz	r6, 8009388 <_strtod_l+0x188>
 8009380:	9a04      	ldr	r2, [sp, #16]
 8009382:	4302      	orrs	r2, r0
 8009384:	d094      	beq.n	80092b0 <_strtod_l+0xb0>
 8009386:	2600      	movs	r6, #0
 8009388:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800938a:	1c6a      	adds	r2, r5, #1
 800938c:	9215      	str	r2, [sp, #84]	; 0x54
 800938e:	786a      	ldrb	r2, [r5, #1]
 8009390:	2a2b      	cmp	r2, #43	; 0x2b
 8009392:	d074      	beq.n	800947e <_strtod_l+0x27e>
 8009394:	2a2d      	cmp	r2, #45	; 0x2d
 8009396:	d078      	beq.n	800948a <_strtod_l+0x28a>
 8009398:	f04f 0c00 	mov.w	ip, #0
 800939c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80093a0:	2909      	cmp	r1, #9
 80093a2:	d97f      	bls.n	80094a4 <_strtod_l+0x2a4>
 80093a4:	9515      	str	r5, [sp, #84]	; 0x54
 80093a6:	2700      	movs	r7, #0
 80093a8:	e09e      	b.n	80094e8 <_strtod_l+0x2e8>
 80093aa:	2300      	movs	r3, #0
 80093ac:	e7c8      	b.n	8009340 <_strtod_l+0x140>
 80093ae:	f1bb 0f08 	cmp.w	fp, #8
 80093b2:	bfd8      	it	le
 80093b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80093b6:	f100 0001 	add.w	r0, r0, #1
 80093ba:	bfda      	itte	le
 80093bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80093c0:	9309      	strle	r3, [sp, #36]	; 0x24
 80093c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80093c6:	f10b 0b01 	add.w	fp, fp, #1
 80093ca:	9015      	str	r0, [sp, #84]	; 0x54
 80093cc:	e7c1      	b.n	8009352 <_strtod_l+0x152>
 80093ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	9215      	str	r2, [sp, #84]	; 0x54
 80093d4:	785a      	ldrb	r2, [r3, #1]
 80093d6:	f1bb 0f00 	cmp.w	fp, #0
 80093da:	d037      	beq.n	800944c <_strtod_l+0x24c>
 80093dc:	9005      	str	r0, [sp, #20]
 80093de:	465e      	mov	r6, fp
 80093e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80093e4:	2b09      	cmp	r3, #9
 80093e6:	d912      	bls.n	800940e <_strtod_l+0x20e>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e7c4      	b.n	8009376 <_strtod_l+0x176>
 80093ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	9215      	str	r2, [sp, #84]	; 0x54
 80093f2:	785a      	ldrb	r2, [r3, #1]
 80093f4:	3001      	adds	r0, #1
 80093f6:	2a30      	cmp	r2, #48	; 0x30
 80093f8:	d0f8      	beq.n	80093ec <_strtod_l+0x1ec>
 80093fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80093fe:	2b08      	cmp	r3, #8
 8009400:	f200 84c1 	bhi.w	8009d86 <_strtod_l+0xb86>
 8009404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009406:	9005      	str	r0, [sp, #20]
 8009408:	2000      	movs	r0, #0
 800940a:	930b      	str	r3, [sp, #44]	; 0x2c
 800940c:	4606      	mov	r6, r0
 800940e:	3a30      	subs	r2, #48	; 0x30
 8009410:	f100 0301 	add.w	r3, r0, #1
 8009414:	d014      	beq.n	8009440 <_strtod_l+0x240>
 8009416:	9905      	ldr	r1, [sp, #20]
 8009418:	4419      	add	r1, r3
 800941a:	9105      	str	r1, [sp, #20]
 800941c:	4633      	mov	r3, r6
 800941e:	eb00 0c06 	add.w	ip, r0, r6
 8009422:	210a      	movs	r1, #10
 8009424:	4563      	cmp	r3, ip
 8009426:	d113      	bne.n	8009450 <_strtod_l+0x250>
 8009428:	1833      	adds	r3, r6, r0
 800942a:	2b08      	cmp	r3, #8
 800942c:	f106 0601 	add.w	r6, r6, #1
 8009430:	4406      	add	r6, r0
 8009432:	dc1a      	bgt.n	800946a <_strtod_l+0x26a>
 8009434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009436:	230a      	movs	r3, #10
 8009438:	fb03 2301 	mla	r3, r3, r1, r2
 800943c:	9309      	str	r3, [sp, #36]	; 0x24
 800943e:	2300      	movs	r3, #0
 8009440:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009442:	1c51      	adds	r1, r2, #1
 8009444:	9115      	str	r1, [sp, #84]	; 0x54
 8009446:	7852      	ldrb	r2, [r2, #1]
 8009448:	4618      	mov	r0, r3
 800944a:	e7c9      	b.n	80093e0 <_strtod_l+0x1e0>
 800944c:	4658      	mov	r0, fp
 800944e:	e7d2      	b.n	80093f6 <_strtod_l+0x1f6>
 8009450:	2b08      	cmp	r3, #8
 8009452:	f103 0301 	add.w	r3, r3, #1
 8009456:	dc03      	bgt.n	8009460 <_strtod_l+0x260>
 8009458:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800945a:	434f      	muls	r7, r1
 800945c:	9709      	str	r7, [sp, #36]	; 0x24
 800945e:	e7e1      	b.n	8009424 <_strtod_l+0x224>
 8009460:	2b10      	cmp	r3, #16
 8009462:	bfd8      	it	le
 8009464:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009468:	e7dc      	b.n	8009424 <_strtod_l+0x224>
 800946a:	2e10      	cmp	r6, #16
 800946c:	bfdc      	itt	le
 800946e:	230a      	movle	r3, #10
 8009470:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009474:	e7e3      	b.n	800943e <_strtod_l+0x23e>
 8009476:	2300      	movs	r3, #0
 8009478:	9305      	str	r3, [sp, #20]
 800947a:	2301      	movs	r3, #1
 800947c:	e780      	b.n	8009380 <_strtod_l+0x180>
 800947e:	f04f 0c00 	mov.w	ip, #0
 8009482:	1caa      	adds	r2, r5, #2
 8009484:	9215      	str	r2, [sp, #84]	; 0x54
 8009486:	78aa      	ldrb	r2, [r5, #2]
 8009488:	e788      	b.n	800939c <_strtod_l+0x19c>
 800948a:	f04f 0c01 	mov.w	ip, #1
 800948e:	e7f8      	b.n	8009482 <_strtod_l+0x282>
 8009490:	0800b310 	.word	0x0800b310
 8009494:	0800b30c 	.word	0x0800b30c
 8009498:	7ff00000 	.word	0x7ff00000
 800949c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800949e:	1c51      	adds	r1, r2, #1
 80094a0:	9115      	str	r1, [sp, #84]	; 0x54
 80094a2:	7852      	ldrb	r2, [r2, #1]
 80094a4:	2a30      	cmp	r2, #48	; 0x30
 80094a6:	d0f9      	beq.n	800949c <_strtod_l+0x29c>
 80094a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80094ac:	2908      	cmp	r1, #8
 80094ae:	f63f af7a 	bhi.w	80093a6 <_strtod_l+0x1a6>
 80094b2:	3a30      	subs	r2, #48	; 0x30
 80094b4:	9208      	str	r2, [sp, #32]
 80094b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80094b8:	920c      	str	r2, [sp, #48]	; 0x30
 80094ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80094bc:	1c57      	adds	r7, r2, #1
 80094be:	9715      	str	r7, [sp, #84]	; 0x54
 80094c0:	7852      	ldrb	r2, [r2, #1]
 80094c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80094c6:	f1be 0f09 	cmp.w	lr, #9
 80094ca:	d938      	bls.n	800953e <_strtod_l+0x33e>
 80094cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094ce:	1a7f      	subs	r7, r7, r1
 80094d0:	2f08      	cmp	r7, #8
 80094d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80094d6:	dc03      	bgt.n	80094e0 <_strtod_l+0x2e0>
 80094d8:	9908      	ldr	r1, [sp, #32]
 80094da:	428f      	cmp	r7, r1
 80094dc:	bfa8      	it	ge
 80094de:	460f      	movge	r7, r1
 80094e0:	f1bc 0f00 	cmp.w	ip, #0
 80094e4:	d000      	beq.n	80094e8 <_strtod_l+0x2e8>
 80094e6:	427f      	negs	r7, r7
 80094e8:	2e00      	cmp	r6, #0
 80094ea:	d14f      	bne.n	800958c <_strtod_l+0x38c>
 80094ec:	9904      	ldr	r1, [sp, #16]
 80094ee:	4301      	orrs	r1, r0
 80094f0:	f47f aec1 	bne.w	8009276 <_strtod_l+0x76>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f47f aedb 	bne.w	80092b0 <_strtod_l+0xb0>
 80094fa:	2a69      	cmp	r2, #105	; 0x69
 80094fc:	d029      	beq.n	8009552 <_strtod_l+0x352>
 80094fe:	dc26      	bgt.n	800954e <_strtod_l+0x34e>
 8009500:	2a49      	cmp	r2, #73	; 0x49
 8009502:	d026      	beq.n	8009552 <_strtod_l+0x352>
 8009504:	2a4e      	cmp	r2, #78	; 0x4e
 8009506:	f47f aed3 	bne.w	80092b0 <_strtod_l+0xb0>
 800950a:	499b      	ldr	r1, [pc, #620]	; (8009778 <_strtod_l+0x578>)
 800950c:	a815      	add	r0, sp, #84	; 0x54
 800950e:	f001 fbdf 	bl	800acd0 <__match>
 8009512:	2800      	cmp	r0, #0
 8009514:	f43f aecc 	beq.w	80092b0 <_strtod_l+0xb0>
 8009518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	2b28      	cmp	r3, #40	; 0x28
 800951e:	d12f      	bne.n	8009580 <_strtod_l+0x380>
 8009520:	4996      	ldr	r1, [pc, #600]	; (800977c <_strtod_l+0x57c>)
 8009522:	aa18      	add	r2, sp, #96	; 0x60
 8009524:	a815      	add	r0, sp, #84	; 0x54
 8009526:	f001 fbe7 	bl	800acf8 <__hexnan>
 800952a:	2805      	cmp	r0, #5
 800952c:	d128      	bne.n	8009580 <_strtod_l+0x380>
 800952e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009530:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009534:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009538:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800953c:	e69b      	b.n	8009276 <_strtod_l+0x76>
 800953e:	9f08      	ldr	r7, [sp, #32]
 8009540:	210a      	movs	r1, #10
 8009542:	fb01 2107 	mla	r1, r1, r7, r2
 8009546:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800954a:	9208      	str	r2, [sp, #32]
 800954c:	e7b5      	b.n	80094ba <_strtod_l+0x2ba>
 800954e:	2a6e      	cmp	r2, #110	; 0x6e
 8009550:	e7d9      	b.n	8009506 <_strtod_l+0x306>
 8009552:	498b      	ldr	r1, [pc, #556]	; (8009780 <_strtod_l+0x580>)
 8009554:	a815      	add	r0, sp, #84	; 0x54
 8009556:	f001 fbbb 	bl	800acd0 <__match>
 800955a:	2800      	cmp	r0, #0
 800955c:	f43f aea8 	beq.w	80092b0 <_strtod_l+0xb0>
 8009560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009562:	4988      	ldr	r1, [pc, #544]	; (8009784 <_strtod_l+0x584>)
 8009564:	3b01      	subs	r3, #1
 8009566:	a815      	add	r0, sp, #84	; 0x54
 8009568:	9315      	str	r3, [sp, #84]	; 0x54
 800956a:	f001 fbb1 	bl	800acd0 <__match>
 800956e:	b910      	cbnz	r0, 8009576 <_strtod_l+0x376>
 8009570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009572:	3301      	adds	r3, #1
 8009574:	9315      	str	r3, [sp, #84]	; 0x54
 8009576:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009794 <_strtod_l+0x594>
 800957a:	f04f 0800 	mov.w	r8, #0
 800957e:	e67a      	b.n	8009276 <_strtod_l+0x76>
 8009580:	4881      	ldr	r0, [pc, #516]	; (8009788 <_strtod_l+0x588>)
 8009582:	f001 f8c1 	bl	800a708 <nan>
 8009586:	ec59 8b10 	vmov	r8, r9, d0
 800958a:	e674      	b.n	8009276 <_strtod_l+0x76>
 800958c:	9b05      	ldr	r3, [sp, #20]
 800958e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009590:	1afb      	subs	r3, r7, r3
 8009592:	f1bb 0f00 	cmp.w	fp, #0
 8009596:	bf08      	it	eq
 8009598:	46b3      	moveq	fp, r6
 800959a:	2e10      	cmp	r6, #16
 800959c:	9308      	str	r3, [sp, #32]
 800959e:	4635      	mov	r5, r6
 80095a0:	bfa8      	it	ge
 80095a2:	2510      	movge	r5, #16
 80095a4:	f7f6 ffb6 	bl	8000514 <__aeabi_ui2d>
 80095a8:	2e09      	cmp	r6, #9
 80095aa:	4680      	mov	r8, r0
 80095ac:	4689      	mov	r9, r1
 80095ae:	dd13      	ble.n	80095d8 <_strtod_l+0x3d8>
 80095b0:	4b76      	ldr	r3, [pc, #472]	; (800978c <_strtod_l+0x58c>)
 80095b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80095b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80095ba:	f7f7 f825 	bl	8000608 <__aeabi_dmul>
 80095be:	4680      	mov	r8, r0
 80095c0:	4650      	mov	r0, sl
 80095c2:	4689      	mov	r9, r1
 80095c4:	f7f6 ffa6 	bl	8000514 <__aeabi_ui2d>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4640      	mov	r0, r8
 80095ce:	4649      	mov	r1, r9
 80095d0:	f7f6 fe64 	bl	800029c <__adddf3>
 80095d4:	4680      	mov	r8, r0
 80095d6:	4689      	mov	r9, r1
 80095d8:	2e0f      	cmp	r6, #15
 80095da:	dc38      	bgt.n	800964e <_strtod_l+0x44e>
 80095dc:	9b08      	ldr	r3, [sp, #32]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f43f ae49 	beq.w	8009276 <_strtod_l+0x76>
 80095e4:	dd24      	ble.n	8009630 <_strtod_l+0x430>
 80095e6:	2b16      	cmp	r3, #22
 80095e8:	dc0b      	bgt.n	8009602 <_strtod_l+0x402>
 80095ea:	4968      	ldr	r1, [pc, #416]	; (800978c <_strtod_l+0x58c>)
 80095ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095f4:	4642      	mov	r2, r8
 80095f6:	464b      	mov	r3, r9
 80095f8:	f7f7 f806 	bl	8000608 <__aeabi_dmul>
 80095fc:	4680      	mov	r8, r0
 80095fe:	4689      	mov	r9, r1
 8009600:	e639      	b.n	8009276 <_strtod_l+0x76>
 8009602:	9a08      	ldr	r2, [sp, #32]
 8009604:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009608:	4293      	cmp	r3, r2
 800960a:	db20      	blt.n	800964e <_strtod_l+0x44e>
 800960c:	4c5f      	ldr	r4, [pc, #380]	; (800978c <_strtod_l+0x58c>)
 800960e:	f1c6 060f 	rsb	r6, r6, #15
 8009612:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009616:	4642      	mov	r2, r8
 8009618:	464b      	mov	r3, r9
 800961a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800961e:	f7f6 fff3 	bl	8000608 <__aeabi_dmul>
 8009622:	9b08      	ldr	r3, [sp, #32]
 8009624:	1b9e      	subs	r6, r3, r6
 8009626:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800962a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800962e:	e7e3      	b.n	80095f8 <_strtod_l+0x3f8>
 8009630:	9b08      	ldr	r3, [sp, #32]
 8009632:	3316      	adds	r3, #22
 8009634:	db0b      	blt.n	800964e <_strtod_l+0x44e>
 8009636:	9b05      	ldr	r3, [sp, #20]
 8009638:	1bdf      	subs	r7, r3, r7
 800963a:	4b54      	ldr	r3, [pc, #336]	; (800978c <_strtod_l+0x58c>)
 800963c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009644:	4640      	mov	r0, r8
 8009646:	4649      	mov	r1, r9
 8009648:	f7f7 f908 	bl	800085c <__aeabi_ddiv>
 800964c:	e7d6      	b.n	80095fc <_strtod_l+0x3fc>
 800964e:	9b08      	ldr	r3, [sp, #32]
 8009650:	1b75      	subs	r5, r6, r5
 8009652:	441d      	add	r5, r3
 8009654:	2d00      	cmp	r5, #0
 8009656:	dd70      	ble.n	800973a <_strtod_l+0x53a>
 8009658:	f015 030f 	ands.w	r3, r5, #15
 800965c:	d00a      	beq.n	8009674 <_strtod_l+0x474>
 800965e:	494b      	ldr	r1, [pc, #300]	; (800978c <_strtod_l+0x58c>)
 8009660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009664:	4642      	mov	r2, r8
 8009666:	464b      	mov	r3, r9
 8009668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966c:	f7f6 ffcc 	bl	8000608 <__aeabi_dmul>
 8009670:	4680      	mov	r8, r0
 8009672:	4689      	mov	r9, r1
 8009674:	f035 050f 	bics.w	r5, r5, #15
 8009678:	d04d      	beq.n	8009716 <_strtod_l+0x516>
 800967a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800967e:	dd22      	ble.n	80096c6 <_strtod_l+0x4c6>
 8009680:	2500      	movs	r5, #0
 8009682:	46ab      	mov	fp, r5
 8009684:	9509      	str	r5, [sp, #36]	; 0x24
 8009686:	9505      	str	r5, [sp, #20]
 8009688:	2322      	movs	r3, #34	; 0x22
 800968a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009794 <_strtod_l+0x594>
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	f04f 0800 	mov.w	r8, #0
 8009694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009696:	2b00      	cmp	r3, #0
 8009698:	f43f aded 	beq.w	8009276 <_strtod_l+0x76>
 800969c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800969e:	4620      	mov	r0, r4
 80096a0:	f7ff f924 	bl	80088ec <_Bfree>
 80096a4:	9905      	ldr	r1, [sp, #20]
 80096a6:	4620      	mov	r0, r4
 80096a8:	f7ff f920 	bl	80088ec <_Bfree>
 80096ac:	4659      	mov	r1, fp
 80096ae:	4620      	mov	r0, r4
 80096b0:	f7ff f91c 	bl	80088ec <_Bfree>
 80096b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096b6:	4620      	mov	r0, r4
 80096b8:	f7ff f918 	bl	80088ec <_Bfree>
 80096bc:	4629      	mov	r1, r5
 80096be:	4620      	mov	r0, r4
 80096c0:	f7ff f914 	bl	80088ec <_Bfree>
 80096c4:	e5d7      	b.n	8009276 <_strtod_l+0x76>
 80096c6:	4b32      	ldr	r3, [pc, #200]	; (8009790 <_strtod_l+0x590>)
 80096c8:	9304      	str	r3, [sp, #16]
 80096ca:	2300      	movs	r3, #0
 80096cc:	112d      	asrs	r5, r5, #4
 80096ce:	4640      	mov	r0, r8
 80096d0:	4649      	mov	r1, r9
 80096d2:	469a      	mov	sl, r3
 80096d4:	2d01      	cmp	r5, #1
 80096d6:	dc21      	bgt.n	800971c <_strtod_l+0x51c>
 80096d8:	b10b      	cbz	r3, 80096de <_strtod_l+0x4de>
 80096da:	4680      	mov	r8, r0
 80096dc:	4689      	mov	r9, r1
 80096de:	492c      	ldr	r1, [pc, #176]	; (8009790 <_strtod_l+0x590>)
 80096e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80096e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80096e8:	4642      	mov	r2, r8
 80096ea:	464b      	mov	r3, r9
 80096ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f0:	f7f6 ff8a 	bl	8000608 <__aeabi_dmul>
 80096f4:	4b27      	ldr	r3, [pc, #156]	; (8009794 <_strtod_l+0x594>)
 80096f6:	460a      	mov	r2, r1
 80096f8:	400b      	ands	r3, r1
 80096fa:	4927      	ldr	r1, [pc, #156]	; (8009798 <_strtod_l+0x598>)
 80096fc:	428b      	cmp	r3, r1
 80096fe:	4680      	mov	r8, r0
 8009700:	d8be      	bhi.n	8009680 <_strtod_l+0x480>
 8009702:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009706:	428b      	cmp	r3, r1
 8009708:	bf86      	itte	hi
 800970a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800979c <_strtod_l+0x59c>
 800970e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009712:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009716:	2300      	movs	r3, #0
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	e07b      	b.n	8009814 <_strtod_l+0x614>
 800971c:	07ea      	lsls	r2, r5, #31
 800971e:	d505      	bpl.n	800972c <_strtod_l+0x52c>
 8009720:	9b04      	ldr	r3, [sp, #16]
 8009722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009726:	f7f6 ff6f 	bl	8000608 <__aeabi_dmul>
 800972a:	2301      	movs	r3, #1
 800972c:	9a04      	ldr	r2, [sp, #16]
 800972e:	3208      	adds	r2, #8
 8009730:	f10a 0a01 	add.w	sl, sl, #1
 8009734:	106d      	asrs	r5, r5, #1
 8009736:	9204      	str	r2, [sp, #16]
 8009738:	e7cc      	b.n	80096d4 <_strtod_l+0x4d4>
 800973a:	d0ec      	beq.n	8009716 <_strtod_l+0x516>
 800973c:	426d      	negs	r5, r5
 800973e:	f015 020f 	ands.w	r2, r5, #15
 8009742:	d00a      	beq.n	800975a <_strtod_l+0x55a>
 8009744:	4b11      	ldr	r3, [pc, #68]	; (800978c <_strtod_l+0x58c>)
 8009746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800974a:	4640      	mov	r0, r8
 800974c:	4649      	mov	r1, r9
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	f7f7 f883 	bl	800085c <__aeabi_ddiv>
 8009756:	4680      	mov	r8, r0
 8009758:	4689      	mov	r9, r1
 800975a:	112d      	asrs	r5, r5, #4
 800975c:	d0db      	beq.n	8009716 <_strtod_l+0x516>
 800975e:	2d1f      	cmp	r5, #31
 8009760:	dd1e      	ble.n	80097a0 <_strtod_l+0x5a0>
 8009762:	2500      	movs	r5, #0
 8009764:	46ab      	mov	fp, r5
 8009766:	9509      	str	r5, [sp, #36]	; 0x24
 8009768:	9505      	str	r5, [sp, #20]
 800976a:	2322      	movs	r3, #34	; 0x22
 800976c:	f04f 0800 	mov.w	r8, #0
 8009770:	f04f 0900 	mov.w	r9, #0
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	e78d      	b.n	8009694 <_strtod_l+0x494>
 8009778:	0800b0fd 	.word	0x0800b0fd
 800977c:	0800b324 	.word	0x0800b324
 8009780:	0800b0f5 	.word	0x0800b0f5
 8009784:	0800b12c 	.word	0x0800b12c
 8009788:	0800b4b5 	.word	0x0800b4b5
 800978c:	0800b238 	.word	0x0800b238
 8009790:	0800b210 	.word	0x0800b210
 8009794:	7ff00000 	.word	0x7ff00000
 8009798:	7ca00000 	.word	0x7ca00000
 800979c:	7fefffff 	.word	0x7fefffff
 80097a0:	f015 0310 	ands.w	r3, r5, #16
 80097a4:	bf18      	it	ne
 80097a6:	236a      	movne	r3, #106	; 0x6a
 80097a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009b4c <_strtod_l+0x94c>
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	4640      	mov	r0, r8
 80097b0:	4649      	mov	r1, r9
 80097b2:	2300      	movs	r3, #0
 80097b4:	07ea      	lsls	r2, r5, #31
 80097b6:	d504      	bpl.n	80097c2 <_strtod_l+0x5c2>
 80097b8:	e9da 2300 	ldrd	r2, r3, [sl]
 80097bc:	f7f6 ff24 	bl	8000608 <__aeabi_dmul>
 80097c0:	2301      	movs	r3, #1
 80097c2:	106d      	asrs	r5, r5, #1
 80097c4:	f10a 0a08 	add.w	sl, sl, #8
 80097c8:	d1f4      	bne.n	80097b4 <_strtod_l+0x5b4>
 80097ca:	b10b      	cbz	r3, 80097d0 <_strtod_l+0x5d0>
 80097cc:	4680      	mov	r8, r0
 80097ce:	4689      	mov	r9, r1
 80097d0:	9b04      	ldr	r3, [sp, #16]
 80097d2:	b1bb      	cbz	r3, 8009804 <_strtod_l+0x604>
 80097d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80097d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80097dc:	2b00      	cmp	r3, #0
 80097de:	4649      	mov	r1, r9
 80097e0:	dd10      	ble.n	8009804 <_strtod_l+0x604>
 80097e2:	2b1f      	cmp	r3, #31
 80097e4:	f340 811e 	ble.w	8009a24 <_strtod_l+0x824>
 80097e8:	2b34      	cmp	r3, #52	; 0x34
 80097ea:	bfde      	ittt	le
 80097ec:	f04f 33ff 	movle.w	r3, #4294967295
 80097f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80097f4:	4093      	lslle	r3, r2
 80097f6:	f04f 0800 	mov.w	r8, #0
 80097fa:	bfcc      	ite	gt
 80097fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009800:	ea03 0901 	andle.w	r9, r3, r1
 8009804:	2200      	movs	r2, #0
 8009806:	2300      	movs	r3, #0
 8009808:	4640      	mov	r0, r8
 800980a:	4649      	mov	r1, r9
 800980c:	f7f7 f964 	bl	8000ad8 <__aeabi_dcmpeq>
 8009810:	2800      	cmp	r0, #0
 8009812:	d1a6      	bne.n	8009762 <_strtod_l+0x562>
 8009814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800981a:	4633      	mov	r3, r6
 800981c:	465a      	mov	r2, fp
 800981e:	4620      	mov	r0, r4
 8009820:	f7ff f8cc 	bl	80089bc <__s2b>
 8009824:	9009      	str	r0, [sp, #36]	; 0x24
 8009826:	2800      	cmp	r0, #0
 8009828:	f43f af2a 	beq.w	8009680 <_strtod_l+0x480>
 800982c:	9a08      	ldr	r2, [sp, #32]
 800982e:	9b05      	ldr	r3, [sp, #20]
 8009830:	2a00      	cmp	r2, #0
 8009832:	eba3 0307 	sub.w	r3, r3, r7
 8009836:	bfa8      	it	ge
 8009838:	2300      	movge	r3, #0
 800983a:	930c      	str	r3, [sp, #48]	; 0x30
 800983c:	2500      	movs	r5, #0
 800983e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009842:	9312      	str	r3, [sp, #72]	; 0x48
 8009844:	46ab      	mov	fp, r5
 8009846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009848:	4620      	mov	r0, r4
 800984a:	6859      	ldr	r1, [r3, #4]
 800984c:	f7ff f80e 	bl	800886c <_Balloc>
 8009850:	9005      	str	r0, [sp, #20]
 8009852:	2800      	cmp	r0, #0
 8009854:	f43f af18 	beq.w	8009688 <_strtod_l+0x488>
 8009858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985a:	691a      	ldr	r2, [r3, #16]
 800985c:	3202      	adds	r2, #2
 800985e:	f103 010c 	add.w	r1, r3, #12
 8009862:	0092      	lsls	r2, r2, #2
 8009864:	300c      	adds	r0, #12
 8009866:	f7fe f872 	bl	800794e <memcpy>
 800986a:	ec49 8b10 	vmov	d0, r8, r9
 800986e:	aa18      	add	r2, sp, #96	; 0x60
 8009870:	a917      	add	r1, sp, #92	; 0x5c
 8009872:	4620      	mov	r0, r4
 8009874:	f7ff fbd6 	bl	8009024 <__d2b>
 8009878:	ec49 8b18 	vmov	d8, r8, r9
 800987c:	9016      	str	r0, [sp, #88]	; 0x58
 800987e:	2800      	cmp	r0, #0
 8009880:	f43f af02 	beq.w	8009688 <_strtod_l+0x488>
 8009884:	2101      	movs	r1, #1
 8009886:	4620      	mov	r0, r4
 8009888:	f7ff f930 	bl	8008aec <__i2b>
 800988c:	4683      	mov	fp, r0
 800988e:	2800      	cmp	r0, #0
 8009890:	f43f aefa 	beq.w	8009688 <_strtod_l+0x488>
 8009894:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009896:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009898:	2e00      	cmp	r6, #0
 800989a:	bfab      	itete	ge
 800989c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800989e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80098a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80098a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80098a6:	bfac      	ite	ge
 80098a8:	eb06 0a03 	addge.w	sl, r6, r3
 80098ac:	1b9f      	sublt	r7, r3, r6
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	1af6      	subs	r6, r6, r3
 80098b2:	4416      	add	r6, r2
 80098b4:	4ba0      	ldr	r3, [pc, #640]	; (8009b38 <_strtod_l+0x938>)
 80098b6:	3e01      	subs	r6, #1
 80098b8:	429e      	cmp	r6, r3
 80098ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80098be:	f280 80c4 	bge.w	8009a4a <_strtod_l+0x84a>
 80098c2:	1b9b      	subs	r3, r3, r6
 80098c4:	2b1f      	cmp	r3, #31
 80098c6:	eba2 0203 	sub.w	r2, r2, r3
 80098ca:	f04f 0101 	mov.w	r1, #1
 80098ce:	f300 80b0 	bgt.w	8009a32 <_strtod_l+0x832>
 80098d2:	fa01 f303 	lsl.w	r3, r1, r3
 80098d6:	930e      	str	r3, [sp, #56]	; 0x38
 80098d8:	2300      	movs	r3, #0
 80098da:	930d      	str	r3, [sp, #52]	; 0x34
 80098dc:	eb0a 0602 	add.w	r6, sl, r2
 80098e0:	9b04      	ldr	r3, [sp, #16]
 80098e2:	45b2      	cmp	sl, r6
 80098e4:	4417      	add	r7, r2
 80098e6:	441f      	add	r7, r3
 80098e8:	4653      	mov	r3, sl
 80098ea:	bfa8      	it	ge
 80098ec:	4633      	movge	r3, r6
 80098ee:	42bb      	cmp	r3, r7
 80098f0:	bfa8      	it	ge
 80098f2:	463b      	movge	r3, r7
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	bfc2      	ittt	gt
 80098f8:	1af6      	subgt	r6, r6, r3
 80098fa:	1aff      	subgt	r7, r7, r3
 80098fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009902:	2b00      	cmp	r3, #0
 8009904:	dd17      	ble.n	8009936 <_strtod_l+0x736>
 8009906:	4659      	mov	r1, fp
 8009908:	461a      	mov	r2, r3
 800990a:	4620      	mov	r0, r4
 800990c:	f7ff f9ae 	bl	8008c6c <__pow5mult>
 8009910:	4683      	mov	fp, r0
 8009912:	2800      	cmp	r0, #0
 8009914:	f43f aeb8 	beq.w	8009688 <_strtod_l+0x488>
 8009918:	4601      	mov	r1, r0
 800991a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800991c:	4620      	mov	r0, r4
 800991e:	f7ff f8fb 	bl	8008b18 <__multiply>
 8009922:	900b      	str	r0, [sp, #44]	; 0x2c
 8009924:	2800      	cmp	r0, #0
 8009926:	f43f aeaf 	beq.w	8009688 <_strtod_l+0x488>
 800992a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800992c:	4620      	mov	r0, r4
 800992e:	f7fe ffdd 	bl	80088ec <_Bfree>
 8009932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009934:	9316      	str	r3, [sp, #88]	; 0x58
 8009936:	2e00      	cmp	r6, #0
 8009938:	f300 808c 	bgt.w	8009a54 <_strtod_l+0x854>
 800993c:	9b08      	ldr	r3, [sp, #32]
 800993e:	2b00      	cmp	r3, #0
 8009940:	dd08      	ble.n	8009954 <_strtod_l+0x754>
 8009942:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009944:	9905      	ldr	r1, [sp, #20]
 8009946:	4620      	mov	r0, r4
 8009948:	f7ff f990 	bl	8008c6c <__pow5mult>
 800994c:	9005      	str	r0, [sp, #20]
 800994e:	2800      	cmp	r0, #0
 8009950:	f43f ae9a 	beq.w	8009688 <_strtod_l+0x488>
 8009954:	2f00      	cmp	r7, #0
 8009956:	dd08      	ble.n	800996a <_strtod_l+0x76a>
 8009958:	9905      	ldr	r1, [sp, #20]
 800995a:	463a      	mov	r2, r7
 800995c:	4620      	mov	r0, r4
 800995e:	f7ff f9df 	bl	8008d20 <__lshift>
 8009962:	9005      	str	r0, [sp, #20]
 8009964:	2800      	cmp	r0, #0
 8009966:	f43f ae8f 	beq.w	8009688 <_strtod_l+0x488>
 800996a:	f1ba 0f00 	cmp.w	sl, #0
 800996e:	dd08      	ble.n	8009982 <_strtod_l+0x782>
 8009970:	4659      	mov	r1, fp
 8009972:	4652      	mov	r2, sl
 8009974:	4620      	mov	r0, r4
 8009976:	f7ff f9d3 	bl	8008d20 <__lshift>
 800997a:	4683      	mov	fp, r0
 800997c:	2800      	cmp	r0, #0
 800997e:	f43f ae83 	beq.w	8009688 <_strtod_l+0x488>
 8009982:	9a05      	ldr	r2, [sp, #20]
 8009984:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff fa52 	bl	8008e30 <__mdiff>
 800998c:	4605      	mov	r5, r0
 800998e:	2800      	cmp	r0, #0
 8009990:	f43f ae7a 	beq.w	8009688 <_strtod_l+0x488>
 8009994:	68c3      	ldr	r3, [r0, #12]
 8009996:	930b      	str	r3, [sp, #44]	; 0x2c
 8009998:	2300      	movs	r3, #0
 800999a:	60c3      	str	r3, [r0, #12]
 800999c:	4659      	mov	r1, fp
 800999e:	f7ff fa2b 	bl	8008df8 <__mcmp>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	da60      	bge.n	8009a68 <_strtod_l+0x868>
 80099a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a8:	ea53 0308 	orrs.w	r3, r3, r8
 80099ac:	f040 8084 	bne.w	8009ab8 <_strtod_l+0x8b8>
 80099b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d17f      	bne.n	8009ab8 <_strtod_l+0x8b8>
 80099b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099bc:	0d1b      	lsrs	r3, r3, #20
 80099be:	051b      	lsls	r3, r3, #20
 80099c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80099c4:	d978      	bls.n	8009ab8 <_strtod_l+0x8b8>
 80099c6:	696b      	ldr	r3, [r5, #20]
 80099c8:	b913      	cbnz	r3, 80099d0 <_strtod_l+0x7d0>
 80099ca:	692b      	ldr	r3, [r5, #16]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	dd73      	ble.n	8009ab8 <_strtod_l+0x8b8>
 80099d0:	4629      	mov	r1, r5
 80099d2:	2201      	movs	r2, #1
 80099d4:	4620      	mov	r0, r4
 80099d6:	f7ff f9a3 	bl	8008d20 <__lshift>
 80099da:	4659      	mov	r1, fp
 80099dc:	4605      	mov	r5, r0
 80099de:	f7ff fa0b 	bl	8008df8 <__mcmp>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	dd68      	ble.n	8009ab8 <_strtod_l+0x8b8>
 80099e6:	9904      	ldr	r1, [sp, #16]
 80099e8:	4a54      	ldr	r2, [pc, #336]	; (8009b3c <_strtod_l+0x93c>)
 80099ea:	464b      	mov	r3, r9
 80099ec:	2900      	cmp	r1, #0
 80099ee:	f000 8084 	beq.w	8009afa <_strtod_l+0x8fa>
 80099f2:	ea02 0109 	and.w	r1, r2, r9
 80099f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80099fa:	dc7e      	bgt.n	8009afa <_strtod_l+0x8fa>
 80099fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009a00:	f77f aeb3 	ble.w	800976a <_strtod_l+0x56a>
 8009a04:	4b4e      	ldr	r3, [pc, #312]	; (8009b40 <_strtod_l+0x940>)
 8009a06:	4640      	mov	r0, r8
 8009a08:	4649      	mov	r1, r9
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f7f6 fdfc 	bl	8000608 <__aeabi_dmul>
 8009a10:	4b4a      	ldr	r3, [pc, #296]	; (8009b3c <_strtod_l+0x93c>)
 8009a12:	400b      	ands	r3, r1
 8009a14:	4680      	mov	r8, r0
 8009a16:	4689      	mov	r9, r1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f47f ae3f 	bne.w	800969c <_strtod_l+0x49c>
 8009a1e:	2322      	movs	r3, #34	; 0x22
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	e63b      	b.n	800969c <_strtod_l+0x49c>
 8009a24:	f04f 32ff 	mov.w	r2, #4294967295
 8009a28:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2c:	ea03 0808 	and.w	r8, r3, r8
 8009a30:	e6e8      	b.n	8009804 <_strtod_l+0x604>
 8009a32:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009a36:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009a3a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009a3e:	36e2      	adds	r6, #226	; 0xe2
 8009a40:	fa01 f306 	lsl.w	r3, r1, r6
 8009a44:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009a48:	e748      	b.n	80098dc <_strtod_l+0x6dc>
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009a52:	e743      	b.n	80098dc <_strtod_l+0x6dc>
 8009a54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009a56:	4632      	mov	r2, r6
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f7ff f961 	bl	8008d20 <__lshift>
 8009a5e:	9016      	str	r0, [sp, #88]	; 0x58
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f47f af6b 	bne.w	800993c <_strtod_l+0x73c>
 8009a66:	e60f      	b.n	8009688 <_strtod_l+0x488>
 8009a68:	46ca      	mov	sl, r9
 8009a6a:	d171      	bne.n	8009b50 <_strtod_l+0x950>
 8009a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a72:	b352      	cbz	r2, 8009aca <_strtod_l+0x8ca>
 8009a74:	4a33      	ldr	r2, [pc, #204]	; (8009b44 <_strtod_l+0x944>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d12a      	bne.n	8009ad0 <_strtod_l+0x8d0>
 8009a7a:	9b04      	ldr	r3, [sp, #16]
 8009a7c:	4641      	mov	r1, r8
 8009a7e:	b1fb      	cbz	r3, 8009ac0 <_strtod_l+0x8c0>
 8009a80:	4b2e      	ldr	r3, [pc, #184]	; (8009b3c <_strtod_l+0x93c>)
 8009a82:	ea09 0303 	and.w	r3, r9, r3
 8009a86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8e:	d81a      	bhi.n	8009ac6 <_strtod_l+0x8c6>
 8009a90:	0d1b      	lsrs	r3, r3, #20
 8009a92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a96:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9a:	4299      	cmp	r1, r3
 8009a9c:	d118      	bne.n	8009ad0 <_strtod_l+0x8d0>
 8009a9e:	4b2a      	ldr	r3, [pc, #168]	; (8009b48 <_strtod_l+0x948>)
 8009aa0:	459a      	cmp	sl, r3
 8009aa2:	d102      	bne.n	8009aaa <_strtod_l+0x8aa>
 8009aa4:	3101      	adds	r1, #1
 8009aa6:	f43f adef 	beq.w	8009688 <_strtod_l+0x488>
 8009aaa:	4b24      	ldr	r3, [pc, #144]	; (8009b3c <_strtod_l+0x93c>)
 8009aac:	ea0a 0303 	and.w	r3, sl, r3
 8009ab0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009ab4:	f04f 0800 	mov.w	r8, #0
 8009ab8:	9b04      	ldr	r3, [sp, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1a2      	bne.n	8009a04 <_strtod_l+0x804>
 8009abe:	e5ed      	b.n	800969c <_strtod_l+0x49c>
 8009ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac4:	e7e9      	b.n	8009a9a <_strtod_l+0x89a>
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	e7e7      	b.n	8009a9a <_strtod_l+0x89a>
 8009aca:	ea53 0308 	orrs.w	r3, r3, r8
 8009ace:	d08a      	beq.n	80099e6 <_strtod_l+0x7e6>
 8009ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ad2:	b1e3      	cbz	r3, 8009b0e <_strtod_l+0x90e>
 8009ad4:	ea13 0f0a 	tst.w	r3, sl
 8009ad8:	d0ee      	beq.n	8009ab8 <_strtod_l+0x8b8>
 8009ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009adc:	9a04      	ldr	r2, [sp, #16]
 8009ade:	4640      	mov	r0, r8
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	b1c3      	cbz	r3, 8009b16 <_strtod_l+0x916>
 8009ae4:	f7ff fb6f 	bl	80091c6 <sulp>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	ec51 0b18 	vmov	r0, r1, d8
 8009af0:	f7f6 fbd4 	bl	800029c <__adddf3>
 8009af4:	4680      	mov	r8, r0
 8009af6:	4689      	mov	r9, r1
 8009af8:	e7de      	b.n	8009ab8 <_strtod_l+0x8b8>
 8009afa:	4013      	ands	r3, r2
 8009afc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009b04:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009b08:	f04f 38ff 	mov.w	r8, #4294967295
 8009b0c:	e7d4      	b.n	8009ab8 <_strtod_l+0x8b8>
 8009b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b10:	ea13 0f08 	tst.w	r3, r8
 8009b14:	e7e0      	b.n	8009ad8 <_strtod_l+0x8d8>
 8009b16:	f7ff fb56 	bl	80091c6 <sulp>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	ec51 0b18 	vmov	r0, r1, d8
 8009b22:	f7f6 fbb9 	bl	8000298 <__aeabi_dsub>
 8009b26:	2200      	movs	r2, #0
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4680      	mov	r8, r0
 8009b2c:	4689      	mov	r9, r1
 8009b2e:	f7f6 ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d0c0      	beq.n	8009ab8 <_strtod_l+0x8b8>
 8009b36:	e618      	b.n	800976a <_strtod_l+0x56a>
 8009b38:	fffffc02 	.word	0xfffffc02
 8009b3c:	7ff00000 	.word	0x7ff00000
 8009b40:	39500000 	.word	0x39500000
 8009b44:	000fffff 	.word	0x000fffff
 8009b48:	7fefffff 	.word	0x7fefffff
 8009b4c:	0800b338 	.word	0x0800b338
 8009b50:	4659      	mov	r1, fp
 8009b52:	4628      	mov	r0, r5
 8009b54:	f7ff fac0 	bl	80090d8 <__ratio>
 8009b58:	ec57 6b10 	vmov	r6, r7, d0
 8009b5c:	ee10 0a10 	vmov	r0, s0
 8009b60:	2200      	movs	r2, #0
 8009b62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b66:	4639      	mov	r1, r7
 8009b68:	f7f6 ffca 	bl	8000b00 <__aeabi_dcmple>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d071      	beq.n	8009c54 <_strtod_l+0xa54>
 8009b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d17c      	bne.n	8009c70 <_strtod_l+0xa70>
 8009b76:	f1b8 0f00 	cmp.w	r8, #0
 8009b7a:	d15a      	bne.n	8009c32 <_strtod_l+0xa32>
 8009b7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d15d      	bne.n	8009c40 <_strtod_l+0xa40>
 8009b84:	4b90      	ldr	r3, [pc, #576]	; (8009dc8 <_strtod_l+0xbc8>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	4630      	mov	r0, r6
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f7f6 ffae 	bl	8000aec <__aeabi_dcmplt>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d15c      	bne.n	8009c4e <_strtod_l+0xa4e>
 8009b94:	4630      	mov	r0, r6
 8009b96:	4639      	mov	r1, r7
 8009b98:	4b8c      	ldr	r3, [pc, #560]	; (8009dcc <_strtod_l+0xbcc>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f7f6 fd34 	bl	8000608 <__aeabi_dmul>
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	460f      	mov	r7, r1
 8009ba4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009ba8:	9606      	str	r6, [sp, #24]
 8009baa:	9307      	str	r3, [sp, #28]
 8009bac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009bb4:	4b86      	ldr	r3, [pc, #536]	; (8009dd0 <_strtod_l+0xbd0>)
 8009bb6:	ea0a 0303 	and.w	r3, sl, r3
 8009bba:	930d      	str	r3, [sp, #52]	; 0x34
 8009bbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bbe:	4b85      	ldr	r3, [pc, #532]	; (8009dd4 <_strtod_l+0xbd4>)
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	f040 8090 	bne.w	8009ce6 <_strtod_l+0xae6>
 8009bc6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009bca:	ec49 8b10 	vmov	d0, r8, r9
 8009bce:	f7ff f9b9 	bl	8008f44 <__ulp>
 8009bd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bd6:	ec51 0b10 	vmov	r0, r1, d0
 8009bda:	f7f6 fd15 	bl	8000608 <__aeabi_dmul>
 8009bde:	4642      	mov	r2, r8
 8009be0:	464b      	mov	r3, r9
 8009be2:	f7f6 fb5b 	bl	800029c <__adddf3>
 8009be6:	460b      	mov	r3, r1
 8009be8:	4979      	ldr	r1, [pc, #484]	; (8009dd0 <_strtod_l+0xbd0>)
 8009bea:	4a7b      	ldr	r2, [pc, #492]	; (8009dd8 <_strtod_l+0xbd8>)
 8009bec:	4019      	ands	r1, r3
 8009bee:	4291      	cmp	r1, r2
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	d944      	bls.n	8009c7e <_strtod_l+0xa7e>
 8009bf4:	ee18 2a90 	vmov	r2, s17
 8009bf8:	4b78      	ldr	r3, [pc, #480]	; (8009ddc <_strtod_l+0xbdc>)
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d104      	bne.n	8009c08 <_strtod_l+0xa08>
 8009bfe:	ee18 3a10 	vmov	r3, s16
 8009c02:	3301      	adds	r3, #1
 8009c04:	f43f ad40 	beq.w	8009688 <_strtod_l+0x488>
 8009c08:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009ddc <_strtod_l+0xbdc>
 8009c0c:	f04f 38ff 	mov.w	r8, #4294967295
 8009c10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7fe fe6a 	bl	80088ec <_Bfree>
 8009c18:	9905      	ldr	r1, [sp, #20]
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f7fe fe66 	bl	80088ec <_Bfree>
 8009c20:	4659      	mov	r1, fp
 8009c22:	4620      	mov	r0, r4
 8009c24:	f7fe fe62 	bl	80088ec <_Bfree>
 8009c28:	4629      	mov	r1, r5
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f7fe fe5e 	bl	80088ec <_Bfree>
 8009c30:	e609      	b.n	8009846 <_strtod_l+0x646>
 8009c32:	f1b8 0f01 	cmp.w	r8, #1
 8009c36:	d103      	bne.n	8009c40 <_strtod_l+0xa40>
 8009c38:	f1b9 0f00 	cmp.w	r9, #0
 8009c3c:	f43f ad95 	beq.w	800976a <_strtod_l+0x56a>
 8009c40:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009d98 <_strtod_l+0xb98>
 8009c44:	4f60      	ldr	r7, [pc, #384]	; (8009dc8 <_strtod_l+0xbc8>)
 8009c46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c4a:	2600      	movs	r6, #0
 8009c4c:	e7ae      	b.n	8009bac <_strtod_l+0x9ac>
 8009c4e:	4f5f      	ldr	r7, [pc, #380]	; (8009dcc <_strtod_l+0xbcc>)
 8009c50:	2600      	movs	r6, #0
 8009c52:	e7a7      	b.n	8009ba4 <_strtod_l+0x9a4>
 8009c54:	4b5d      	ldr	r3, [pc, #372]	; (8009dcc <_strtod_l+0xbcc>)
 8009c56:	4630      	mov	r0, r6
 8009c58:	4639      	mov	r1, r7
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f7f6 fcd4 	bl	8000608 <__aeabi_dmul>
 8009c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d09c      	beq.n	8009ba4 <_strtod_l+0x9a4>
 8009c6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c6e:	e79d      	b.n	8009bac <_strtod_l+0x9ac>
 8009c70:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009da0 <_strtod_l+0xba0>
 8009c74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c78:	ec57 6b17 	vmov	r6, r7, d7
 8009c7c:	e796      	b.n	8009bac <_strtod_l+0x9ac>
 8009c7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009c82:	9b04      	ldr	r3, [sp, #16]
 8009c84:	46ca      	mov	sl, r9
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1c2      	bne.n	8009c10 <_strtod_l+0xa10>
 8009c8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c90:	0d1b      	lsrs	r3, r3, #20
 8009c92:	051b      	lsls	r3, r3, #20
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d1bb      	bne.n	8009c10 <_strtod_l+0xa10>
 8009c98:	4630      	mov	r0, r6
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	f7f7 f814 	bl	8000cc8 <__aeabi_d2lz>
 8009ca0:	f7f6 fc84 	bl	80005ac <__aeabi_l2d>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4630      	mov	r0, r6
 8009caa:	4639      	mov	r1, r7
 8009cac:	f7f6 faf4 	bl	8000298 <__aeabi_dsub>
 8009cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cb6:	ea43 0308 	orr.w	r3, r3, r8
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	460f      	mov	r7, r1
 8009cc0:	d054      	beq.n	8009d6c <_strtod_l+0xb6c>
 8009cc2:	a339      	add	r3, pc, #228	; (adr r3, 8009da8 <_strtod_l+0xba8>)
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f7f6 ff10 	bl	8000aec <__aeabi_dcmplt>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	f47f ace5 	bne.w	800969c <_strtod_l+0x49c>
 8009cd2:	a337      	add	r3, pc, #220	; (adr r3, 8009db0 <_strtod_l+0xbb0>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	4630      	mov	r0, r6
 8009cda:	4639      	mov	r1, r7
 8009cdc:	f7f6 ff24 	bl	8000b28 <__aeabi_dcmpgt>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d095      	beq.n	8009c10 <_strtod_l+0xa10>
 8009ce4:	e4da      	b.n	800969c <_strtod_l+0x49c>
 8009ce6:	9b04      	ldr	r3, [sp, #16]
 8009ce8:	b333      	cbz	r3, 8009d38 <_strtod_l+0xb38>
 8009cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009cf0:	d822      	bhi.n	8009d38 <_strtod_l+0xb38>
 8009cf2:	a331      	add	r3, pc, #196	; (adr r3, 8009db8 <_strtod_l+0xbb8>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	f7f6 ff00 	bl	8000b00 <__aeabi_dcmple>
 8009d00:	b1a0      	cbz	r0, 8009d2c <_strtod_l+0xb2c>
 8009d02:	4639      	mov	r1, r7
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7f6 ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8009d0a:	2801      	cmp	r0, #1
 8009d0c:	bf38      	it	cc
 8009d0e:	2001      	movcc	r0, #1
 8009d10:	f7f6 fc00 	bl	8000514 <__aeabi_ui2d>
 8009d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d16:	4606      	mov	r6, r0
 8009d18:	460f      	mov	r7, r1
 8009d1a:	bb23      	cbnz	r3, 8009d66 <_strtod_l+0xb66>
 8009d1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d20:	9010      	str	r0, [sp, #64]	; 0x40
 8009d22:	9311      	str	r3, [sp, #68]	; 0x44
 8009d24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009d34:	1a9b      	subs	r3, r3, r2
 8009d36:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d3c:	eeb0 0a48 	vmov.f32	s0, s16
 8009d40:	eef0 0a68 	vmov.f32	s1, s17
 8009d44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009d48:	f7ff f8fc 	bl	8008f44 <__ulp>
 8009d4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d50:	ec53 2b10 	vmov	r2, r3, d0
 8009d54:	f7f6 fc58 	bl	8000608 <__aeabi_dmul>
 8009d58:	ec53 2b18 	vmov	r2, r3, d8
 8009d5c:	f7f6 fa9e 	bl	800029c <__adddf3>
 8009d60:	4680      	mov	r8, r0
 8009d62:	4689      	mov	r9, r1
 8009d64:	e78d      	b.n	8009c82 <_strtod_l+0xa82>
 8009d66:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009d6a:	e7db      	b.n	8009d24 <_strtod_l+0xb24>
 8009d6c:	a314      	add	r3, pc, #80	; (adr r3, 8009dc0 <_strtod_l+0xbc0>)
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	f7f6 febb 	bl	8000aec <__aeabi_dcmplt>
 8009d76:	e7b3      	b.n	8009ce0 <_strtod_l+0xae0>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d80:	6013      	str	r3, [r2, #0]
 8009d82:	f7ff ba7c 	b.w	800927e <_strtod_l+0x7e>
 8009d86:	2a65      	cmp	r2, #101	; 0x65
 8009d88:	f43f ab75 	beq.w	8009476 <_strtod_l+0x276>
 8009d8c:	2a45      	cmp	r2, #69	; 0x45
 8009d8e:	f43f ab72 	beq.w	8009476 <_strtod_l+0x276>
 8009d92:	2301      	movs	r3, #1
 8009d94:	f7ff bbaa 	b.w	80094ec <_strtod_l+0x2ec>
 8009d98:	00000000 	.word	0x00000000
 8009d9c:	bff00000 	.word	0xbff00000
 8009da0:	00000000 	.word	0x00000000
 8009da4:	3ff00000 	.word	0x3ff00000
 8009da8:	94a03595 	.word	0x94a03595
 8009dac:	3fdfffff 	.word	0x3fdfffff
 8009db0:	35afe535 	.word	0x35afe535
 8009db4:	3fe00000 	.word	0x3fe00000
 8009db8:	ffc00000 	.word	0xffc00000
 8009dbc:	41dfffff 	.word	0x41dfffff
 8009dc0:	94a03595 	.word	0x94a03595
 8009dc4:	3fcfffff 	.word	0x3fcfffff
 8009dc8:	3ff00000 	.word	0x3ff00000
 8009dcc:	3fe00000 	.word	0x3fe00000
 8009dd0:	7ff00000 	.word	0x7ff00000
 8009dd4:	7fe00000 	.word	0x7fe00000
 8009dd8:	7c9fffff 	.word	0x7c9fffff
 8009ddc:	7fefffff 	.word	0x7fefffff

08009de0 <_strtod_r>:
 8009de0:	4b01      	ldr	r3, [pc, #4]	; (8009de8 <_strtod_r+0x8>)
 8009de2:	f7ff ba0d 	b.w	8009200 <_strtod_l>
 8009de6:	bf00      	nop
 8009de8:	2000006c 	.word	0x2000006c

08009dec <_strtol_l.constprop.0>:
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df2:	d001      	beq.n	8009df8 <_strtol_l.constprop.0+0xc>
 8009df4:	2b24      	cmp	r3, #36	; 0x24
 8009df6:	d906      	bls.n	8009e06 <_strtol_l.constprop.0+0x1a>
 8009df8:	f7fd fd7c 	bl	80078f4 <__errno>
 8009dfc:	2316      	movs	r3, #22
 8009dfe:	6003      	str	r3, [r0, #0]
 8009e00:	2000      	movs	r0, #0
 8009e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009eec <_strtol_l.constprop.0+0x100>
 8009e0a:	460d      	mov	r5, r1
 8009e0c:	462e      	mov	r6, r5
 8009e0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e12:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009e16:	f017 0708 	ands.w	r7, r7, #8
 8009e1a:	d1f7      	bne.n	8009e0c <_strtol_l.constprop.0+0x20>
 8009e1c:	2c2d      	cmp	r4, #45	; 0x2d
 8009e1e:	d132      	bne.n	8009e86 <_strtol_l.constprop.0+0x9a>
 8009e20:	782c      	ldrb	r4, [r5, #0]
 8009e22:	2701      	movs	r7, #1
 8009e24:	1cb5      	adds	r5, r6, #2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d05b      	beq.n	8009ee2 <_strtol_l.constprop.0+0xf6>
 8009e2a:	2b10      	cmp	r3, #16
 8009e2c:	d109      	bne.n	8009e42 <_strtol_l.constprop.0+0x56>
 8009e2e:	2c30      	cmp	r4, #48	; 0x30
 8009e30:	d107      	bne.n	8009e42 <_strtol_l.constprop.0+0x56>
 8009e32:	782c      	ldrb	r4, [r5, #0]
 8009e34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e38:	2c58      	cmp	r4, #88	; 0x58
 8009e3a:	d14d      	bne.n	8009ed8 <_strtol_l.constprop.0+0xec>
 8009e3c:	786c      	ldrb	r4, [r5, #1]
 8009e3e:	2310      	movs	r3, #16
 8009e40:	3502      	adds	r5, #2
 8009e42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009e46:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e4a:	f04f 0e00 	mov.w	lr, #0
 8009e4e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009e52:	4676      	mov	r6, lr
 8009e54:	fb03 8a19 	mls	sl, r3, r9, r8
 8009e58:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009e5c:	f1bc 0f09 	cmp.w	ip, #9
 8009e60:	d816      	bhi.n	8009e90 <_strtol_l.constprop.0+0xa4>
 8009e62:	4664      	mov	r4, ip
 8009e64:	42a3      	cmp	r3, r4
 8009e66:	dd24      	ble.n	8009eb2 <_strtol_l.constprop.0+0xc6>
 8009e68:	f1be 3fff 	cmp.w	lr, #4294967295
 8009e6c:	d008      	beq.n	8009e80 <_strtol_l.constprop.0+0x94>
 8009e6e:	45b1      	cmp	r9, r6
 8009e70:	d31c      	bcc.n	8009eac <_strtol_l.constprop.0+0xc0>
 8009e72:	d101      	bne.n	8009e78 <_strtol_l.constprop.0+0x8c>
 8009e74:	45a2      	cmp	sl, r4
 8009e76:	db19      	blt.n	8009eac <_strtol_l.constprop.0+0xc0>
 8009e78:	fb06 4603 	mla	r6, r6, r3, r4
 8009e7c:	f04f 0e01 	mov.w	lr, #1
 8009e80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e84:	e7e8      	b.n	8009e58 <_strtol_l.constprop.0+0x6c>
 8009e86:	2c2b      	cmp	r4, #43	; 0x2b
 8009e88:	bf04      	itt	eq
 8009e8a:	782c      	ldrbeq	r4, [r5, #0]
 8009e8c:	1cb5      	addeq	r5, r6, #2
 8009e8e:	e7ca      	b.n	8009e26 <_strtol_l.constprop.0+0x3a>
 8009e90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009e94:	f1bc 0f19 	cmp.w	ip, #25
 8009e98:	d801      	bhi.n	8009e9e <_strtol_l.constprop.0+0xb2>
 8009e9a:	3c37      	subs	r4, #55	; 0x37
 8009e9c:	e7e2      	b.n	8009e64 <_strtol_l.constprop.0+0x78>
 8009e9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009ea2:	f1bc 0f19 	cmp.w	ip, #25
 8009ea6:	d804      	bhi.n	8009eb2 <_strtol_l.constprop.0+0xc6>
 8009ea8:	3c57      	subs	r4, #87	; 0x57
 8009eaa:	e7db      	b.n	8009e64 <_strtol_l.constprop.0+0x78>
 8009eac:	f04f 3eff 	mov.w	lr, #4294967295
 8009eb0:	e7e6      	b.n	8009e80 <_strtol_l.constprop.0+0x94>
 8009eb2:	f1be 3fff 	cmp.w	lr, #4294967295
 8009eb6:	d105      	bne.n	8009ec4 <_strtol_l.constprop.0+0xd8>
 8009eb8:	2322      	movs	r3, #34	; 0x22
 8009eba:	6003      	str	r3, [r0, #0]
 8009ebc:	4646      	mov	r6, r8
 8009ebe:	b942      	cbnz	r2, 8009ed2 <_strtol_l.constprop.0+0xe6>
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	e79e      	b.n	8009e02 <_strtol_l.constprop.0+0x16>
 8009ec4:	b107      	cbz	r7, 8009ec8 <_strtol_l.constprop.0+0xdc>
 8009ec6:	4276      	negs	r6, r6
 8009ec8:	2a00      	cmp	r2, #0
 8009eca:	d0f9      	beq.n	8009ec0 <_strtol_l.constprop.0+0xd4>
 8009ecc:	f1be 0f00 	cmp.w	lr, #0
 8009ed0:	d000      	beq.n	8009ed4 <_strtol_l.constprop.0+0xe8>
 8009ed2:	1e69      	subs	r1, r5, #1
 8009ed4:	6011      	str	r1, [r2, #0]
 8009ed6:	e7f3      	b.n	8009ec0 <_strtol_l.constprop.0+0xd4>
 8009ed8:	2430      	movs	r4, #48	; 0x30
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1b1      	bne.n	8009e42 <_strtol_l.constprop.0+0x56>
 8009ede:	2308      	movs	r3, #8
 8009ee0:	e7af      	b.n	8009e42 <_strtol_l.constprop.0+0x56>
 8009ee2:	2c30      	cmp	r4, #48	; 0x30
 8009ee4:	d0a5      	beq.n	8009e32 <_strtol_l.constprop.0+0x46>
 8009ee6:	230a      	movs	r3, #10
 8009ee8:	e7ab      	b.n	8009e42 <_strtol_l.constprop.0+0x56>
 8009eea:	bf00      	nop
 8009eec:	0800b361 	.word	0x0800b361

08009ef0 <_strtol_r>:
 8009ef0:	f7ff bf7c 	b.w	8009dec <_strtol_l.constprop.0>

08009ef4 <__ssputs_r>:
 8009ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef8:	688e      	ldr	r6, [r1, #8]
 8009efa:	461f      	mov	r7, r3
 8009efc:	42be      	cmp	r6, r7
 8009efe:	680b      	ldr	r3, [r1, #0]
 8009f00:	4682      	mov	sl, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	4690      	mov	r8, r2
 8009f06:	d82c      	bhi.n	8009f62 <__ssputs_r+0x6e>
 8009f08:	898a      	ldrh	r2, [r1, #12]
 8009f0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f0e:	d026      	beq.n	8009f5e <__ssputs_r+0x6a>
 8009f10:	6965      	ldr	r5, [r4, #20]
 8009f12:	6909      	ldr	r1, [r1, #16]
 8009f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f18:	eba3 0901 	sub.w	r9, r3, r1
 8009f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f20:	1c7b      	adds	r3, r7, #1
 8009f22:	444b      	add	r3, r9
 8009f24:	106d      	asrs	r5, r5, #1
 8009f26:	429d      	cmp	r5, r3
 8009f28:	bf38      	it	cc
 8009f2a:	461d      	movcc	r5, r3
 8009f2c:	0553      	lsls	r3, r2, #21
 8009f2e:	d527      	bpl.n	8009f80 <__ssputs_r+0x8c>
 8009f30:	4629      	mov	r1, r5
 8009f32:	f7fe fc0f 	bl	8008754 <_malloc_r>
 8009f36:	4606      	mov	r6, r0
 8009f38:	b360      	cbz	r0, 8009f94 <__ssputs_r+0xa0>
 8009f3a:	6921      	ldr	r1, [r4, #16]
 8009f3c:	464a      	mov	r2, r9
 8009f3e:	f7fd fd06 	bl	800794e <memcpy>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	6126      	str	r6, [r4, #16]
 8009f50:	6165      	str	r5, [r4, #20]
 8009f52:	444e      	add	r6, r9
 8009f54:	eba5 0509 	sub.w	r5, r5, r9
 8009f58:	6026      	str	r6, [r4, #0]
 8009f5a:	60a5      	str	r5, [r4, #8]
 8009f5c:	463e      	mov	r6, r7
 8009f5e:	42be      	cmp	r6, r7
 8009f60:	d900      	bls.n	8009f64 <__ssputs_r+0x70>
 8009f62:	463e      	mov	r6, r7
 8009f64:	6820      	ldr	r0, [r4, #0]
 8009f66:	4632      	mov	r2, r6
 8009f68:	4641      	mov	r1, r8
 8009f6a:	f000 fb6f 	bl	800a64c <memmove>
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	1b9b      	subs	r3, r3, r6
 8009f72:	60a3      	str	r3, [r4, #8]
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	4433      	add	r3, r6
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f80:	462a      	mov	r2, r5
 8009f82:	f000 ff66 	bl	800ae52 <_realloc_r>
 8009f86:	4606      	mov	r6, r0
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d1e0      	bne.n	8009f4e <__ssputs_r+0x5a>
 8009f8c:	6921      	ldr	r1, [r4, #16]
 8009f8e:	4650      	mov	r0, sl
 8009f90:	f7fe fb6c 	bl	800866c <_free_r>
 8009f94:	230c      	movs	r3, #12
 8009f96:	f8ca 3000 	str.w	r3, [sl]
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fa0:	81a3      	strh	r3, [r4, #12]
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa6:	e7e9      	b.n	8009f7c <__ssputs_r+0x88>

08009fa8 <_svfiprintf_r>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	4698      	mov	r8, r3
 8009fae:	898b      	ldrh	r3, [r1, #12]
 8009fb0:	061b      	lsls	r3, r3, #24
 8009fb2:	b09d      	sub	sp, #116	; 0x74
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	460d      	mov	r5, r1
 8009fb8:	4614      	mov	r4, r2
 8009fba:	d50e      	bpl.n	8009fda <_svfiprintf_r+0x32>
 8009fbc:	690b      	ldr	r3, [r1, #16]
 8009fbe:	b963      	cbnz	r3, 8009fda <_svfiprintf_r+0x32>
 8009fc0:	2140      	movs	r1, #64	; 0x40
 8009fc2:	f7fe fbc7 	bl	8008754 <_malloc_r>
 8009fc6:	6028      	str	r0, [r5, #0]
 8009fc8:	6128      	str	r0, [r5, #16]
 8009fca:	b920      	cbnz	r0, 8009fd6 <_svfiprintf_r+0x2e>
 8009fcc:	230c      	movs	r3, #12
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd4:	e0d0      	b.n	800a178 <_svfiprintf_r+0x1d0>
 8009fd6:	2340      	movs	r3, #64	; 0x40
 8009fd8:	616b      	str	r3, [r5, #20]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fde:	2320      	movs	r3, #32
 8009fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fe8:	2330      	movs	r3, #48	; 0x30
 8009fea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a190 <_svfiprintf_r+0x1e8>
 8009fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ff2:	f04f 0901 	mov.w	r9, #1
 8009ff6:	4623      	mov	r3, r4
 8009ff8:	469a      	mov	sl, r3
 8009ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ffe:	b10a      	cbz	r2, 800a004 <_svfiprintf_r+0x5c>
 800a000:	2a25      	cmp	r2, #37	; 0x25
 800a002:	d1f9      	bne.n	8009ff8 <_svfiprintf_r+0x50>
 800a004:	ebba 0b04 	subs.w	fp, sl, r4
 800a008:	d00b      	beq.n	800a022 <_svfiprintf_r+0x7a>
 800a00a:	465b      	mov	r3, fp
 800a00c:	4622      	mov	r2, r4
 800a00e:	4629      	mov	r1, r5
 800a010:	4638      	mov	r0, r7
 800a012:	f7ff ff6f 	bl	8009ef4 <__ssputs_r>
 800a016:	3001      	adds	r0, #1
 800a018:	f000 80a9 	beq.w	800a16e <_svfiprintf_r+0x1c6>
 800a01c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a01e:	445a      	add	r2, fp
 800a020:	9209      	str	r2, [sp, #36]	; 0x24
 800a022:	f89a 3000 	ldrb.w	r3, [sl]
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 80a1 	beq.w	800a16e <_svfiprintf_r+0x1c6>
 800a02c:	2300      	movs	r3, #0
 800a02e:	f04f 32ff 	mov.w	r2, #4294967295
 800a032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a036:	f10a 0a01 	add.w	sl, sl, #1
 800a03a:	9304      	str	r3, [sp, #16]
 800a03c:	9307      	str	r3, [sp, #28]
 800a03e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a042:	931a      	str	r3, [sp, #104]	; 0x68
 800a044:	4654      	mov	r4, sl
 800a046:	2205      	movs	r2, #5
 800a048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a04c:	4850      	ldr	r0, [pc, #320]	; (800a190 <_svfiprintf_r+0x1e8>)
 800a04e:	f7f6 f8c7 	bl	80001e0 <memchr>
 800a052:	9a04      	ldr	r2, [sp, #16]
 800a054:	b9d8      	cbnz	r0, 800a08e <_svfiprintf_r+0xe6>
 800a056:	06d0      	lsls	r0, r2, #27
 800a058:	bf44      	itt	mi
 800a05a:	2320      	movmi	r3, #32
 800a05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a060:	0711      	lsls	r1, r2, #28
 800a062:	bf44      	itt	mi
 800a064:	232b      	movmi	r3, #43	; 0x2b
 800a066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a06a:	f89a 3000 	ldrb.w	r3, [sl]
 800a06e:	2b2a      	cmp	r3, #42	; 0x2a
 800a070:	d015      	beq.n	800a09e <_svfiprintf_r+0xf6>
 800a072:	9a07      	ldr	r2, [sp, #28]
 800a074:	4654      	mov	r4, sl
 800a076:	2000      	movs	r0, #0
 800a078:	f04f 0c0a 	mov.w	ip, #10
 800a07c:	4621      	mov	r1, r4
 800a07e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a082:	3b30      	subs	r3, #48	; 0x30
 800a084:	2b09      	cmp	r3, #9
 800a086:	d94d      	bls.n	800a124 <_svfiprintf_r+0x17c>
 800a088:	b1b0      	cbz	r0, 800a0b8 <_svfiprintf_r+0x110>
 800a08a:	9207      	str	r2, [sp, #28]
 800a08c:	e014      	b.n	800a0b8 <_svfiprintf_r+0x110>
 800a08e:	eba0 0308 	sub.w	r3, r0, r8
 800a092:	fa09 f303 	lsl.w	r3, r9, r3
 800a096:	4313      	orrs	r3, r2
 800a098:	9304      	str	r3, [sp, #16]
 800a09a:	46a2      	mov	sl, r4
 800a09c:	e7d2      	b.n	800a044 <_svfiprintf_r+0x9c>
 800a09e:	9b03      	ldr	r3, [sp, #12]
 800a0a0:	1d19      	adds	r1, r3, #4
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	9103      	str	r1, [sp, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	bfbb      	ittet	lt
 800a0aa:	425b      	neglt	r3, r3
 800a0ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a0b0:	9307      	strge	r3, [sp, #28]
 800a0b2:	9307      	strlt	r3, [sp, #28]
 800a0b4:	bfb8      	it	lt
 800a0b6:	9204      	strlt	r2, [sp, #16]
 800a0b8:	7823      	ldrb	r3, [r4, #0]
 800a0ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a0bc:	d10c      	bne.n	800a0d8 <_svfiprintf_r+0x130>
 800a0be:	7863      	ldrb	r3, [r4, #1]
 800a0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0c2:	d134      	bne.n	800a12e <_svfiprintf_r+0x186>
 800a0c4:	9b03      	ldr	r3, [sp, #12]
 800a0c6:	1d1a      	adds	r2, r3, #4
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	9203      	str	r2, [sp, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	bfb8      	it	lt
 800a0d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0d4:	3402      	adds	r4, #2
 800a0d6:	9305      	str	r3, [sp, #20]
 800a0d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a1a0 <_svfiprintf_r+0x1f8>
 800a0dc:	7821      	ldrb	r1, [r4, #0]
 800a0de:	2203      	movs	r2, #3
 800a0e0:	4650      	mov	r0, sl
 800a0e2:	f7f6 f87d 	bl	80001e0 <memchr>
 800a0e6:	b138      	cbz	r0, 800a0f8 <_svfiprintf_r+0x150>
 800a0e8:	9b04      	ldr	r3, [sp, #16]
 800a0ea:	eba0 000a 	sub.w	r0, r0, sl
 800a0ee:	2240      	movs	r2, #64	; 0x40
 800a0f0:	4082      	lsls	r2, r0
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	3401      	adds	r4, #1
 800a0f6:	9304      	str	r3, [sp, #16]
 800a0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0fc:	4825      	ldr	r0, [pc, #148]	; (800a194 <_svfiprintf_r+0x1ec>)
 800a0fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a102:	2206      	movs	r2, #6
 800a104:	f7f6 f86c 	bl	80001e0 <memchr>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d038      	beq.n	800a17e <_svfiprintf_r+0x1d6>
 800a10c:	4b22      	ldr	r3, [pc, #136]	; (800a198 <_svfiprintf_r+0x1f0>)
 800a10e:	bb1b      	cbnz	r3, 800a158 <_svfiprintf_r+0x1b0>
 800a110:	9b03      	ldr	r3, [sp, #12]
 800a112:	3307      	adds	r3, #7
 800a114:	f023 0307 	bic.w	r3, r3, #7
 800a118:	3308      	adds	r3, #8
 800a11a:	9303      	str	r3, [sp, #12]
 800a11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11e:	4433      	add	r3, r6
 800a120:	9309      	str	r3, [sp, #36]	; 0x24
 800a122:	e768      	b.n	8009ff6 <_svfiprintf_r+0x4e>
 800a124:	fb0c 3202 	mla	r2, ip, r2, r3
 800a128:	460c      	mov	r4, r1
 800a12a:	2001      	movs	r0, #1
 800a12c:	e7a6      	b.n	800a07c <_svfiprintf_r+0xd4>
 800a12e:	2300      	movs	r3, #0
 800a130:	3401      	adds	r4, #1
 800a132:	9305      	str	r3, [sp, #20]
 800a134:	4619      	mov	r1, r3
 800a136:	f04f 0c0a 	mov.w	ip, #10
 800a13a:	4620      	mov	r0, r4
 800a13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a140:	3a30      	subs	r2, #48	; 0x30
 800a142:	2a09      	cmp	r2, #9
 800a144:	d903      	bls.n	800a14e <_svfiprintf_r+0x1a6>
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0c6      	beq.n	800a0d8 <_svfiprintf_r+0x130>
 800a14a:	9105      	str	r1, [sp, #20]
 800a14c:	e7c4      	b.n	800a0d8 <_svfiprintf_r+0x130>
 800a14e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a152:	4604      	mov	r4, r0
 800a154:	2301      	movs	r3, #1
 800a156:	e7f0      	b.n	800a13a <_svfiprintf_r+0x192>
 800a158:	ab03      	add	r3, sp, #12
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	462a      	mov	r2, r5
 800a15e:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <_svfiprintf_r+0x1f4>)
 800a160:	a904      	add	r1, sp, #16
 800a162:	4638      	mov	r0, r7
 800a164:	f7fc fa72 	bl	800664c <_printf_float>
 800a168:	1c42      	adds	r2, r0, #1
 800a16a:	4606      	mov	r6, r0
 800a16c:	d1d6      	bne.n	800a11c <_svfiprintf_r+0x174>
 800a16e:	89ab      	ldrh	r3, [r5, #12]
 800a170:	065b      	lsls	r3, r3, #25
 800a172:	f53f af2d 	bmi.w	8009fd0 <_svfiprintf_r+0x28>
 800a176:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a178:	b01d      	add	sp, #116	; 0x74
 800a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17e:	ab03      	add	r3, sp, #12
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	462a      	mov	r2, r5
 800a184:	4b05      	ldr	r3, [pc, #20]	; (800a19c <_svfiprintf_r+0x1f4>)
 800a186:	a904      	add	r1, sp, #16
 800a188:	4638      	mov	r0, r7
 800a18a:	f7fc fd03 	bl	8006b94 <_printf_i>
 800a18e:	e7eb      	b.n	800a168 <_svfiprintf_r+0x1c0>
 800a190:	0800b461 	.word	0x0800b461
 800a194:	0800b46b 	.word	0x0800b46b
 800a198:	0800664d 	.word	0x0800664d
 800a19c:	08009ef5 	.word	0x08009ef5
 800a1a0:	0800b467 	.word	0x0800b467

0800a1a4 <__sfputc_r>:
 800a1a4:	6893      	ldr	r3, [r2, #8]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	b410      	push	{r4}
 800a1ac:	6093      	str	r3, [r2, #8]
 800a1ae:	da08      	bge.n	800a1c2 <__sfputc_r+0x1e>
 800a1b0:	6994      	ldr	r4, [r2, #24]
 800a1b2:	42a3      	cmp	r3, r4
 800a1b4:	db01      	blt.n	800a1ba <__sfputc_r+0x16>
 800a1b6:	290a      	cmp	r1, #10
 800a1b8:	d103      	bne.n	800a1c2 <__sfputc_r+0x1e>
 800a1ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1be:	f7fd ba5c 	b.w	800767a <__swbuf_r>
 800a1c2:	6813      	ldr	r3, [r2, #0]
 800a1c4:	1c58      	adds	r0, r3, #1
 800a1c6:	6010      	str	r0, [r2, #0]
 800a1c8:	7019      	strb	r1, [r3, #0]
 800a1ca:	4608      	mov	r0, r1
 800a1cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <__sfputs_r>:
 800a1d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	460f      	mov	r7, r1
 800a1d8:	4614      	mov	r4, r2
 800a1da:	18d5      	adds	r5, r2, r3
 800a1dc:	42ac      	cmp	r4, r5
 800a1de:	d101      	bne.n	800a1e4 <__sfputs_r+0x12>
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	e007      	b.n	800a1f4 <__sfputs_r+0x22>
 800a1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e8:	463a      	mov	r2, r7
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7ff ffda 	bl	800a1a4 <__sfputc_r>
 800a1f0:	1c43      	adds	r3, r0, #1
 800a1f2:	d1f3      	bne.n	800a1dc <__sfputs_r+0xa>
 800a1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1f8 <_vfiprintf_r>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	b09d      	sub	sp, #116	; 0x74
 800a200:	4614      	mov	r4, r2
 800a202:	4698      	mov	r8, r3
 800a204:	4606      	mov	r6, r0
 800a206:	b118      	cbz	r0, 800a210 <_vfiprintf_r+0x18>
 800a208:	6a03      	ldr	r3, [r0, #32]
 800a20a:	b90b      	cbnz	r3, 800a210 <_vfiprintf_r+0x18>
 800a20c:	f7fd f880 	bl	8007310 <__sinit>
 800a210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a212:	07d9      	lsls	r1, r3, #31
 800a214:	d405      	bmi.n	800a222 <_vfiprintf_r+0x2a>
 800a216:	89ab      	ldrh	r3, [r5, #12]
 800a218:	059a      	lsls	r2, r3, #22
 800a21a:	d402      	bmi.n	800a222 <_vfiprintf_r+0x2a>
 800a21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a21e:	f7fd fb94 	bl	800794a <__retarget_lock_acquire_recursive>
 800a222:	89ab      	ldrh	r3, [r5, #12]
 800a224:	071b      	lsls	r3, r3, #28
 800a226:	d501      	bpl.n	800a22c <_vfiprintf_r+0x34>
 800a228:	692b      	ldr	r3, [r5, #16]
 800a22a:	b99b      	cbnz	r3, 800a254 <_vfiprintf_r+0x5c>
 800a22c:	4629      	mov	r1, r5
 800a22e:	4630      	mov	r0, r6
 800a230:	f7fd fa60 	bl	80076f4 <__swsetup_r>
 800a234:	b170      	cbz	r0, 800a254 <_vfiprintf_r+0x5c>
 800a236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a238:	07dc      	lsls	r4, r3, #31
 800a23a:	d504      	bpl.n	800a246 <_vfiprintf_r+0x4e>
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	b01d      	add	sp, #116	; 0x74
 800a242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a246:	89ab      	ldrh	r3, [r5, #12]
 800a248:	0598      	lsls	r0, r3, #22
 800a24a:	d4f7      	bmi.n	800a23c <_vfiprintf_r+0x44>
 800a24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a24e:	f7fd fb7d 	bl	800794c <__retarget_lock_release_recursive>
 800a252:	e7f3      	b.n	800a23c <_vfiprintf_r+0x44>
 800a254:	2300      	movs	r3, #0
 800a256:	9309      	str	r3, [sp, #36]	; 0x24
 800a258:	2320      	movs	r3, #32
 800a25a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a25e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a262:	2330      	movs	r3, #48	; 0x30
 800a264:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a418 <_vfiprintf_r+0x220>
 800a268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a26c:	f04f 0901 	mov.w	r9, #1
 800a270:	4623      	mov	r3, r4
 800a272:	469a      	mov	sl, r3
 800a274:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a278:	b10a      	cbz	r2, 800a27e <_vfiprintf_r+0x86>
 800a27a:	2a25      	cmp	r2, #37	; 0x25
 800a27c:	d1f9      	bne.n	800a272 <_vfiprintf_r+0x7a>
 800a27e:	ebba 0b04 	subs.w	fp, sl, r4
 800a282:	d00b      	beq.n	800a29c <_vfiprintf_r+0xa4>
 800a284:	465b      	mov	r3, fp
 800a286:	4622      	mov	r2, r4
 800a288:	4629      	mov	r1, r5
 800a28a:	4630      	mov	r0, r6
 800a28c:	f7ff ffa1 	bl	800a1d2 <__sfputs_r>
 800a290:	3001      	adds	r0, #1
 800a292:	f000 80a9 	beq.w	800a3e8 <_vfiprintf_r+0x1f0>
 800a296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a298:	445a      	add	r2, fp
 800a29a:	9209      	str	r2, [sp, #36]	; 0x24
 800a29c:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 80a1 	beq.w	800a3e8 <_vfiprintf_r+0x1f0>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2b0:	f10a 0a01 	add.w	sl, sl, #1
 800a2b4:	9304      	str	r3, [sp, #16]
 800a2b6:	9307      	str	r3, [sp, #28]
 800a2b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a2be:	4654      	mov	r4, sl
 800a2c0:	2205      	movs	r2, #5
 800a2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c6:	4854      	ldr	r0, [pc, #336]	; (800a418 <_vfiprintf_r+0x220>)
 800a2c8:	f7f5 ff8a 	bl	80001e0 <memchr>
 800a2cc:	9a04      	ldr	r2, [sp, #16]
 800a2ce:	b9d8      	cbnz	r0, 800a308 <_vfiprintf_r+0x110>
 800a2d0:	06d1      	lsls	r1, r2, #27
 800a2d2:	bf44      	itt	mi
 800a2d4:	2320      	movmi	r3, #32
 800a2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2da:	0713      	lsls	r3, r2, #28
 800a2dc:	bf44      	itt	mi
 800a2de:	232b      	movmi	r3, #43	; 0x2b
 800a2e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ea:	d015      	beq.n	800a318 <_vfiprintf_r+0x120>
 800a2ec:	9a07      	ldr	r2, [sp, #28]
 800a2ee:	4654      	mov	r4, sl
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	f04f 0c0a 	mov.w	ip, #10
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2fc:	3b30      	subs	r3, #48	; 0x30
 800a2fe:	2b09      	cmp	r3, #9
 800a300:	d94d      	bls.n	800a39e <_vfiprintf_r+0x1a6>
 800a302:	b1b0      	cbz	r0, 800a332 <_vfiprintf_r+0x13a>
 800a304:	9207      	str	r2, [sp, #28]
 800a306:	e014      	b.n	800a332 <_vfiprintf_r+0x13a>
 800a308:	eba0 0308 	sub.w	r3, r0, r8
 800a30c:	fa09 f303 	lsl.w	r3, r9, r3
 800a310:	4313      	orrs	r3, r2
 800a312:	9304      	str	r3, [sp, #16]
 800a314:	46a2      	mov	sl, r4
 800a316:	e7d2      	b.n	800a2be <_vfiprintf_r+0xc6>
 800a318:	9b03      	ldr	r3, [sp, #12]
 800a31a:	1d19      	adds	r1, r3, #4
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	9103      	str	r1, [sp, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	bfbb      	ittet	lt
 800a324:	425b      	neglt	r3, r3
 800a326:	f042 0202 	orrlt.w	r2, r2, #2
 800a32a:	9307      	strge	r3, [sp, #28]
 800a32c:	9307      	strlt	r3, [sp, #28]
 800a32e:	bfb8      	it	lt
 800a330:	9204      	strlt	r2, [sp, #16]
 800a332:	7823      	ldrb	r3, [r4, #0]
 800a334:	2b2e      	cmp	r3, #46	; 0x2e
 800a336:	d10c      	bne.n	800a352 <_vfiprintf_r+0x15a>
 800a338:	7863      	ldrb	r3, [r4, #1]
 800a33a:	2b2a      	cmp	r3, #42	; 0x2a
 800a33c:	d134      	bne.n	800a3a8 <_vfiprintf_r+0x1b0>
 800a33e:	9b03      	ldr	r3, [sp, #12]
 800a340:	1d1a      	adds	r2, r3, #4
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	9203      	str	r2, [sp, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	bfb8      	it	lt
 800a34a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a34e:	3402      	adds	r4, #2
 800a350:	9305      	str	r3, [sp, #20]
 800a352:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a428 <_vfiprintf_r+0x230>
 800a356:	7821      	ldrb	r1, [r4, #0]
 800a358:	2203      	movs	r2, #3
 800a35a:	4650      	mov	r0, sl
 800a35c:	f7f5 ff40 	bl	80001e0 <memchr>
 800a360:	b138      	cbz	r0, 800a372 <_vfiprintf_r+0x17a>
 800a362:	9b04      	ldr	r3, [sp, #16]
 800a364:	eba0 000a 	sub.w	r0, r0, sl
 800a368:	2240      	movs	r2, #64	; 0x40
 800a36a:	4082      	lsls	r2, r0
 800a36c:	4313      	orrs	r3, r2
 800a36e:	3401      	adds	r4, #1
 800a370:	9304      	str	r3, [sp, #16]
 800a372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a376:	4829      	ldr	r0, [pc, #164]	; (800a41c <_vfiprintf_r+0x224>)
 800a378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a37c:	2206      	movs	r2, #6
 800a37e:	f7f5 ff2f 	bl	80001e0 <memchr>
 800a382:	2800      	cmp	r0, #0
 800a384:	d03f      	beq.n	800a406 <_vfiprintf_r+0x20e>
 800a386:	4b26      	ldr	r3, [pc, #152]	; (800a420 <_vfiprintf_r+0x228>)
 800a388:	bb1b      	cbnz	r3, 800a3d2 <_vfiprintf_r+0x1da>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	3307      	adds	r3, #7
 800a38e:	f023 0307 	bic.w	r3, r3, #7
 800a392:	3308      	adds	r3, #8
 800a394:	9303      	str	r3, [sp, #12]
 800a396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a398:	443b      	add	r3, r7
 800a39a:	9309      	str	r3, [sp, #36]	; 0x24
 800a39c:	e768      	b.n	800a270 <_vfiprintf_r+0x78>
 800a39e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	2001      	movs	r0, #1
 800a3a6:	e7a6      	b.n	800a2f6 <_vfiprintf_r+0xfe>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	3401      	adds	r4, #1
 800a3ac:	9305      	str	r3, [sp, #20]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	f04f 0c0a 	mov.w	ip, #10
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ba:	3a30      	subs	r2, #48	; 0x30
 800a3bc:	2a09      	cmp	r2, #9
 800a3be:	d903      	bls.n	800a3c8 <_vfiprintf_r+0x1d0>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d0c6      	beq.n	800a352 <_vfiprintf_r+0x15a>
 800a3c4:	9105      	str	r1, [sp, #20]
 800a3c6:	e7c4      	b.n	800a352 <_vfiprintf_r+0x15a>
 800a3c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e7f0      	b.n	800a3b4 <_vfiprintf_r+0x1bc>
 800a3d2:	ab03      	add	r3, sp, #12
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	462a      	mov	r2, r5
 800a3d8:	4b12      	ldr	r3, [pc, #72]	; (800a424 <_vfiprintf_r+0x22c>)
 800a3da:	a904      	add	r1, sp, #16
 800a3dc:	4630      	mov	r0, r6
 800a3de:	f7fc f935 	bl	800664c <_printf_float>
 800a3e2:	4607      	mov	r7, r0
 800a3e4:	1c78      	adds	r0, r7, #1
 800a3e6:	d1d6      	bne.n	800a396 <_vfiprintf_r+0x19e>
 800a3e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3ea:	07d9      	lsls	r1, r3, #31
 800a3ec:	d405      	bmi.n	800a3fa <_vfiprintf_r+0x202>
 800a3ee:	89ab      	ldrh	r3, [r5, #12]
 800a3f0:	059a      	lsls	r2, r3, #22
 800a3f2:	d402      	bmi.n	800a3fa <_vfiprintf_r+0x202>
 800a3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3f6:	f7fd faa9 	bl	800794c <__retarget_lock_release_recursive>
 800a3fa:	89ab      	ldrh	r3, [r5, #12]
 800a3fc:	065b      	lsls	r3, r3, #25
 800a3fe:	f53f af1d 	bmi.w	800a23c <_vfiprintf_r+0x44>
 800a402:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a404:	e71c      	b.n	800a240 <_vfiprintf_r+0x48>
 800a406:	ab03      	add	r3, sp, #12
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	462a      	mov	r2, r5
 800a40c:	4b05      	ldr	r3, [pc, #20]	; (800a424 <_vfiprintf_r+0x22c>)
 800a40e:	a904      	add	r1, sp, #16
 800a410:	4630      	mov	r0, r6
 800a412:	f7fc fbbf 	bl	8006b94 <_printf_i>
 800a416:	e7e4      	b.n	800a3e2 <_vfiprintf_r+0x1ea>
 800a418:	0800b461 	.word	0x0800b461
 800a41c:	0800b46b 	.word	0x0800b46b
 800a420:	0800664d 	.word	0x0800664d
 800a424:	0800a1d3 	.word	0x0800a1d3
 800a428:	0800b467 	.word	0x0800b467

0800a42c <__sflush_r>:
 800a42c:	898a      	ldrh	r2, [r1, #12]
 800a42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a432:	4605      	mov	r5, r0
 800a434:	0710      	lsls	r0, r2, #28
 800a436:	460c      	mov	r4, r1
 800a438:	d458      	bmi.n	800a4ec <__sflush_r+0xc0>
 800a43a:	684b      	ldr	r3, [r1, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dc05      	bgt.n	800a44c <__sflush_r+0x20>
 800a440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a442:	2b00      	cmp	r3, #0
 800a444:	dc02      	bgt.n	800a44c <__sflush_r+0x20>
 800a446:	2000      	movs	r0, #0
 800a448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a44c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a44e:	2e00      	cmp	r6, #0
 800a450:	d0f9      	beq.n	800a446 <__sflush_r+0x1a>
 800a452:	2300      	movs	r3, #0
 800a454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a458:	682f      	ldr	r7, [r5, #0]
 800a45a:	6a21      	ldr	r1, [r4, #32]
 800a45c:	602b      	str	r3, [r5, #0]
 800a45e:	d032      	beq.n	800a4c6 <__sflush_r+0x9a>
 800a460:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	075a      	lsls	r2, r3, #29
 800a466:	d505      	bpl.n	800a474 <__sflush_r+0x48>
 800a468:	6863      	ldr	r3, [r4, #4]
 800a46a:	1ac0      	subs	r0, r0, r3
 800a46c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a46e:	b10b      	cbz	r3, 800a474 <__sflush_r+0x48>
 800a470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a472:	1ac0      	subs	r0, r0, r3
 800a474:	2300      	movs	r3, #0
 800a476:	4602      	mov	r2, r0
 800a478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a47a:	6a21      	ldr	r1, [r4, #32]
 800a47c:	4628      	mov	r0, r5
 800a47e:	47b0      	blx	r6
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	d106      	bne.n	800a494 <__sflush_r+0x68>
 800a486:	6829      	ldr	r1, [r5, #0]
 800a488:	291d      	cmp	r1, #29
 800a48a:	d82b      	bhi.n	800a4e4 <__sflush_r+0xb8>
 800a48c:	4a29      	ldr	r2, [pc, #164]	; (800a534 <__sflush_r+0x108>)
 800a48e:	410a      	asrs	r2, r1
 800a490:	07d6      	lsls	r6, r2, #31
 800a492:	d427      	bmi.n	800a4e4 <__sflush_r+0xb8>
 800a494:	2200      	movs	r2, #0
 800a496:	6062      	str	r2, [r4, #4]
 800a498:	04d9      	lsls	r1, r3, #19
 800a49a:	6922      	ldr	r2, [r4, #16]
 800a49c:	6022      	str	r2, [r4, #0]
 800a49e:	d504      	bpl.n	800a4aa <__sflush_r+0x7e>
 800a4a0:	1c42      	adds	r2, r0, #1
 800a4a2:	d101      	bne.n	800a4a8 <__sflush_r+0x7c>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	b903      	cbnz	r3, 800a4aa <__sflush_r+0x7e>
 800a4a8:	6560      	str	r0, [r4, #84]	; 0x54
 800a4aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ac:	602f      	str	r7, [r5, #0]
 800a4ae:	2900      	cmp	r1, #0
 800a4b0:	d0c9      	beq.n	800a446 <__sflush_r+0x1a>
 800a4b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4b6:	4299      	cmp	r1, r3
 800a4b8:	d002      	beq.n	800a4c0 <__sflush_r+0x94>
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f7fe f8d6 	bl	800866c <_free_r>
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	6360      	str	r0, [r4, #52]	; 0x34
 800a4c4:	e7c0      	b.n	800a448 <__sflush_r+0x1c>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	47b0      	blx	r6
 800a4cc:	1c41      	adds	r1, r0, #1
 800a4ce:	d1c8      	bne.n	800a462 <__sflush_r+0x36>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0c5      	beq.n	800a462 <__sflush_r+0x36>
 800a4d6:	2b1d      	cmp	r3, #29
 800a4d8:	d001      	beq.n	800a4de <__sflush_r+0xb2>
 800a4da:	2b16      	cmp	r3, #22
 800a4dc:	d101      	bne.n	800a4e2 <__sflush_r+0xb6>
 800a4de:	602f      	str	r7, [r5, #0]
 800a4e0:	e7b1      	b.n	800a446 <__sflush_r+0x1a>
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e8:	81a3      	strh	r3, [r4, #12]
 800a4ea:	e7ad      	b.n	800a448 <__sflush_r+0x1c>
 800a4ec:	690f      	ldr	r7, [r1, #16]
 800a4ee:	2f00      	cmp	r7, #0
 800a4f0:	d0a9      	beq.n	800a446 <__sflush_r+0x1a>
 800a4f2:	0793      	lsls	r3, r2, #30
 800a4f4:	680e      	ldr	r6, [r1, #0]
 800a4f6:	bf08      	it	eq
 800a4f8:	694b      	ldreq	r3, [r1, #20]
 800a4fa:	600f      	str	r7, [r1, #0]
 800a4fc:	bf18      	it	ne
 800a4fe:	2300      	movne	r3, #0
 800a500:	eba6 0807 	sub.w	r8, r6, r7
 800a504:	608b      	str	r3, [r1, #8]
 800a506:	f1b8 0f00 	cmp.w	r8, #0
 800a50a:	dd9c      	ble.n	800a446 <__sflush_r+0x1a>
 800a50c:	6a21      	ldr	r1, [r4, #32]
 800a50e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a510:	4643      	mov	r3, r8
 800a512:	463a      	mov	r2, r7
 800a514:	4628      	mov	r0, r5
 800a516:	47b0      	blx	r6
 800a518:	2800      	cmp	r0, #0
 800a51a:	dc06      	bgt.n	800a52a <__sflush_r+0xfe>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a522:	81a3      	strh	r3, [r4, #12]
 800a524:	f04f 30ff 	mov.w	r0, #4294967295
 800a528:	e78e      	b.n	800a448 <__sflush_r+0x1c>
 800a52a:	4407      	add	r7, r0
 800a52c:	eba8 0800 	sub.w	r8, r8, r0
 800a530:	e7e9      	b.n	800a506 <__sflush_r+0xda>
 800a532:	bf00      	nop
 800a534:	dfbffffe 	.word	0xdfbffffe

0800a538 <_fflush_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	690b      	ldr	r3, [r1, #16]
 800a53c:	4605      	mov	r5, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	b913      	cbnz	r3, 800a548 <_fflush_r+0x10>
 800a542:	2500      	movs	r5, #0
 800a544:	4628      	mov	r0, r5
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	b118      	cbz	r0, 800a552 <_fflush_r+0x1a>
 800a54a:	6a03      	ldr	r3, [r0, #32]
 800a54c:	b90b      	cbnz	r3, 800a552 <_fflush_r+0x1a>
 800a54e:	f7fc fedf 	bl	8007310 <__sinit>
 800a552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0f3      	beq.n	800a542 <_fflush_r+0xa>
 800a55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a55c:	07d0      	lsls	r0, r2, #31
 800a55e:	d404      	bmi.n	800a56a <_fflush_r+0x32>
 800a560:	0599      	lsls	r1, r3, #22
 800a562:	d402      	bmi.n	800a56a <_fflush_r+0x32>
 800a564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a566:	f7fd f9f0 	bl	800794a <__retarget_lock_acquire_recursive>
 800a56a:	4628      	mov	r0, r5
 800a56c:	4621      	mov	r1, r4
 800a56e:	f7ff ff5d 	bl	800a42c <__sflush_r>
 800a572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a574:	07da      	lsls	r2, r3, #31
 800a576:	4605      	mov	r5, r0
 800a578:	d4e4      	bmi.n	800a544 <_fflush_r+0xc>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	059b      	lsls	r3, r3, #22
 800a57e:	d4e1      	bmi.n	800a544 <_fflush_r+0xc>
 800a580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a582:	f7fd f9e3 	bl	800794c <__retarget_lock_release_recursive>
 800a586:	e7dd      	b.n	800a544 <_fflush_r+0xc>

0800a588 <__swhatbuf_r>:
 800a588:	b570      	push	{r4, r5, r6, lr}
 800a58a:	460c      	mov	r4, r1
 800a58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a590:	2900      	cmp	r1, #0
 800a592:	b096      	sub	sp, #88	; 0x58
 800a594:	4615      	mov	r5, r2
 800a596:	461e      	mov	r6, r3
 800a598:	da0d      	bge.n	800a5b6 <__swhatbuf_r+0x2e>
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a5a0:	f04f 0100 	mov.w	r1, #0
 800a5a4:	bf0c      	ite	eq
 800a5a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a5aa:	2340      	movne	r3, #64	; 0x40
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	6031      	str	r1, [r6, #0]
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	b016      	add	sp, #88	; 0x58
 800a5b4:	bd70      	pop	{r4, r5, r6, pc}
 800a5b6:	466a      	mov	r2, sp
 800a5b8:	f000 f874 	bl	800a6a4 <_fstat_r>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	dbec      	blt.n	800a59a <__swhatbuf_r+0x12>
 800a5c0:	9901      	ldr	r1, [sp, #4]
 800a5c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a5c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a5ca:	4259      	negs	r1, r3
 800a5cc:	4159      	adcs	r1, r3
 800a5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5d2:	e7eb      	b.n	800a5ac <__swhatbuf_r+0x24>

0800a5d4 <__smakebuf_r>:
 800a5d4:	898b      	ldrh	r3, [r1, #12]
 800a5d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5d8:	079d      	lsls	r5, r3, #30
 800a5da:	4606      	mov	r6, r0
 800a5dc:	460c      	mov	r4, r1
 800a5de:	d507      	bpl.n	800a5f0 <__smakebuf_r+0x1c>
 800a5e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	6123      	str	r3, [r4, #16]
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	6163      	str	r3, [r4, #20]
 800a5ec:	b002      	add	sp, #8
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	ab01      	add	r3, sp, #4
 800a5f2:	466a      	mov	r2, sp
 800a5f4:	f7ff ffc8 	bl	800a588 <__swhatbuf_r>
 800a5f8:	9900      	ldr	r1, [sp, #0]
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	f7fe f8a9 	bl	8008754 <_malloc_r>
 800a602:	b948      	cbnz	r0, 800a618 <__smakebuf_r+0x44>
 800a604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a608:	059a      	lsls	r2, r3, #22
 800a60a:	d4ef      	bmi.n	800a5ec <__smakebuf_r+0x18>
 800a60c:	f023 0303 	bic.w	r3, r3, #3
 800a610:	f043 0302 	orr.w	r3, r3, #2
 800a614:	81a3      	strh	r3, [r4, #12]
 800a616:	e7e3      	b.n	800a5e0 <__smakebuf_r+0xc>
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	6020      	str	r0, [r4, #0]
 800a61c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	9b00      	ldr	r3, [sp, #0]
 800a624:	6163      	str	r3, [r4, #20]
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	6120      	str	r0, [r4, #16]
 800a62a:	b15b      	cbz	r3, 800a644 <__smakebuf_r+0x70>
 800a62c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a630:	4630      	mov	r0, r6
 800a632:	f000 f849 	bl	800a6c8 <_isatty_r>
 800a636:	b128      	cbz	r0, 800a644 <__smakebuf_r+0x70>
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	f023 0303 	bic.w	r3, r3, #3
 800a63e:	f043 0301 	orr.w	r3, r3, #1
 800a642:	81a3      	strh	r3, [r4, #12]
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	431d      	orrs	r5, r3
 800a648:	81a5      	strh	r5, [r4, #12]
 800a64a:	e7cf      	b.n	800a5ec <__smakebuf_r+0x18>

0800a64c <memmove>:
 800a64c:	4288      	cmp	r0, r1
 800a64e:	b510      	push	{r4, lr}
 800a650:	eb01 0402 	add.w	r4, r1, r2
 800a654:	d902      	bls.n	800a65c <memmove+0x10>
 800a656:	4284      	cmp	r4, r0
 800a658:	4623      	mov	r3, r4
 800a65a:	d807      	bhi.n	800a66c <memmove+0x20>
 800a65c:	1e43      	subs	r3, r0, #1
 800a65e:	42a1      	cmp	r1, r4
 800a660:	d008      	beq.n	800a674 <memmove+0x28>
 800a662:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a66a:	e7f8      	b.n	800a65e <memmove+0x12>
 800a66c:	4402      	add	r2, r0
 800a66e:	4601      	mov	r1, r0
 800a670:	428a      	cmp	r2, r1
 800a672:	d100      	bne.n	800a676 <memmove+0x2a>
 800a674:	bd10      	pop	{r4, pc}
 800a676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a67a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a67e:	e7f7      	b.n	800a670 <memmove+0x24>

0800a680 <strncmp>:
 800a680:	b510      	push	{r4, lr}
 800a682:	b16a      	cbz	r2, 800a6a0 <strncmp+0x20>
 800a684:	3901      	subs	r1, #1
 800a686:	1884      	adds	r4, r0, r2
 800a688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a68c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a690:	429a      	cmp	r2, r3
 800a692:	d103      	bne.n	800a69c <strncmp+0x1c>
 800a694:	42a0      	cmp	r0, r4
 800a696:	d001      	beq.n	800a69c <strncmp+0x1c>
 800a698:	2a00      	cmp	r2, #0
 800a69a:	d1f5      	bne.n	800a688 <strncmp+0x8>
 800a69c:	1ad0      	subs	r0, r2, r3
 800a69e:	bd10      	pop	{r4, pc}
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	e7fc      	b.n	800a69e <strncmp+0x1e>

0800a6a4 <_fstat_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4d07      	ldr	r5, [pc, #28]	; (800a6c4 <_fstat_r+0x20>)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	f7f7 f9de 	bl	8001a72 <_fstat>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	d102      	bne.n	800a6c0 <_fstat_r+0x1c>
 800a6ba:	682b      	ldr	r3, [r5, #0]
 800a6bc:	b103      	cbz	r3, 800a6c0 <_fstat_r+0x1c>
 800a6be:	6023      	str	r3, [r4, #0]
 800a6c0:	bd38      	pop	{r3, r4, r5, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20004428 	.word	0x20004428

0800a6c8 <_isatty_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d06      	ldr	r5, [pc, #24]	; (800a6e4 <_isatty_r+0x1c>)
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	602b      	str	r3, [r5, #0]
 800a6d4:	f7f7 f9dd 	bl	8001a92 <_isatty>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d102      	bne.n	800a6e2 <_isatty_r+0x1a>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b103      	cbz	r3, 800a6e2 <_isatty_r+0x1a>
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	20004428 	.word	0x20004428

0800a6e8 <_sbrk_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d06      	ldr	r5, [pc, #24]	; (800a704 <_sbrk_r+0x1c>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	f7f7 f9e6 	bl	8001ac4 <_sbrk>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_sbrk_r+0x1a>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_sbrk_r+0x1a>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	20004428 	.word	0x20004428

0800a708 <nan>:
 800a708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a710 <nan+0x8>
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	00000000 	.word	0x00000000
 800a714:	7ff80000 	.word	0x7ff80000

0800a718 <__assert_func>:
 800a718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a71a:	4614      	mov	r4, r2
 800a71c:	461a      	mov	r2, r3
 800a71e:	4b09      	ldr	r3, [pc, #36]	; (800a744 <__assert_func+0x2c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4605      	mov	r5, r0
 800a724:	68d8      	ldr	r0, [r3, #12]
 800a726:	b14c      	cbz	r4, 800a73c <__assert_func+0x24>
 800a728:	4b07      	ldr	r3, [pc, #28]	; (800a748 <__assert_func+0x30>)
 800a72a:	9100      	str	r1, [sp, #0]
 800a72c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a730:	4906      	ldr	r1, [pc, #24]	; (800a74c <__assert_func+0x34>)
 800a732:	462b      	mov	r3, r5
 800a734:	f000 fbca 	bl	800aecc <fiprintf>
 800a738:	f000 fbda 	bl	800aef0 <abort>
 800a73c:	4b04      	ldr	r3, [pc, #16]	; (800a750 <__assert_func+0x38>)
 800a73e:	461c      	mov	r4, r3
 800a740:	e7f3      	b.n	800a72a <__assert_func+0x12>
 800a742:	bf00      	nop
 800a744:	20000068 	.word	0x20000068
 800a748:	0800b47a 	.word	0x0800b47a
 800a74c:	0800b487 	.word	0x0800b487
 800a750:	0800b4b5 	.word	0x0800b4b5

0800a754 <_calloc_r>:
 800a754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a756:	fba1 2402 	umull	r2, r4, r1, r2
 800a75a:	b94c      	cbnz	r4, 800a770 <_calloc_r+0x1c>
 800a75c:	4611      	mov	r1, r2
 800a75e:	9201      	str	r2, [sp, #4]
 800a760:	f7fd fff8 	bl	8008754 <_malloc_r>
 800a764:	9a01      	ldr	r2, [sp, #4]
 800a766:	4605      	mov	r5, r0
 800a768:	b930      	cbnz	r0, 800a778 <_calloc_r+0x24>
 800a76a:	4628      	mov	r0, r5
 800a76c:	b003      	add	sp, #12
 800a76e:	bd30      	pop	{r4, r5, pc}
 800a770:	220c      	movs	r2, #12
 800a772:	6002      	str	r2, [r0, #0]
 800a774:	2500      	movs	r5, #0
 800a776:	e7f8      	b.n	800a76a <_calloc_r+0x16>
 800a778:	4621      	mov	r1, r4
 800a77a:	f7fd f813 	bl	80077a4 <memset>
 800a77e:	e7f4      	b.n	800a76a <_calloc_r+0x16>

0800a780 <rshift>:
 800a780:	6903      	ldr	r3, [r0, #16]
 800a782:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a786:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a78a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a78e:	f100 0414 	add.w	r4, r0, #20
 800a792:	dd45      	ble.n	800a820 <rshift+0xa0>
 800a794:	f011 011f 	ands.w	r1, r1, #31
 800a798:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a79c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a7a0:	d10c      	bne.n	800a7bc <rshift+0x3c>
 800a7a2:	f100 0710 	add.w	r7, r0, #16
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	42b1      	cmp	r1, r6
 800a7aa:	d334      	bcc.n	800a816 <rshift+0x96>
 800a7ac:	1a9b      	subs	r3, r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	1eea      	subs	r2, r5, #3
 800a7b2:	4296      	cmp	r6, r2
 800a7b4:	bf38      	it	cc
 800a7b6:	2300      	movcc	r3, #0
 800a7b8:	4423      	add	r3, r4
 800a7ba:	e015      	b.n	800a7e8 <rshift+0x68>
 800a7bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7c0:	f1c1 0820 	rsb	r8, r1, #32
 800a7c4:	40cf      	lsrs	r7, r1
 800a7c6:	f105 0e04 	add.w	lr, r5, #4
 800a7ca:	46a1      	mov	r9, r4
 800a7cc:	4576      	cmp	r6, lr
 800a7ce:	46f4      	mov	ip, lr
 800a7d0:	d815      	bhi.n	800a7fe <rshift+0x7e>
 800a7d2:	1a9a      	subs	r2, r3, r2
 800a7d4:	0092      	lsls	r2, r2, #2
 800a7d6:	3a04      	subs	r2, #4
 800a7d8:	3501      	adds	r5, #1
 800a7da:	42ae      	cmp	r6, r5
 800a7dc:	bf38      	it	cc
 800a7de:	2200      	movcc	r2, #0
 800a7e0:	18a3      	adds	r3, r4, r2
 800a7e2:	50a7      	str	r7, [r4, r2]
 800a7e4:	b107      	cbz	r7, 800a7e8 <rshift+0x68>
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	1b1a      	subs	r2, r3, r4
 800a7ea:	42a3      	cmp	r3, r4
 800a7ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7f0:	bf08      	it	eq
 800a7f2:	2300      	moveq	r3, #0
 800a7f4:	6102      	str	r2, [r0, #16]
 800a7f6:	bf08      	it	eq
 800a7f8:	6143      	streq	r3, [r0, #20]
 800a7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7fe:	f8dc c000 	ldr.w	ip, [ip]
 800a802:	fa0c fc08 	lsl.w	ip, ip, r8
 800a806:	ea4c 0707 	orr.w	r7, ip, r7
 800a80a:	f849 7b04 	str.w	r7, [r9], #4
 800a80e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a812:	40cf      	lsrs	r7, r1
 800a814:	e7da      	b.n	800a7cc <rshift+0x4c>
 800a816:	f851 cb04 	ldr.w	ip, [r1], #4
 800a81a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a81e:	e7c3      	b.n	800a7a8 <rshift+0x28>
 800a820:	4623      	mov	r3, r4
 800a822:	e7e1      	b.n	800a7e8 <rshift+0x68>

0800a824 <__hexdig_fun>:
 800a824:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a828:	2b09      	cmp	r3, #9
 800a82a:	d802      	bhi.n	800a832 <__hexdig_fun+0xe>
 800a82c:	3820      	subs	r0, #32
 800a82e:	b2c0      	uxtb	r0, r0
 800a830:	4770      	bx	lr
 800a832:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a836:	2b05      	cmp	r3, #5
 800a838:	d801      	bhi.n	800a83e <__hexdig_fun+0x1a>
 800a83a:	3847      	subs	r0, #71	; 0x47
 800a83c:	e7f7      	b.n	800a82e <__hexdig_fun+0xa>
 800a83e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a842:	2b05      	cmp	r3, #5
 800a844:	d801      	bhi.n	800a84a <__hexdig_fun+0x26>
 800a846:	3827      	subs	r0, #39	; 0x27
 800a848:	e7f1      	b.n	800a82e <__hexdig_fun+0xa>
 800a84a:	2000      	movs	r0, #0
 800a84c:	4770      	bx	lr
	...

0800a850 <__gethex>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	4617      	mov	r7, r2
 800a856:	680a      	ldr	r2, [r1, #0]
 800a858:	b085      	sub	sp, #20
 800a85a:	f102 0b02 	add.w	fp, r2, #2
 800a85e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a862:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a866:	4681      	mov	r9, r0
 800a868:	468a      	mov	sl, r1
 800a86a:	9302      	str	r3, [sp, #8]
 800a86c:	32fe      	adds	r2, #254	; 0xfe
 800a86e:	eb02 030b 	add.w	r3, r2, fp
 800a872:	46d8      	mov	r8, fp
 800a874:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a878:	9301      	str	r3, [sp, #4]
 800a87a:	2830      	cmp	r0, #48	; 0x30
 800a87c:	d0f7      	beq.n	800a86e <__gethex+0x1e>
 800a87e:	f7ff ffd1 	bl	800a824 <__hexdig_fun>
 800a882:	4604      	mov	r4, r0
 800a884:	2800      	cmp	r0, #0
 800a886:	d138      	bne.n	800a8fa <__gethex+0xaa>
 800a888:	49a7      	ldr	r1, [pc, #668]	; (800ab28 <__gethex+0x2d8>)
 800a88a:	2201      	movs	r2, #1
 800a88c:	4640      	mov	r0, r8
 800a88e:	f7ff fef7 	bl	800a680 <strncmp>
 800a892:	4606      	mov	r6, r0
 800a894:	2800      	cmp	r0, #0
 800a896:	d169      	bne.n	800a96c <__gethex+0x11c>
 800a898:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a89c:	465d      	mov	r5, fp
 800a89e:	f7ff ffc1 	bl	800a824 <__hexdig_fun>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d064      	beq.n	800a970 <__gethex+0x120>
 800a8a6:	465a      	mov	r2, fp
 800a8a8:	7810      	ldrb	r0, [r2, #0]
 800a8aa:	2830      	cmp	r0, #48	; 0x30
 800a8ac:	4690      	mov	r8, r2
 800a8ae:	f102 0201 	add.w	r2, r2, #1
 800a8b2:	d0f9      	beq.n	800a8a8 <__gethex+0x58>
 800a8b4:	f7ff ffb6 	bl	800a824 <__hexdig_fun>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	fab0 f480 	clz	r4, r0
 800a8be:	0964      	lsrs	r4, r4, #5
 800a8c0:	465e      	mov	r6, fp
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	4642      	mov	r2, r8
 800a8c6:	4615      	mov	r5, r2
 800a8c8:	3201      	adds	r2, #1
 800a8ca:	7828      	ldrb	r0, [r5, #0]
 800a8cc:	f7ff ffaa 	bl	800a824 <__hexdig_fun>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d1f8      	bne.n	800a8c6 <__gethex+0x76>
 800a8d4:	4994      	ldr	r1, [pc, #592]	; (800ab28 <__gethex+0x2d8>)
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4628      	mov	r0, r5
 800a8da:	f7ff fed1 	bl	800a680 <strncmp>
 800a8de:	b978      	cbnz	r0, 800a900 <__gethex+0xb0>
 800a8e0:	b946      	cbnz	r6, 800a8f4 <__gethex+0xa4>
 800a8e2:	1c6e      	adds	r6, r5, #1
 800a8e4:	4632      	mov	r2, r6
 800a8e6:	4615      	mov	r5, r2
 800a8e8:	3201      	adds	r2, #1
 800a8ea:	7828      	ldrb	r0, [r5, #0]
 800a8ec:	f7ff ff9a 	bl	800a824 <__hexdig_fun>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d1f8      	bne.n	800a8e6 <__gethex+0x96>
 800a8f4:	1b73      	subs	r3, r6, r5
 800a8f6:	009e      	lsls	r6, r3, #2
 800a8f8:	e004      	b.n	800a904 <__gethex+0xb4>
 800a8fa:	2400      	movs	r4, #0
 800a8fc:	4626      	mov	r6, r4
 800a8fe:	e7e1      	b.n	800a8c4 <__gethex+0x74>
 800a900:	2e00      	cmp	r6, #0
 800a902:	d1f7      	bne.n	800a8f4 <__gethex+0xa4>
 800a904:	782b      	ldrb	r3, [r5, #0]
 800a906:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a90a:	2b50      	cmp	r3, #80	; 0x50
 800a90c:	d13d      	bne.n	800a98a <__gethex+0x13a>
 800a90e:	786b      	ldrb	r3, [r5, #1]
 800a910:	2b2b      	cmp	r3, #43	; 0x2b
 800a912:	d02f      	beq.n	800a974 <__gethex+0x124>
 800a914:	2b2d      	cmp	r3, #45	; 0x2d
 800a916:	d031      	beq.n	800a97c <__gethex+0x12c>
 800a918:	1c69      	adds	r1, r5, #1
 800a91a:	f04f 0b00 	mov.w	fp, #0
 800a91e:	7808      	ldrb	r0, [r1, #0]
 800a920:	f7ff ff80 	bl	800a824 <__hexdig_fun>
 800a924:	1e42      	subs	r2, r0, #1
 800a926:	b2d2      	uxtb	r2, r2
 800a928:	2a18      	cmp	r2, #24
 800a92a:	d82e      	bhi.n	800a98a <__gethex+0x13a>
 800a92c:	f1a0 0210 	sub.w	r2, r0, #16
 800a930:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a934:	f7ff ff76 	bl	800a824 <__hexdig_fun>
 800a938:	f100 3cff 	add.w	ip, r0, #4294967295
 800a93c:	fa5f fc8c 	uxtb.w	ip, ip
 800a940:	f1bc 0f18 	cmp.w	ip, #24
 800a944:	d91d      	bls.n	800a982 <__gethex+0x132>
 800a946:	f1bb 0f00 	cmp.w	fp, #0
 800a94a:	d000      	beq.n	800a94e <__gethex+0xfe>
 800a94c:	4252      	negs	r2, r2
 800a94e:	4416      	add	r6, r2
 800a950:	f8ca 1000 	str.w	r1, [sl]
 800a954:	b1dc      	cbz	r4, 800a98e <__gethex+0x13e>
 800a956:	9b01      	ldr	r3, [sp, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	bf14      	ite	ne
 800a95c:	f04f 0800 	movne.w	r8, #0
 800a960:	f04f 0806 	moveq.w	r8, #6
 800a964:	4640      	mov	r0, r8
 800a966:	b005      	add	sp, #20
 800a968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96c:	4645      	mov	r5, r8
 800a96e:	4626      	mov	r6, r4
 800a970:	2401      	movs	r4, #1
 800a972:	e7c7      	b.n	800a904 <__gethex+0xb4>
 800a974:	f04f 0b00 	mov.w	fp, #0
 800a978:	1ca9      	adds	r1, r5, #2
 800a97a:	e7d0      	b.n	800a91e <__gethex+0xce>
 800a97c:	f04f 0b01 	mov.w	fp, #1
 800a980:	e7fa      	b.n	800a978 <__gethex+0x128>
 800a982:	230a      	movs	r3, #10
 800a984:	fb03 0002 	mla	r0, r3, r2, r0
 800a988:	e7d0      	b.n	800a92c <__gethex+0xdc>
 800a98a:	4629      	mov	r1, r5
 800a98c:	e7e0      	b.n	800a950 <__gethex+0x100>
 800a98e:	eba5 0308 	sub.w	r3, r5, r8
 800a992:	3b01      	subs	r3, #1
 800a994:	4621      	mov	r1, r4
 800a996:	2b07      	cmp	r3, #7
 800a998:	dc0a      	bgt.n	800a9b0 <__gethex+0x160>
 800a99a:	4648      	mov	r0, r9
 800a99c:	f7fd ff66 	bl	800886c <_Balloc>
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	b940      	cbnz	r0, 800a9b6 <__gethex+0x166>
 800a9a4:	4b61      	ldr	r3, [pc, #388]	; (800ab2c <__gethex+0x2dc>)
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	21e4      	movs	r1, #228	; 0xe4
 800a9aa:	4861      	ldr	r0, [pc, #388]	; (800ab30 <__gethex+0x2e0>)
 800a9ac:	f7ff feb4 	bl	800a718 <__assert_func>
 800a9b0:	3101      	adds	r1, #1
 800a9b2:	105b      	asrs	r3, r3, #1
 800a9b4:	e7ef      	b.n	800a996 <__gethex+0x146>
 800a9b6:	f100 0a14 	add.w	sl, r0, #20
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	495a      	ldr	r1, [pc, #360]	; (800ab28 <__gethex+0x2d8>)
 800a9be:	f8cd a004 	str.w	sl, [sp, #4]
 800a9c2:	469b      	mov	fp, r3
 800a9c4:	45a8      	cmp	r8, r5
 800a9c6:	d342      	bcc.n	800aa4e <__gethex+0x1fe>
 800a9c8:	9801      	ldr	r0, [sp, #4]
 800a9ca:	f840 bb04 	str.w	fp, [r0], #4
 800a9ce:	eba0 000a 	sub.w	r0, r0, sl
 800a9d2:	1080      	asrs	r0, r0, #2
 800a9d4:	6120      	str	r0, [r4, #16]
 800a9d6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a9da:	4658      	mov	r0, fp
 800a9dc:	f7fe f838 	bl	8008a50 <__hi0bits>
 800a9e0:	683d      	ldr	r5, [r7, #0]
 800a9e2:	eba8 0000 	sub.w	r0, r8, r0
 800a9e6:	42a8      	cmp	r0, r5
 800a9e8:	dd59      	ble.n	800aa9e <__gethex+0x24e>
 800a9ea:	eba0 0805 	sub.w	r8, r0, r5
 800a9ee:	4641      	mov	r1, r8
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f7fe fbc7 	bl	8009184 <__any_on>
 800a9f6:	4683      	mov	fp, r0
 800a9f8:	b1b8      	cbz	r0, 800aa2a <__gethex+0x1da>
 800a9fa:	f108 33ff 	add.w	r3, r8, #4294967295
 800a9fe:	1159      	asrs	r1, r3, #5
 800aa00:	f003 021f 	and.w	r2, r3, #31
 800aa04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aa08:	f04f 0b01 	mov.w	fp, #1
 800aa0c:	fa0b f202 	lsl.w	r2, fp, r2
 800aa10:	420a      	tst	r2, r1
 800aa12:	d00a      	beq.n	800aa2a <__gethex+0x1da>
 800aa14:	455b      	cmp	r3, fp
 800aa16:	dd06      	ble.n	800aa26 <__gethex+0x1d6>
 800aa18:	f1a8 0102 	sub.w	r1, r8, #2
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7fe fbb1 	bl	8009184 <__any_on>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d138      	bne.n	800aa98 <__gethex+0x248>
 800aa26:	f04f 0b02 	mov.w	fp, #2
 800aa2a:	4641      	mov	r1, r8
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f7ff fea7 	bl	800a780 <rshift>
 800aa32:	4446      	add	r6, r8
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	42b3      	cmp	r3, r6
 800aa38:	da41      	bge.n	800aabe <__gethex+0x26e>
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4648      	mov	r0, r9
 800aa3e:	f7fd ff55 	bl	80088ec <_Bfree>
 800aa42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa44:	2300      	movs	r3, #0
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800aa4c:	e78a      	b.n	800a964 <__gethex+0x114>
 800aa4e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800aa52:	2a2e      	cmp	r2, #46	; 0x2e
 800aa54:	d014      	beq.n	800aa80 <__gethex+0x230>
 800aa56:	2b20      	cmp	r3, #32
 800aa58:	d106      	bne.n	800aa68 <__gethex+0x218>
 800aa5a:	9b01      	ldr	r3, [sp, #4]
 800aa5c:	f843 bb04 	str.w	fp, [r3], #4
 800aa60:	f04f 0b00 	mov.w	fp, #0
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	465b      	mov	r3, fp
 800aa68:	7828      	ldrb	r0, [r5, #0]
 800aa6a:	9303      	str	r3, [sp, #12]
 800aa6c:	f7ff feda 	bl	800a824 <__hexdig_fun>
 800aa70:	9b03      	ldr	r3, [sp, #12]
 800aa72:	f000 000f 	and.w	r0, r0, #15
 800aa76:	4098      	lsls	r0, r3
 800aa78:	ea4b 0b00 	orr.w	fp, fp, r0
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	e7a1      	b.n	800a9c4 <__gethex+0x174>
 800aa80:	45a8      	cmp	r8, r5
 800aa82:	d8e8      	bhi.n	800aa56 <__gethex+0x206>
 800aa84:	2201      	movs	r2, #1
 800aa86:	4628      	mov	r0, r5
 800aa88:	9303      	str	r3, [sp, #12]
 800aa8a:	f7ff fdf9 	bl	800a680 <strncmp>
 800aa8e:	4926      	ldr	r1, [pc, #152]	; (800ab28 <__gethex+0x2d8>)
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d1df      	bne.n	800aa56 <__gethex+0x206>
 800aa96:	e795      	b.n	800a9c4 <__gethex+0x174>
 800aa98:	f04f 0b03 	mov.w	fp, #3
 800aa9c:	e7c5      	b.n	800aa2a <__gethex+0x1da>
 800aa9e:	da0b      	bge.n	800aab8 <__gethex+0x268>
 800aaa0:	eba5 0800 	sub.w	r8, r5, r0
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	4642      	mov	r2, r8
 800aaa8:	4648      	mov	r0, r9
 800aaaa:	f7fe f939 	bl	8008d20 <__lshift>
 800aaae:	eba6 0608 	sub.w	r6, r6, r8
 800aab2:	4604      	mov	r4, r0
 800aab4:	f100 0a14 	add.w	sl, r0, #20
 800aab8:	f04f 0b00 	mov.w	fp, #0
 800aabc:	e7ba      	b.n	800aa34 <__gethex+0x1e4>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	42b3      	cmp	r3, r6
 800aac2:	dd73      	ble.n	800abac <__gethex+0x35c>
 800aac4:	1b9e      	subs	r6, r3, r6
 800aac6:	42b5      	cmp	r5, r6
 800aac8:	dc34      	bgt.n	800ab34 <__gethex+0x2e4>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d023      	beq.n	800ab18 <__gethex+0x2c8>
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d025      	beq.n	800ab20 <__gethex+0x2d0>
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d115      	bne.n	800ab04 <__gethex+0x2b4>
 800aad8:	42b5      	cmp	r5, r6
 800aada:	d113      	bne.n	800ab04 <__gethex+0x2b4>
 800aadc:	2d01      	cmp	r5, #1
 800aade:	d10b      	bne.n	800aaf8 <__gethex+0x2a8>
 800aae0:	9a02      	ldr	r2, [sp, #8]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6013      	str	r3, [r2, #0]
 800aae6:	2301      	movs	r3, #1
 800aae8:	6123      	str	r3, [r4, #16]
 800aaea:	f8ca 3000 	str.w	r3, [sl]
 800aaee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaf0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800aaf4:	601c      	str	r4, [r3, #0]
 800aaf6:	e735      	b.n	800a964 <__gethex+0x114>
 800aaf8:	1e69      	subs	r1, r5, #1
 800aafa:	4620      	mov	r0, r4
 800aafc:	f7fe fb42 	bl	8009184 <__any_on>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d1ed      	bne.n	800aae0 <__gethex+0x290>
 800ab04:	4621      	mov	r1, r4
 800ab06:	4648      	mov	r0, r9
 800ab08:	f7fd fef0 	bl	80088ec <_Bfree>
 800ab0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab0e:	2300      	movs	r3, #0
 800ab10:	6013      	str	r3, [r2, #0]
 800ab12:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ab16:	e725      	b.n	800a964 <__gethex+0x114>
 800ab18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1f2      	bne.n	800ab04 <__gethex+0x2b4>
 800ab1e:	e7df      	b.n	800aae0 <__gethex+0x290>
 800ab20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1dc      	bne.n	800aae0 <__gethex+0x290>
 800ab26:	e7ed      	b.n	800ab04 <__gethex+0x2b4>
 800ab28:	0800b30c 	.word	0x0800b30c
 800ab2c:	0800b1a5 	.word	0x0800b1a5
 800ab30:	0800b4b6 	.word	0x0800b4b6
 800ab34:	f106 38ff 	add.w	r8, r6, #4294967295
 800ab38:	f1bb 0f00 	cmp.w	fp, #0
 800ab3c:	d133      	bne.n	800aba6 <__gethex+0x356>
 800ab3e:	f1b8 0f00 	cmp.w	r8, #0
 800ab42:	d004      	beq.n	800ab4e <__gethex+0x2fe>
 800ab44:	4641      	mov	r1, r8
 800ab46:	4620      	mov	r0, r4
 800ab48:	f7fe fb1c 	bl	8009184 <__any_on>
 800ab4c:	4683      	mov	fp, r0
 800ab4e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ab52:	2301      	movs	r3, #1
 800ab54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ab58:	f008 081f 	and.w	r8, r8, #31
 800ab5c:	fa03 f308 	lsl.w	r3, r3, r8
 800ab60:	4213      	tst	r3, r2
 800ab62:	4631      	mov	r1, r6
 800ab64:	4620      	mov	r0, r4
 800ab66:	bf18      	it	ne
 800ab68:	f04b 0b02 	orrne.w	fp, fp, #2
 800ab6c:	1bad      	subs	r5, r5, r6
 800ab6e:	f7ff fe07 	bl	800a780 <rshift>
 800ab72:	687e      	ldr	r6, [r7, #4]
 800ab74:	f04f 0802 	mov.w	r8, #2
 800ab78:	f1bb 0f00 	cmp.w	fp, #0
 800ab7c:	d04a      	beq.n	800ac14 <__gethex+0x3c4>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d016      	beq.n	800abb2 <__gethex+0x362>
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d018      	beq.n	800abba <__gethex+0x36a>
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d109      	bne.n	800aba0 <__gethex+0x350>
 800ab8c:	f01b 0f02 	tst.w	fp, #2
 800ab90:	d006      	beq.n	800aba0 <__gethex+0x350>
 800ab92:	f8da 3000 	ldr.w	r3, [sl]
 800ab96:	ea4b 0b03 	orr.w	fp, fp, r3
 800ab9a:	f01b 0f01 	tst.w	fp, #1
 800ab9e:	d10f      	bne.n	800abc0 <__gethex+0x370>
 800aba0:	f048 0810 	orr.w	r8, r8, #16
 800aba4:	e036      	b.n	800ac14 <__gethex+0x3c4>
 800aba6:	f04f 0b01 	mov.w	fp, #1
 800abaa:	e7d0      	b.n	800ab4e <__gethex+0x2fe>
 800abac:	f04f 0801 	mov.w	r8, #1
 800abb0:	e7e2      	b.n	800ab78 <__gethex+0x328>
 800abb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abb4:	f1c3 0301 	rsb	r3, r3, #1
 800abb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800abba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d0ef      	beq.n	800aba0 <__gethex+0x350>
 800abc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abc4:	f104 0214 	add.w	r2, r4, #20
 800abc8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800abcc:	9301      	str	r3, [sp, #4]
 800abce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800abd2:	2300      	movs	r3, #0
 800abd4:	4694      	mov	ip, r2
 800abd6:	f852 1b04 	ldr.w	r1, [r2], #4
 800abda:	f1b1 3fff 	cmp.w	r1, #4294967295
 800abde:	d01e      	beq.n	800ac1e <__gethex+0x3ce>
 800abe0:	3101      	adds	r1, #1
 800abe2:	f8cc 1000 	str.w	r1, [ip]
 800abe6:	f1b8 0f02 	cmp.w	r8, #2
 800abea:	f104 0214 	add.w	r2, r4, #20
 800abee:	d13d      	bne.n	800ac6c <__gethex+0x41c>
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	3b01      	subs	r3, #1
 800abf4:	42ab      	cmp	r3, r5
 800abf6:	d10b      	bne.n	800ac10 <__gethex+0x3c0>
 800abf8:	1169      	asrs	r1, r5, #5
 800abfa:	2301      	movs	r3, #1
 800abfc:	f005 051f 	and.w	r5, r5, #31
 800ac00:	fa03 f505 	lsl.w	r5, r3, r5
 800ac04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac08:	421d      	tst	r5, r3
 800ac0a:	bf18      	it	ne
 800ac0c:	f04f 0801 	movne.w	r8, #1
 800ac10:	f048 0820 	orr.w	r8, r8, #32
 800ac14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac16:	601c      	str	r4, [r3, #0]
 800ac18:	9b02      	ldr	r3, [sp, #8]
 800ac1a:	601e      	str	r6, [r3, #0]
 800ac1c:	e6a2      	b.n	800a964 <__gethex+0x114>
 800ac1e:	4290      	cmp	r0, r2
 800ac20:	f842 3c04 	str.w	r3, [r2, #-4]
 800ac24:	d8d6      	bhi.n	800abd4 <__gethex+0x384>
 800ac26:	68a2      	ldr	r2, [r4, #8]
 800ac28:	4593      	cmp	fp, r2
 800ac2a:	db17      	blt.n	800ac5c <__gethex+0x40c>
 800ac2c:	6861      	ldr	r1, [r4, #4]
 800ac2e:	4648      	mov	r0, r9
 800ac30:	3101      	adds	r1, #1
 800ac32:	f7fd fe1b 	bl	800886c <_Balloc>
 800ac36:	4682      	mov	sl, r0
 800ac38:	b918      	cbnz	r0, 800ac42 <__gethex+0x3f2>
 800ac3a:	4b1b      	ldr	r3, [pc, #108]	; (800aca8 <__gethex+0x458>)
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	2184      	movs	r1, #132	; 0x84
 800ac40:	e6b3      	b.n	800a9aa <__gethex+0x15a>
 800ac42:	6922      	ldr	r2, [r4, #16]
 800ac44:	3202      	adds	r2, #2
 800ac46:	f104 010c 	add.w	r1, r4, #12
 800ac4a:	0092      	lsls	r2, r2, #2
 800ac4c:	300c      	adds	r0, #12
 800ac4e:	f7fc fe7e 	bl	800794e <memcpy>
 800ac52:	4621      	mov	r1, r4
 800ac54:	4648      	mov	r0, r9
 800ac56:	f7fd fe49 	bl	80088ec <_Bfree>
 800ac5a:	4654      	mov	r4, sl
 800ac5c:	6922      	ldr	r2, [r4, #16]
 800ac5e:	1c51      	adds	r1, r2, #1
 800ac60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ac64:	6121      	str	r1, [r4, #16]
 800ac66:	2101      	movs	r1, #1
 800ac68:	6151      	str	r1, [r2, #20]
 800ac6a:	e7bc      	b.n	800abe6 <__gethex+0x396>
 800ac6c:	6921      	ldr	r1, [r4, #16]
 800ac6e:	4559      	cmp	r1, fp
 800ac70:	dd0b      	ble.n	800ac8a <__gethex+0x43a>
 800ac72:	2101      	movs	r1, #1
 800ac74:	4620      	mov	r0, r4
 800ac76:	f7ff fd83 	bl	800a780 <rshift>
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	3601      	adds	r6, #1
 800ac7e:	42b3      	cmp	r3, r6
 800ac80:	f6ff aedb 	blt.w	800aa3a <__gethex+0x1ea>
 800ac84:	f04f 0801 	mov.w	r8, #1
 800ac88:	e7c2      	b.n	800ac10 <__gethex+0x3c0>
 800ac8a:	f015 051f 	ands.w	r5, r5, #31
 800ac8e:	d0f9      	beq.n	800ac84 <__gethex+0x434>
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	441a      	add	r2, r3
 800ac94:	f1c5 0520 	rsb	r5, r5, #32
 800ac98:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ac9c:	f7fd fed8 	bl	8008a50 <__hi0bits>
 800aca0:	42a8      	cmp	r0, r5
 800aca2:	dbe6      	blt.n	800ac72 <__gethex+0x422>
 800aca4:	e7ee      	b.n	800ac84 <__gethex+0x434>
 800aca6:	bf00      	nop
 800aca8:	0800b1a5 	.word	0x0800b1a5

0800acac <L_shift>:
 800acac:	f1c2 0208 	rsb	r2, r2, #8
 800acb0:	0092      	lsls	r2, r2, #2
 800acb2:	b570      	push	{r4, r5, r6, lr}
 800acb4:	f1c2 0620 	rsb	r6, r2, #32
 800acb8:	6843      	ldr	r3, [r0, #4]
 800acba:	6804      	ldr	r4, [r0, #0]
 800acbc:	fa03 f506 	lsl.w	r5, r3, r6
 800acc0:	432c      	orrs	r4, r5
 800acc2:	40d3      	lsrs	r3, r2
 800acc4:	6004      	str	r4, [r0, #0]
 800acc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800acca:	4288      	cmp	r0, r1
 800accc:	d3f4      	bcc.n	800acb8 <L_shift+0xc>
 800acce:	bd70      	pop	{r4, r5, r6, pc}

0800acd0 <__match>:
 800acd0:	b530      	push	{r4, r5, lr}
 800acd2:	6803      	ldr	r3, [r0, #0]
 800acd4:	3301      	adds	r3, #1
 800acd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acda:	b914      	cbnz	r4, 800ace2 <__match+0x12>
 800acdc:	6003      	str	r3, [r0, #0]
 800acde:	2001      	movs	r0, #1
 800ace0:	bd30      	pop	{r4, r5, pc}
 800ace2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ace6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800acea:	2d19      	cmp	r5, #25
 800acec:	bf98      	it	ls
 800acee:	3220      	addls	r2, #32
 800acf0:	42a2      	cmp	r2, r4
 800acf2:	d0f0      	beq.n	800acd6 <__match+0x6>
 800acf4:	2000      	movs	r0, #0
 800acf6:	e7f3      	b.n	800ace0 <__match+0x10>

0800acf8 <__hexnan>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	680b      	ldr	r3, [r1, #0]
 800acfe:	6801      	ldr	r1, [r0, #0]
 800ad00:	115e      	asrs	r6, r3, #5
 800ad02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad06:	f013 031f 	ands.w	r3, r3, #31
 800ad0a:	b087      	sub	sp, #28
 800ad0c:	bf18      	it	ne
 800ad0e:	3604      	addne	r6, #4
 800ad10:	2500      	movs	r5, #0
 800ad12:	1f37      	subs	r7, r6, #4
 800ad14:	4682      	mov	sl, r0
 800ad16:	4690      	mov	r8, r2
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad1e:	46b9      	mov	r9, r7
 800ad20:	463c      	mov	r4, r7
 800ad22:	9502      	str	r5, [sp, #8]
 800ad24:	46ab      	mov	fp, r5
 800ad26:	784a      	ldrb	r2, [r1, #1]
 800ad28:	1c4b      	adds	r3, r1, #1
 800ad2a:	9303      	str	r3, [sp, #12]
 800ad2c:	b342      	cbz	r2, 800ad80 <__hexnan+0x88>
 800ad2e:	4610      	mov	r0, r2
 800ad30:	9105      	str	r1, [sp, #20]
 800ad32:	9204      	str	r2, [sp, #16]
 800ad34:	f7ff fd76 	bl	800a824 <__hexdig_fun>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d14f      	bne.n	800addc <__hexnan+0xe4>
 800ad3c:	9a04      	ldr	r2, [sp, #16]
 800ad3e:	9905      	ldr	r1, [sp, #20]
 800ad40:	2a20      	cmp	r2, #32
 800ad42:	d818      	bhi.n	800ad76 <__hexnan+0x7e>
 800ad44:	9b02      	ldr	r3, [sp, #8]
 800ad46:	459b      	cmp	fp, r3
 800ad48:	dd13      	ble.n	800ad72 <__hexnan+0x7a>
 800ad4a:	454c      	cmp	r4, r9
 800ad4c:	d206      	bcs.n	800ad5c <__hexnan+0x64>
 800ad4e:	2d07      	cmp	r5, #7
 800ad50:	dc04      	bgt.n	800ad5c <__hexnan+0x64>
 800ad52:	462a      	mov	r2, r5
 800ad54:	4649      	mov	r1, r9
 800ad56:	4620      	mov	r0, r4
 800ad58:	f7ff ffa8 	bl	800acac <L_shift>
 800ad5c:	4544      	cmp	r4, r8
 800ad5e:	d950      	bls.n	800ae02 <__hexnan+0x10a>
 800ad60:	2300      	movs	r3, #0
 800ad62:	f1a4 0904 	sub.w	r9, r4, #4
 800ad66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad6a:	f8cd b008 	str.w	fp, [sp, #8]
 800ad6e:	464c      	mov	r4, r9
 800ad70:	461d      	mov	r5, r3
 800ad72:	9903      	ldr	r1, [sp, #12]
 800ad74:	e7d7      	b.n	800ad26 <__hexnan+0x2e>
 800ad76:	2a29      	cmp	r2, #41	; 0x29
 800ad78:	d155      	bne.n	800ae26 <__hexnan+0x12e>
 800ad7a:	3102      	adds	r1, #2
 800ad7c:	f8ca 1000 	str.w	r1, [sl]
 800ad80:	f1bb 0f00 	cmp.w	fp, #0
 800ad84:	d04f      	beq.n	800ae26 <__hexnan+0x12e>
 800ad86:	454c      	cmp	r4, r9
 800ad88:	d206      	bcs.n	800ad98 <__hexnan+0xa0>
 800ad8a:	2d07      	cmp	r5, #7
 800ad8c:	dc04      	bgt.n	800ad98 <__hexnan+0xa0>
 800ad8e:	462a      	mov	r2, r5
 800ad90:	4649      	mov	r1, r9
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7ff ff8a 	bl	800acac <L_shift>
 800ad98:	4544      	cmp	r4, r8
 800ad9a:	d934      	bls.n	800ae06 <__hexnan+0x10e>
 800ad9c:	f1a8 0204 	sub.w	r2, r8, #4
 800ada0:	4623      	mov	r3, r4
 800ada2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ada6:	f842 1f04 	str.w	r1, [r2, #4]!
 800adaa:	429f      	cmp	r7, r3
 800adac:	d2f9      	bcs.n	800ada2 <__hexnan+0xaa>
 800adae:	1b3b      	subs	r3, r7, r4
 800adb0:	f023 0303 	bic.w	r3, r3, #3
 800adb4:	3304      	adds	r3, #4
 800adb6:	3e03      	subs	r6, #3
 800adb8:	3401      	adds	r4, #1
 800adba:	42a6      	cmp	r6, r4
 800adbc:	bf38      	it	cc
 800adbe:	2304      	movcc	r3, #4
 800adc0:	4443      	add	r3, r8
 800adc2:	2200      	movs	r2, #0
 800adc4:	f843 2b04 	str.w	r2, [r3], #4
 800adc8:	429f      	cmp	r7, r3
 800adca:	d2fb      	bcs.n	800adc4 <__hexnan+0xcc>
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	b91b      	cbnz	r3, 800add8 <__hexnan+0xe0>
 800add0:	4547      	cmp	r7, r8
 800add2:	d126      	bne.n	800ae22 <__hexnan+0x12a>
 800add4:	2301      	movs	r3, #1
 800add6:	603b      	str	r3, [r7, #0]
 800add8:	2005      	movs	r0, #5
 800adda:	e025      	b.n	800ae28 <__hexnan+0x130>
 800addc:	3501      	adds	r5, #1
 800adde:	2d08      	cmp	r5, #8
 800ade0:	f10b 0b01 	add.w	fp, fp, #1
 800ade4:	dd06      	ble.n	800adf4 <__hexnan+0xfc>
 800ade6:	4544      	cmp	r4, r8
 800ade8:	d9c3      	bls.n	800ad72 <__hexnan+0x7a>
 800adea:	2300      	movs	r3, #0
 800adec:	f844 3c04 	str.w	r3, [r4, #-4]
 800adf0:	2501      	movs	r5, #1
 800adf2:	3c04      	subs	r4, #4
 800adf4:	6822      	ldr	r2, [r4, #0]
 800adf6:	f000 000f 	and.w	r0, r0, #15
 800adfa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800adfe:	6020      	str	r0, [r4, #0]
 800ae00:	e7b7      	b.n	800ad72 <__hexnan+0x7a>
 800ae02:	2508      	movs	r5, #8
 800ae04:	e7b5      	b.n	800ad72 <__hexnan+0x7a>
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0df      	beq.n	800adcc <__hexnan+0xd4>
 800ae0c:	f1c3 0320 	rsb	r3, r3, #32
 800ae10:	f04f 32ff 	mov.w	r2, #4294967295
 800ae14:	40da      	lsrs	r2, r3
 800ae16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ae20:	e7d4      	b.n	800adcc <__hexnan+0xd4>
 800ae22:	3f04      	subs	r7, #4
 800ae24:	e7d2      	b.n	800adcc <__hexnan+0xd4>
 800ae26:	2004      	movs	r0, #4
 800ae28:	b007      	add	sp, #28
 800ae2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae2e <__ascii_mbtowc>:
 800ae2e:	b082      	sub	sp, #8
 800ae30:	b901      	cbnz	r1, 800ae34 <__ascii_mbtowc+0x6>
 800ae32:	a901      	add	r1, sp, #4
 800ae34:	b142      	cbz	r2, 800ae48 <__ascii_mbtowc+0x1a>
 800ae36:	b14b      	cbz	r3, 800ae4c <__ascii_mbtowc+0x1e>
 800ae38:	7813      	ldrb	r3, [r2, #0]
 800ae3a:	600b      	str	r3, [r1, #0]
 800ae3c:	7812      	ldrb	r2, [r2, #0]
 800ae3e:	1e10      	subs	r0, r2, #0
 800ae40:	bf18      	it	ne
 800ae42:	2001      	movne	r0, #1
 800ae44:	b002      	add	sp, #8
 800ae46:	4770      	bx	lr
 800ae48:	4610      	mov	r0, r2
 800ae4a:	e7fb      	b.n	800ae44 <__ascii_mbtowc+0x16>
 800ae4c:	f06f 0001 	mvn.w	r0, #1
 800ae50:	e7f8      	b.n	800ae44 <__ascii_mbtowc+0x16>

0800ae52 <_realloc_r>:
 800ae52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae56:	4680      	mov	r8, r0
 800ae58:	4614      	mov	r4, r2
 800ae5a:	460e      	mov	r6, r1
 800ae5c:	b921      	cbnz	r1, 800ae68 <_realloc_r+0x16>
 800ae5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae62:	4611      	mov	r1, r2
 800ae64:	f7fd bc76 	b.w	8008754 <_malloc_r>
 800ae68:	b92a      	cbnz	r2, 800ae76 <_realloc_r+0x24>
 800ae6a:	f7fd fbff 	bl	800866c <_free_r>
 800ae6e:	4625      	mov	r5, r4
 800ae70:	4628      	mov	r0, r5
 800ae72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae76:	f000 f842 	bl	800aefe <_malloc_usable_size_r>
 800ae7a:	4284      	cmp	r4, r0
 800ae7c:	4607      	mov	r7, r0
 800ae7e:	d802      	bhi.n	800ae86 <_realloc_r+0x34>
 800ae80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae84:	d812      	bhi.n	800aeac <_realloc_r+0x5a>
 800ae86:	4621      	mov	r1, r4
 800ae88:	4640      	mov	r0, r8
 800ae8a:	f7fd fc63 	bl	8008754 <_malloc_r>
 800ae8e:	4605      	mov	r5, r0
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d0ed      	beq.n	800ae70 <_realloc_r+0x1e>
 800ae94:	42bc      	cmp	r4, r7
 800ae96:	4622      	mov	r2, r4
 800ae98:	4631      	mov	r1, r6
 800ae9a:	bf28      	it	cs
 800ae9c:	463a      	movcs	r2, r7
 800ae9e:	f7fc fd56 	bl	800794e <memcpy>
 800aea2:	4631      	mov	r1, r6
 800aea4:	4640      	mov	r0, r8
 800aea6:	f7fd fbe1 	bl	800866c <_free_r>
 800aeaa:	e7e1      	b.n	800ae70 <_realloc_r+0x1e>
 800aeac:	4635      	mov	r5, r6
 800aeae:	e7df      	b.n	800ae70 <_realloc_r+0x1e>

0800aeb0 <__ascii_wctomb>:
 800aeb0:	b149      	cbz	r1, 800aec6 <__ascii_wctomb+0x16>
 800aeb2:	2aff      	cmp	r2, #255	; 0xff
 800aeb4:	bf85      	ittet	hi
 800aeb6:	238a      	movhi	r3, #138	; 0x8a
 800aeb8:	6003      	strhi	r3, [r0, #0]
 800aeba:	700a      	strbls	r2, [r1, #0]
 800aebc:	f04f 30ff 	movhi.w	r0, #4294967295
 800aec0:	bf98      	it	ls
 800aec2:	2001      	movls	r0, #1
 800aec4:	4770      	bx	lr
 800aec6:	4608      	mov	r0, r1
 800aec8:	4770      	bx	lr
	...

0800aecc <fiprintf>:
 800aecc:	b40e      	push	{r1, r2, r3}
 800aece:	b503      	push	{r0, r1, lr}
 800aed0:	4601      	mov	r1, r0
 800aed2:	ab03      	add	r3, sp, #12
 800aed4:	4805      	ldr	r0, [pc, #20]	; (800aeec <fiprintf+0x20>)
 800aed6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeda:	6800      	ldr	r0, [r0, #0]
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	f7ff f98b 	bl	800a1f8 <_vfiprintf_r>
 800aee2:	b002      	add	sp, #8
 800aee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aee8:	b003      	add	sp, #12
 800aeea:	4770      	bx	lr
 800aeec:	20000068 	.word	0x20000068

0800aef0 <abort>:
 800aef0:	b508      	push	{r3, lr}
 800aef2:	2006      	movs	r0, #6
 800aef4:	f000 f834 	bl	800af60 <raise>
 800aef8:	2001      	movs	r0, #1
 800aefa:	f7f6 fd6b 	bl	80019d4 <_exit>

0800aefe <_malloc_usable_size_r>:
 800aefe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af02:	1f18      	subs	r0, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	bfbc      	itt	lt
 800af08:	580b      	ldrlt	r3, [r1, r0]
 800af0a:	18c0      	addlt	r0, r0, r3
 800af0c:	4770      	bx	lr

0800af0e <_raise_r>:
 800af0e:	291f      	cmp	r1, #31
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	4604      	mov	r4, r0
 800af14:	460d      	mov	r5, r1
 800af16:	d904      	bls.n	800af22 <_raise_r+0x14>
 800af18:	2316      	movs	r3, #22
 800af1a:	6003      	str	r3, [r0, #0]
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	bd38      	pop	{r3, r4, r5, pc}
 800af22:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af24:	b112      	cbz	r2, 800af2c <_raise_r+0x1e>
 800af26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af2a:	b94b      	cbnz	r3, 800af40 <_raise_r+0x32>
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 f831 	bl	800af94 <_getpid_r>
 800af32:	462a      	mov	r2, r5
 800af34:	4601      	mov	r1, r0
 800af36:	4620      	mov	r0, r4
 800af38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af3c:	f000 b818 	b.w	800af70 <_kill_r>
 800af40:	2b01      	cmp	r3, #1
 800af42:	d00a      	beq.n	800af5a <_raise_r+0x4c>
 800af44:	1c59      	adds	r1, r3, #1
 800af46:	d103      	bne.n	800af50 <_raise_r+0x42>
 800af48:	2316      	movs	r3, #22
 800af4a:	6003      	str	r3, [r0, #0]
 800af4c:	2001      	movs	r0, #1
 800af4e:	e7e7      	b.n	800af20 <_raise_r+0x12>
 800af50:	2400      	movs	r4, #0
 800af52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af56:	4628      	mov	r0, r5
 800af58:	4798      	blx	r3
 800af5a:	2000      	movs	r0, #0
 800af5c:	e7e0      	b.n	800af20 <_raise_r+0x12>
	...

0800af60 <raise>:
 800af60:	4b02      	ldr	r3, [pc, #8]	; (800af6c <raise+0xc>)
 800af62:	4601      	mov	r1, r0
 800af64:	6818      	ldr	r0, [r3, #0]
 800af66:	f7ff bfd2 	b.w	800af0e <_raise_r>
 800af6a:	bf00      	nop
 800af6c:	20000068 	.word	0x20000068

0800af70 <_kill_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	4d07      	ldr	r5, [pc, #28]	; (800af90 <_kill_r+0x20>)
 800af74:	2300      	movs	r3, #0
 800af76:	4604      	mov	r4, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	4611      	mov	r1, r2
 800af7c:	602b      	str	r3, [r5, #0]
 800af7e:	f7f6 fd19 	bl	80019b4 <_kill>
 800af82:	1c43      	adds	r3, r0, #1
 800af84:	d102      	bne.n	800af8c <_kill_r+0x1c>
 800af86:	682b      	ldr	r3, [r5, #0]
 800af88:	b103      	cbz	r3, 800af8c <_kill_r+0x1c>
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	bd38      	pop	{r3, r4, r5, pc}
 800af8e:	bf00      	nop
 800af90:	20004428 	.word	0x20004428

0800af94 <_getpid_r>:
 800af94:	f7f6 bd06 	b.w	80019a4 <_getpid>

0800af98 <_init>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	bf00      	nop
 800af9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9e:	bc08      	pop	{r3}
 800afa0:	469e      	mov	lr, r3
 800afa2:	4770      	bx	lr

0800afa4 <_fini>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	bf00      	nop
 800afa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afaa:	bc08      	pop	{r3}
 800afac:	469e      	mov	lr, r3
 800afae:	4770      	bx	lr
