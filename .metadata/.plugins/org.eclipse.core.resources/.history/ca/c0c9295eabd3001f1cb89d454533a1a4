/*
 * uSonic.c
 *
 *  Created on: Nov 15, 2024
 *      Author: user
 */
#include "main.h"
#include <stdio.h>
//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c.h"
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart2;
void microDelay(int us) {
//	int t1 = htim2.Instance->CNT;
//	while((htim2.Instance->CNT - t1 < us));
//	{
//		if(htim2.Instance->CNT - t1 > us)	break;
//
//	}
	htim2.Instance->CNT = 0;
	while((htim2.Instance->CNT < us));
}

void Trigger()
{
	HAL_GPIO_WritePin(trig_GPIO_Port, trig_Pin, 0);
	microDelay(10);
	HAL_GPIO_WritePin(trig_GPIO_Port, trig_Pin, 1);
	microDelay(10);
	HAL_GPIO_WritePin(trig_GPIO_Port, trig_Pin, 0);
}
double Distance()
{
	int t0 = 0, t1, t2;
	htim2.Instance->CNT = 0;
	Trigger();
	while(!(HAL_GPIO_ReadPin(echo_GPIO_Port, echo_Pin)))
	{
		if(htim2.Instance->CNT > 30000) return -1;
	}
	t1 = htim2.Instance->CNT;
	//	{
	//		if(HAL_GPIO_ReadPin(echo_GPIO_Port, echo_Pin)) break;
	//	}

	while(HAL_GPIO_ReadPin(echo_GPIO_Port, echo_Pin))
	{
		if(htim2.Instance->CNT > 60000 + t1) return -1;
	}
	t2 = htim2.Instance->CNT;

	double dist = (t2 - t1) * 0.17;



	return dist;
}

static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
