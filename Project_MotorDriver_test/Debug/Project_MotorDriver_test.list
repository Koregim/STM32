
Project_MotorDriver_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004940  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bac  08004bac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bb4  08004bb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  08004c2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004c2c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2db  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e28  00000000  00000000  0002d3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  0002f1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fd  00000000  00000000  0002feb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001730f  00000000  00000000  000308b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4f8  00000000  00000000  00047bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009015e  00000000  00000000  000560bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f54  00000000  00000000  000e621c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ea170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ac8 	.word	0x08004ac8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004ac8 	.word	0x08004ac8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
int mode = 0;
int ccrL = 0, ccrR = 0;
int dutyL = 10, dutyR = 10;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	mode++;
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_GPIO_EXTI_Callback+0x30>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <HAL_GPIO_EXTI_Callback+0x30>)
 800058e:	6013      	str	r3, [r2, #0]
	if(mode > 3)
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_GPIO_EXTI_Callback+0x30>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b03      	cmp	r3, #3
 8000596:	dd02      	ble.n	800059e <HAL_GPIO_EXTI_Callback+0x22>
		mode = 0;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_GPIO_EXTI_Callback+0x30>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	2000011c 	.word	0x2000011c

080005b0 <forward>:
void forward()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D_A1_GPIO_Port, D_A1_Pin, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2120      	movs	r1, #32
 80005b8:	4820      	ldr	r0, [pc, #128]	; (800063c <forward+0x8c>)
 80005ba:	f001 f8d1 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_A2_GPIO_Port, D_A2_Pin, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2110      	movs	r1, #16
 80005c2:	481e      	ldr	r0, [pc, #120]	; (800063c <forward+0x8c>)
 80005c4:	f001 f8cc 	bl	8001760 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D_B3_GPIO_Port, D_B3_Pin, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ce:	481b      	ldr	r0, [pc, #108]	; (800063c <forward+0x8c>)
 80005d0:	f001 f8c6 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_B4_GPIO_Port, D_B4_Pin, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	4818      	ldr	r0, [pc, #96]	; (800063c <forward+0x8c>)
 80005dc:	f001 f8c0 	bl	8001760 <HAL_GPIO_WritePin>

	dutyL = 35;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <forward+0x90>)
 80005e2:	2223      	movs	r2, #35	; 0x23
 80005e4:	601a      	str	r2, [r3, #0]
	dutyR = 35;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <forward+0x94>)
 80005e8:	2223      	movs	r2, #35	; 0x23
 80005ea:	601a      	str	r2, [r3, #0]
	ccrL = htim2.Instance->ARR * dutyL / 100;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <forward+0x98>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <forward+0x90>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	fb02 f303 	mul.w	r3, r2, r3
 80005fa:	4a14      	ldr	r2, [pc, #80]	; (800064c <forward+0x9c>)
 80005fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	461a      	mov	r2, r3
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <forward+0xa0>)
 8000606:	601a      	str	r2, [r3, #0]
	ccrR = htim2.Instance->ARR * dutyR / 100;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <forward+0x98>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060e:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <forward+0x94>)
 8000610:	6812      	ldr	r2, [r2, #0]
 8000612:	fb02 f303 	mul.w	r3, r2, r3
 8000616:	4a0d      	ldr	r2, [pc, #52]	; (800064c <forward+0x9c>)
 8000618:	fba2 2303 	umull	r2, r3, r2, r3
 800061c:	095b      	lsrs	r3, r3, #5
 800061e:	461a      	mov	r2, r3
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <forward+0xa4>)
 8000622:	601a      	str	r2, [r3, #0]
	htim2.Instance->CCR3 = ccrL;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <forward+0xa0>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <forward+0x98>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	63da      	str	r2, [r3, #60]	; 0x3c
	htim2.Instance->CCR2 = ccrR;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <forward+0xa4>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <forward+0x98>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40020400 	.word	0x40020400
 8000640:	20000000 	.word	0x20000000
 8000644:	20000004 	.word	0x20000004
 8000648:	2000008c 	.word	0x2000008c
 800064c:	51eb851f 	.word	0x51eb851f
 8000650:	20000120 	.word	0x20000120
 8000654:	20000124 	.word	0x20000124

08000658 <left>:
void left()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D_A1_GPIO_Port, D_A1_Pin, 1);
 800065c:	2201      	movs	r2, #1
 800065e:	2120      	movs	r1, #32
 8000660:	4820      	ldr	r0, [pc, #128]	; (80006e4 <left+0x8c>)
 8000662:	f001 f87d 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_A2_GPIO_Port, D_A2_Pin, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2110      	movs	r1, #16
 800066a:	481e      	ldr	r0, [pc, #120]	; (80006e4 <left+0x8c>)
 800066c:	f001 f878 	bl	8001760 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D_B3_GPIO_Port, D_B3_Pin, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000676:	481b      	ldr	r0, [pc, #108]	; (80006e4 <left+0x8c>)
 8000678:	f001 f872 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_B4_GPIO_Port, D_B4_Pin, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000682:	4818      	ldr	r0, [pc, #96]	; (80006e4 <left+0x8c>)
 8000684:	f001 f86c 	bl	8001760 <HAL_GPIO_WritePin>

	dutyL = 25;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <left+0x90>)
 800068a:	2219      	movs	r2, #25
 800068c:	601a      	str	r2, [r3, #0]
	dutyR = 40;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <left+0x94>)
 8000690:	2228      	movs	r2, #40	; 0x28
 8000692:	601a      	str	r2, [r3, #0]
	ccrL = htim2.Instance->ARR * dutyL / 100;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <left+0x98>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <left+0x90>)
 800069c:	6812      	ldr	r2, [r2, #0]
 800069e:	fb02 f303 	mul.w	r3, r2, r3
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <left+0x9c>)
 80006a4:	fba2 2303 	umull	r2, r3, r2, r3
 80006a8:	095b      	lsrs	r3, r3, #5
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <left+0xa0>)
 80006ae:	601a      	str	r2, [r3, #0]
	ccrR = htim2.Instance->ARR * dutyR / 100;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <left+0x98>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <left+0x94>)
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <left+0x9c>)
 80006c0:	fba2 2303 	umull	r2, r3, r2, r3
 80006c4:	095b      	lsrs	r3, r3, #5
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <left+0xa4>)
 80006ca:	601a      	str	r2, [r3, #0]
	htim2.Instance->CCR3 = ccrL;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <left+0xa0>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <left+0x98>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	63da      	str	r2, [r3, #60]	; 0x3c
	htim2.Instance->CCR2 = ccrR;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <left+0xa4>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <left+0x98>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40020400 	.word	0x40020400
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000004 	.word	0x20000004
 80006f0:	2000008c 	.word	0x2000008c
 80006f4:	51eb851f 	.word	0x51eb851f
 80006f8:	20000120 	.word	0x20000120
 80006fc:	20000124 	.word	0x20000124

08000700 <right>:
void right()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D_A1_GPIO_Port, D_A1_Pin, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	2120      	movs	r1, #32
 8000708:	4820      	ldr	r0, [pc, #128]	; (800078c <right+0x8c>)
 800070a:	f001 f829 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_A2_GPIO_Port, D_A2_Pin, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2110      	movs	r1, #16
 8000712:	481e      	ldr	r0, [pc, #120]	; (800078c <right+0x8c>)
 8000714:	f001 f824 	bl	8001760 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D_B3_GPIO_Port, D_B3_Pin, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	481b      	ldr	r0, [pc, #108]	; (800078c <right+0x8c>)
 8000720:	f001 f81e 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_B4_GPIO_Port, D_B4_Pin, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072a:	4818      	ldr	r0, [pc, #96]	; (800078c <right+0x8c>)
 800072c:	f001 f818 	bl	8001760 <HAL_GPIO_WritePin>

	dutyL = 40;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <right+0x90>)
 8000732:	2228      	movs	r2, #40	; 0x28
 8000734:	601a      	str	r2, [r3, #0]
	dutyR = 25;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <right+0x94>)
 8000738:	2219      	movs	r2, #25
 800073a:	601a      	str	r2, [r3, #0]
	ccrL = htim2.Instance->ARR * dutyL / 100;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <right+0x98>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000742:	4a13      	ldr	r2, [pc, #76]	; (8000790 <right+0x90>)
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	fb02 f303 	mul.w	r3, r2, r3
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <right+0x9c>)
 800074c:	fba2 2303 	umull	r2, r3, r2, r3
 8000750:	095b      	lsrs	r3, r3, #5
 8000752:	461a      	mov	r2, r3
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <right+0xa0>)
 8000756:	601a      	str	r2, [r3, #0]
	ccrR = htim2.Instance->ARR * dutyR / 100;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <right+0x98>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <right+0x94>)
 8000760:	6812      	ldr	r2, [r2, #0]
 8000762:	fb02 f303 	mul.w	r3, r2, r3
 8000766:	4a0d      	ldr	r2, [pc, #52]	; (800079c <right+0x9c>)
 8000768:	fba2 2303 	umull	r2, r3, r2, r3
 800076c:	095b      	lsrs	r3, r3, #5
 800076e:	461a      	mov	r2, r3
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <right+0xa4>)
 8000772:	601a      	str	r2, [r3, #0]
	htim2.Instance->CCR3 = ccrL;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <right+0xa0>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <right+0x98>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	63da      	str	r2, [r3, #60]	; 0x3c
	htim2.Instance->CCR2 = ccrR;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <right+0xa4>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <right+0x98>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40020400 	.word	0x40020400
 8000790:	20000000 	.word	0x20000000
 8000794:	20000004 	.word	0x20000004
 8000798:	2000008c 	.word	0x2000008c
 800079c:	51eb851f 	.word	0x51eb851f
 80007a0:	20000120 	.word	0x20000120
 80007a4:	20000124 	.word	0x20000124

080007a8 <reverse>:
void reverse()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D_A1_GPIO_Port, D_A1_Pin, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2120      	movs	r1, #32
 80007b0:	4820      	ldr	r0, [pc, #128]	; (8000834 <reverse+0x8c>)
 80007b2:	f000 ffd5 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_A2_GPIO_Port, D_A2_Pin, 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2110      	movs	r1, #16
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <reverse+0x8c>)
 80007bc:	f000 ffd0 	bl	8001760 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D_B3_GPIO_Port, D_B3_Pin, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c6:	481b      	ldr	r0, [pc, #108]	; (8000834 <reverse+0x8c>)
 80007c8:	f000 ffca 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_B4_GPIO_Port, D_B4_Pin, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	4818      	ldr	r0, [pc, #96]	; (8000834 <reverse+0x8c>)
 80007d4:	f000 ffc4 	bl	8001760 <HAL_GPIO_WritePin>

	dutyL = 25;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <reverse+0x90>)
 80007da:	2219      	movs	r2, #25
 80007dc:	601a      	str	r2, [r3, #0]
	dutyR = 25;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <reverse+0x94>)
 80007e0:	2219      	movs	r2, #25
 80007e2:	601a      	str	r2, [r3, #0]
	ccrL = htim2.Instance->ARR * dutyL / 100;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <reverse+0x98>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ea:	4a13      	ldr	r2, [pc, #76]	; (8000838 <reverse+0x90>)
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <reverse+0x9c>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	095b      	lsrs	r3, r3, #5
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <reverse+0xa0>)
 80007fe:	601a      	str	r2, [r3, #0]
	ccrR = htim2.Instance->ARR * dutyR / 100;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <reverse+0x98>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	4a0d      	ldr	r2, [pc, #52]	; (800083c <reverse+0x94>)
 8000808:	6812      	ldr	r2, [r2, #0]
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <reverse+0x9c>)
 8000810:	fba2 2303 	umull	r2, r3, r2, r3
 8000814:	095b      	lsrs	r3, r3, #5
 8000816:	461a      	mov	r2, r3
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <reverse+0xa4>)
 800081a:	601a      	str	r2, [r3, #0]
	htim2.Instance->CCR3 = ccrL;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <reverse+0xa0>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <reverse+0x98>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	63da      	str	r2, [r3, #60]	; 0x3c
	htim2.Instance->CCR2 = ccrR;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <reverse+0xa4>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <reverse+0x98>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40020400 	.word	0x40020400
 8000838:	20000000 	.word	0x20000000
 800083c:	20000004 	.word	0x20000004
 8000840:	2000008c 	.word	0x2000008c
 8000844:	51eb851f 	.word	0x51eb851f
 8000848:	20000120 	.word	0x20000120
 800084c:	20000124 	.word	0x20000124

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000854:	f000 fc64 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000858:	f000 f850 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085c:	f000 f962 	bl	8000b24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000860:	f000 f936 	bl	8000ad0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000864:	f000 f8b4 	bl	80009d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("DC Motor & Motor Driver Test");
 8000868:	481f      	ldr	r0, [pc, #124]	; (80008e8 <main+0x98>)
 800086a:	f000 fa37 	bl	8000cdc <ProgramStart>

  HAL_GPIO_WritePin(D_A1_GPIO_Port, D_A1_Pin, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	2120      	movs	r1, #32
 8000872:	481e      	ldr	r0, [pc, #120]	; (80008ec <main+0x9c>)
 8000874:	f000 ff74 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_A2_GPIO_Port, D_A2_Pin, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2110      	movs	r1, #16
 800087c:	481b      	ldr	r0, [pc, #108]	; (80008ec <main+0x9c>)
 800087e:	f000 ff6f 	bl	8001760 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(D_B3_GPIO_Port, D_B3_Pin, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	4818      	ldr	r0, [pc, #96]	; (80008ec <main+0x9c>)
 800088a:	f000 ff69 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_B4_GPIO_Port, D_B4_Pin, 1);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000894:	4815      	ldr	r0, [pc, #84]	; (80008ec <main+0x9c>)
 8000896:	f000 ff63 	bl	8001760 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800089a:	2104      	movs	r1, #4
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <main+0xa0>)
 800089e:	f001 fcd1 	bl	8002244 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80008a2:	2108      	movs	r1, #8
 80008a4:	4812      	ldr	r0, [pc, #72]	; (80008f0 <main+0xa0>)
 80008a6:	f001 fccd 	bl	8002244 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  printf("111111111111111");
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <main+0xa4>)
 80008ac:	f002 ffae 	bl	800380c <iprintf>
  while (1)
  {

	  if(mode == 0)
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <main+0xa8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <main+0x6e>
		  forward();
 80008b8:	f7ff fe7a 	bl	80005b0 <forward>
 80008bc:	e7f8      	b.n	80008b0 <main+0x60>
	  else if(mode == 1)
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <main+0xa8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d102      	bne.n	80008cc <main+0x7c>
		  left();
 80008c6:	f7ff fec7 	bl	8000658 <left>
 80008ca:	e7f1      	b.n	80008b0 <main+0x60>
	  else if(mode == 2)
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <main+0xa8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d102      	bne.n	80008da <main+0x8a>
		  right();
 80008d4:	f7ff ff14 	bl	8000700 <right>
 80008d8:	e7ea      	b.n	80008b0 <main+0x60>
	  else if(mode == 3)
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <main+0xa8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d1e6      	bne.n	80008b0 <main+0x60>
		  reverse();
 80008e2:	f7ff ff61 	bl	80007a8 <reverse>
	  if(mode == 0)
 80008e6:	e7e3      	b.n	80008b0 <main+0x60>
 80008e8:	08004ae0 	.word	0x08004ae0
 80008ec:	40020400 	.word	0x40020400
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	08004b00 	.word	0x08004b00
 80008f8:	2000011c 	.word	0x2000011c

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	2230      	movs	r2, #48	; 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f003 f992 	bl	8003c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <SystemClock_Config+0xcc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a27      	ldr	r2, [pc, #156]	; (80009c8 <SystemClock_Config+0xcc>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <SystemClock_Config+0xcc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <SystemClock_Config+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a21      	ldr	r2, [pc, #132]	; (80009cc <SystemClock_Config+0xd0>)
 8000946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <SystemClock_Config+0xd0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	2301      	movs	r3, #1
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000960:	2310      	movs	r3, #16
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000968:	2300      	movs	r3, #0
 800096a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800096c:	2310      	movs	r3, #16
 800096e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000970:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000976:	2304      	movs	r3, #4
 8000978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800097a:	2304      	movs	r3, #4
 800097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	4618      	mov	r0, r3
 8000984:	f000 ff1e 	bl	80017c4 <HAL_RCC_OscConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800098e:	f000 f957 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	2302      	movs	r3, #2
 8000998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2102      	movs	r1, #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f980 	bl	8001cb4 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ba:	f000 f941 	bl	8000c40 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	; 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08e      	sub	sp, #56	; 0x38
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	f107 0320 	add.w	r3, r7, #32
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
 80009fc:	615a      	str	r2, [r3, #20]
 80009fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000a08:	4b30      	ldr	r3, [pc, #192]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a0a:	2253      	movs	r2, #83	; 0x53
 8000a0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a28:	4828      	ldr	r0, [pc, #160]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a2a:	f001 fb63 	bl	80020f4 <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a34:	f000 f904 	bl	8000c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4821      	ldr	r0, [pc, #132]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a46:	f001 fd6f 	bl	8002528 <HAL_TIM_ConfigClockSource>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a50:	f000 f8f6 	bl	8000c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a54:	481d      	ldr	r0, [pc, #116]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a56:	f001 fb9c 	bl	8002192 <HAL_TIM_PWM_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a60:	f000 f8ee 	bl	8000c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	4619      	mov	r1, r3
 8000a72:	4816      	ldr	r0, [pc, #88]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a74:	f002 f8f8 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a7e:	f000 f8df 	bl	8000c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a82:	2360      	movs	r3, #96	; 0x60
 8000a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2204      	movs	r2, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000a9a:	f001 fc83 	bl	80023a4 <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000aa4:	f000 f8cc 	bl	8000c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2208      	movs	r2, #8
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000ab0:	f001 fc78 	bl	80023a4 <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000aba:	f000 f8c1 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <MX_TIM2_Init+0xfc>)
 8000ac0:	f000 f99c 	bl	8000dfc <HAL_TIM_MspPostInit>

}
 8000ac4:	bf00      	nop
 8000ac6:	3738      	adds	r7, #56	; 0x38
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000008c 	.word	0x2000008c

08000ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <MX_USART2_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b08:	f002 f91c 	bl	8002d44 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f000 f895 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000d4 	.word	0x200000d4
 8000b20:	40004400 	.word	0x40004400

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a3b      	ldr	r2, [pc, #236]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a34      	ldr	r2, [pc, #208]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a26      	ldr	r2, [pc, #152]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <MX_GPIO_Init+0x10c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2120      	movs	r1, #32
 8000bae:	4821      	ldr	r0, [pc, #132]	; (8000c34 <MX_GPIO_Init+0x110>)
 8000bb0:	f000 fdd6 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_A2_Pin|D_A1_Pin|D_B4_Pin|D_B3_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 714c 	mov.w	r1, #816	; 0x330
 8000bba:	481f      	ldr	r0, [pc, #124]	; (8000c38 <MX_GPIO_Init+0x114>)
 8000bbc:	f000 fdd0 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4819      	ldr	r0, [pc, #100]	; (8000c3c <MX_GPIO_Init+0x118>)
 8000bd8:	f000 fc26 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <MX_GPIO_Init+0x110>)
 8000bf4:	f000 fc18 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_A2_Pin D_A1_Pin D_B4_Pin D_B3_Pin */
  GPIO_InitStruct.Pin = D_A2_Pin|D_A1_Pin|D_B4_Pin|D_B3_Pin;
 8000bf8:	f44f 734c 	mov.w	r3, #816	; 0x330
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <MX_GPIO_Init+0x114>)
 8000c12:	f000 fc09 	bl	8001428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2028      	movs	r0, #40	; 0x28
 8000c1c:	f000 fbcd 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c20:	2028      	movs	r0, #40	; 0x28
 8000c22:	f000 fbe6 	bl	80013f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40020800 	.word	0x40020800

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <__io_getchar>:
extern UART_HandleTypeDef huart2;
//int *hi2c = NULL;
//I2C_HandleTypeDef *hi2c = NULL;

int __io_getchar(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
	char ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000c52:	bf00      	nop
 8000c54:	1df9      	adds	r1, r7, #7
 8000c56:	230a      	movs	r3, #10
 8000c58:	2201      	movs	r2, #1
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <__io_getchar+0x44>)
 8000c5c:	f002 f94d 	bl	8002efa <HAL_UART_Receive>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f6      	bne.n	8000c54 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10);	//Echo
 8000c66:	1df9      	adds	r1, r7, #7
 8000c68:	230a      	movs	r3, #10
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <__io_getchar+0x44>)
 8000c6e:	f002 f8b9 	bl	8002de4 <HAL_UART_Transmit>
	if(ch == '\r')
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b0d      	cmp	r3, #13
 8000c76:	d105      	bne.n	8000c84 <__io_getchar+0x38>
		HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000c78:	230a      	movs	r3, #10
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4905      	ldr	r1, [pc, #20]	; (8000c94 <__io_getchar+0x48>)
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <__io_getchar+0x44>)
 8000c80:	f002 f8b0 	bl	8002de4 <HAL_UART_Transmit>
	return ch;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000d4 	.word	0x200000d4
 8000c94:	08004b10 	.word	0x08004b10

08000c98 <__io_putchar>:
int __io_putchar(int ch)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000ca0:	1d39      	adds	r1, r7, #4
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <__io_putchar+0x20>)
 8000ca8:	f002 f89c 	bl	8002de4 <HAL_UART_Transmit>
	return ch;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000d4 	.word	0x200000d4

08000cbc <StandBy>:

void StandBy()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000cc0:	bf00      	nop
 8000cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <StandBy+0x1c>)
 8000cc8:	f000 fd32 	bl	8001730 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f7      	bne.n	8000cc2 <StandBy+0x6>
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40020800 	.word	0x40020800

08000cdc <ProgramStart>:

void ProgramStart(char * str)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	//printf("\033[2J\033[0;0H");
	cls();
 8000ce4:	f000 f820 	bl	8000d28 <cls>
	Cursor(0, 0);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f826 	bl	8000d3c <Cursor>
	printf("Program Name - %s\r\n", str);
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	480a      	ldr	r0, [pc, #40]	; (8000d1c <ProgramStart+0x40>)
 8000cf4:	f002 fd8a 	bl	800380c <iprintf>
	printf("Press Blue-Button(B1) to Start...\r\n");
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <ProgramStart+0x44>)
 8000cfa:	f002 fded 	bl	80038d8 <puts>
	StandBy();
 8000cfe:	f7ff ffdd 	bl	8000cbc <StandBy>
	setvbuf(stdin, NULL, _IONBF, 0);	//scanf buffer clear
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <ProgramStart+0x48>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6858      	ldr	r0, [r3, #4]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f002 fdeb 	bl	80038e8 <setvbuf>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	08004b14 	.word	0x08004b14
 8000d20:	08004b28 	.word	0x08004b28
 8000d24:	2000006c 	.word	0x2000006c

08000d28 <cls>:

void cls()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <cls+0x10>)
 8000d2e:	f002 fd6d 	bl	800380c <iprintf>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08004b4c 	.word	0x08004b4c

08000d3c <Cursor>:

void Cursor(int x, int y)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 8000d46:	f107 000c 	add.w	r0, r7, #12
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	4906      	ldr	r1, [pc, #24]	; (8000d68 <Cursor+0x2c>)
 8000d50:	f002 fe78 	bl	8003a44 <siprintf>
	puts(buf);   		//or printf("%s", buf);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 fdbd 	bl	80038d8 <puts>
}
 8000d5e:	bf00      	nop
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08004b54 	.word	0x08004b54

08000d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_MspInit+0x4c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f000 fafa 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d10d      	bne.n	8000dea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_TIM_Base_MspInit+0x3c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_TIM_Base_MspInit+0x3c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_TIM_Base_MspInit+0x3c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e1c:	d11e      	bne.n	8000e5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_TIM_MspPostInit+0x68>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_TIM_MspPostInit+0x68>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_TIM_MspPostInit+0x68>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_CH3_Pin|TIM2_CH2_Pin;
 8000e3a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000e3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <HAL_TIM_MspPostInit+0x6c>)
 8000e58:	f000 fae6 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020400 	.word	0x40020400

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <HAL_UART_MspInit+0x84>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d12b      	bne.n	8000ee6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_UART_MspInit+0x88>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_UART_MspInit+0x8c>)
 8000ee2:	f000 faa1 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40004400 	.word	0x40004400
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f93c 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f58:	f000 fc1c 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00a      	b.n	8000f88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f72:	f7ff fe6b 	bl	8000c4c <__io_getchar>
 8000f76:	4601      	mov	r1, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	b2ca      	uxtb	r2, r1
 8000f80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf0      	blt.n	8000f72 <_read+0x12>
  }

  return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e009      	b.n	8000fc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	60ba      	str	r2, [r7, #8]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe6f 	bl	8000c98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf1      	blt.n	8000fac <_write+0x12>
  }
  return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_close>:

int _close(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffa:	605a      	str	r2, [r3, #4]
  return 0;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_isatty>:

int _isatty(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f002 fe30 	bl	8003cd0 <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20020000 	.word	0x20020000
 800109c:	00000400 	.word	0x00000400
 80010a0:	20000128 	.word	0x20000128
 80010a4:	20000280 	.word	0x20000280

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d0:	f7ff ffea 	bl	80010a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fa:	f002 fdef 	bl	8003cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fba7 	bl	8000850 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001110:	08004bbc 	.word	0x08004bbc
  ldr r2, =_sbss
 8001114:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001118:	2000027c 	.word	0x2000027c

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_Init+0x40>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_Init+0x40>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_Init+0x40>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f92b 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fe0a 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f943 	bl	800140e <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f90b 	bl	80013ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000010 	.word	0x20000010
 80011c0:	2000000c 	.word	0x2000000c

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000010 	.word	0x20000010
 80011e8:	2000012c 	.word	0x2000012c

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2000012c 	.word	0x2000012c

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff8e 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff29 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013cc:	f7ff ff3e 	bl	800124c <__NVIC_GetPriorityGrouping>
 80013d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff ff8e 	bl	80012f8 <NVIC_EncodePriority>
 80013dc:	4602      	mov	r2, r0
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff5d 	bl	80012a4 <__NVIC_SetPriority>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff31 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffa2 	bl	8001360 <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e159      	b.n	80016f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001444:	2201      	movs	r2, #1
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	429a      	cmp	r2, r3
 800145e:	f040 8148 	bne.w	80016f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d005      	beq.n	800147a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001476:	2b02      	cmp	r3, #2
 8001478:	d130      	bne.n	80014dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b0:	2201      	movs	r2, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	f003 0201 	and.w	r2, r3, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d017      	beq.n	8001518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d123      	bne.n	800156c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	08da      	lsrs	r2, r3, #3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3208      	adds	r2, #8
 800152c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3208      	adds	r2, #8
 8001566:	69b9      	ldr	r1, [r7, #24]
 8001568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0203 	and.w	r2, r3, #3
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80a2 	beq.w	80016f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b57      	ldr	r3, [pc, #348]	; (8001710 <HAL_GPIO_Init+0x2e8>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a56      	ldr	r2, [pc, #344]	; (8001710 <HAL_GPIO_Init+0x2e8>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	4b54      	ldr	r3, [pc, #336]	; (8001710 <HAL_GPIO_Init+0x2e8>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ca:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_GPIO_Init+0x2ec>)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a49      	ldr	r2, [pc, #292]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x202>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a48      	ldr	r2, [pc, #288]	; (800171c <HAL_GPIO_Init+0x2f4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x1fe>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a47      	ldr	r2, [pc, #284]	; (8001720 <HAL_GPIO_Init+0x2f8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x1fa>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a46      	ldr	r2, [pc, #280]	; (8001724 <HAL_GPIO_Init+0x2fc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x1f6>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a45      	ldr	r2, [pc, #276]	; (8001728 <HAL_GPIO_Init+0x300>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x1f2>
 8001616:	2304      	movs	r3, #4
 8001618:	e008      	b.n	800162c <HAL_GPIO_Init+0x204>
 800161a:	2307      	movs	r3, #7
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x204>
 800161e:	2303      	movs	r3, #3
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x204>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x204>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x204>
 800162a:	2300      	movs	r3, #0
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f002 0203 	and.w	r2, r2, #3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4093      	lsls	r3, r2
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163c:	4935      	ldr	r1, [pc, #212]	; (8001714 <HAL_GPIO_Init+0x2ec>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164a:	4b38      	ldr	r3, [pc, #224]	; (800172c <HAL_GPIO_Init+0x304>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166e:	4a2f      	ldr	r2, [pc, #188]	; (800172c <HAL_GPIO_Init+0x304>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_GPIO_Init+0x304>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001698:	4a24      	ldr	r2, [pc, #144]	; (800172c <HAL_GPIO_Init+0x304>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_GPIO_Init+0x304>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <HAL_GPIO_Init+0x304>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_GPIO_Init+0x304>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <HAL_GPIO_Init+0x304>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	f67f aea2 	bls.w	8001444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40013800 	.word	0x40013800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000
 800172c:	40013c00 	.word	0x40013c00

08001730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e001      	b.n	8001752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fee2 	bl	800057c <HAL_GPIO_EXTI_Callback>
  }
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40013c00 	.word	0x40013c00

080017c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e267      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d075      	beq.n	80018ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017e2:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d00c      	beq.n	8001808 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ee:	4b85      	ldr	r3, [pc, #532]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d112      	bne.n	8001820 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fa:	4b82      	ldr	r3, [pc, #520]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001806:	d10b      	bne.n	8001820 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	4b7e      	ldr	r3, [pc, #504]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d05b      	beq.n	80018cc <HAL_RCC_OscConfig+0x108>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d157      	bne.n	80018cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e242      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001828:	d106      	bne.n	8001838 <HAL_RCC_OscConfig+0x74>
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a75      	ldr	r2, [pc, #468]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xb0>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x98>
 8001842:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a6f      	ldr	r2, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6c      	ldr	r2, [pc, #432]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xb0>
 800185c:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a68      	ldr	r2, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b66      	ldr	r3, [pc, #408]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a65      	ldr	r2, [pc, #404]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fcb6 	bl	80011ec <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fcb2 	bl	80011ec <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e207      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xc0>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fca2 	bl	80011ec <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fc9e 	bl	80011ec <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1f3      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0xe8>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018da:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d11c      	bne.n	800192c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x152>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e1c7      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4937      	ldr	r1, [pc, #220]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e03a      	b.n	80019a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff fc57 	bl	80011ec <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fc53 	bl	80011ec <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1a8      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4925      	ldr	r1, [pc, #148]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e015      	b.n	80019a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_RCC_OscConfig+0x244>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fc36 	bl	80011ec <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff fc32 	bl	80011ec <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e187      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d036      	beq.n	8001a1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d016      	beq.n	80019e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_RCC_OscConfig+0x248>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff fc16 	bl	80011ec <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fc12 	bl	80011ec <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e167      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x240>)
 80019d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x200>
 80019e2:	e01b      	b.n	8001a1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_OscConfig+0x248>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff fbff 	bl	80011ec <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	e00e      	b.n	8001a10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f2:	f7ff fbfb 	bl	80011ec <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d907      	bls.n	8001a10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e150      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
 8001a04:	40023800 	.word	0x40023800
 8001a08:	42470000 	.word	0x42470000
 8001a0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	4b88      	ldr	r3, [pc, #544]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1ea      	bne.n	80019f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8097 	beq.w	8001b58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2e:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10f      	bne.n	8001a5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b7d      	ldr	r3, [pc, #500]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a7c      	ldr	r2, [pc, #496]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b7a      	ldr	r3, [pc, #488]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a56:	2301      	movs	r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	4b77      	ldr	r3, [pc, #476]	; (8001c38 <HAL_RCC_OscConfig+0x474>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d118      	bne.n	8001a98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a66:	4b74      	ldr	r3, [pc, #464]	; (8001c38 <HAL_RCC_OscConfig+0x474>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a73      	ldr	r2, [pc, #460]	; (8001c38 <HAL_RCC_OscConfig+0x474>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fbbb 	bl	80011ec <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7ff fbb7 	bl	80011ec <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e10c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <HAL_RCC_OscConfig+0x474>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x2ea>
 8001aa0:	4b64      	ldr	r3, [pc, #400]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a63      	ldr	r2, [pc, #396]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001aac:	e01c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x324>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x30c>
 8001ab6:	4b5f      	ldr	r3, [pc, #380]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	4a5e      	ldr	r2, [pc, #376]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	4a5b      	ldr	r2, [pc, #364]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x324>
 8001ad0:	4b58      	ldr	r3, [pc, #352]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	4a57      	ldr	r2, [pc, #348]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	6713      	str	r3, [r2, #112]	; 0x70
 8001adc:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	f023 0304 	bic.w	r3, r3, #4
 8001ae6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d015      	beq.n	8001b1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff fb7c 	bl	80011ec <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff fb78 	bl	80011ec <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e0cb      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0e:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0ee      	beq.n	8001af8 <HAL_RCC_OscConfig+0x334>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fb66 	bl	80011ec <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7ff fb62 	bl	80011ec <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e0b5      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ee      	bne.n	8001b24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	4a38      	ldr	r2, [pc, #224]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a1 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b62:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d05c      	beq.n	8001c28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d141      	bne.n	8001bfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_RCC_OscConfig+0x478>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fb36 	bl	80011ec <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff fb32 	bl	80011ec <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e087      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	019b      	lsls	r3, r3, #6
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	491b      	ldr	r1, [pc, #108]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_RCC_OscConfig+0x478>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fb0b 	bl	80011ec <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff fb07 	bl	80011ec <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e05c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x416>
 8001bf8:	e054      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_RCC_OscConfig+0x478>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff faf4 	bl	80011ec <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff faf0 	bl	80011ec <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e045      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x444>
 8001c26:	e03d      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e038      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x4ec>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d028      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d121      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d11a      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c70:	4013      	ands	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d111      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	085b      	lsrs	r3, r3, #1
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0cc      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d90c      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0b8      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d08:	4b59      	ldr	r3, [pc, #356]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a58      	ldr	r2, [pc, #352]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d20:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a52      	ldr	r2, [pc, #328]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2c:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	494d      	ldr	r1, [pc, #308]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d044      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d119      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e07f      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d72:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06f      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e067      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d92:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 0203 	bic.w	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4934      	ldr	r1, [pc, #208]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da4:	f7ff fa22 	bl	80011ec <HAL_GetTick>
 8001da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7ff fa1e 	bl	80011ec <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e04f      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 020c 	and.w	r2, r3, #12
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d1eb      	bne.n	8001dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d20c      	bcs.n	8001dfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e032      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4916      	ldr	r1, [pc, #88]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	490e      	ldr	r1, [pc, #56]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e3a:	f000 f821 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	490a      	ldr	r1, [pc, #40]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	5ccb      	ldrb	r3, [r1, r3]
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	4a09      	ldr	r2, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f982 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023c00 	.word	0x40023c00
 8001e70:	40023800 	.word	0x40023800
 8001e74:	08004b60 	.word	0x08004b60
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	2000000c 	.word	0x2000000c

08001e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e84:	b094      	sub	sp, #80	; 0x50
 8001e86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e98:	4b79      	ldr	r3, [pc, #484]	; (8002080 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	f200 80e1 	bhi.w	800206c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d003      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0x3a>
 8001eb2:	e0db      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb4:	4b73      	ldr	r3, [pc, #460]	; (8002084 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eb8:	e0db      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eba:	4b73      	ldr	r3, [pc, #460]	; (8002088 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ebc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ebe:	e0d8      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec0:	4b6f      	ldr	r3, [pc, #444]	; (8002080 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eca:	4b6d      	ldr	r3, [pc, #436]	; (8002080 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d063      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed6:	4b6a      	ldr	r3, [pc, #424]	; (8002080 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	099b      	lsrs	r3, r3, #6
 8001edc:	2200      	movs	r2, #0
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ee0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eea:	2300      	movs	r3, #0
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
 8001eee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ef2:	4622      	mov	r2, r4
 8001ef4:	462b      	mov	r3, r5
 8001ef6:	f04f 0000 	mov.w	r0, #0
 8001efa:	f04f 0100 	mov.w	r1, #0
 8001efe:	0159      	lsls	r1, r3, #5
 8001f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f04:	0150      	lsls	r0, r2, #5
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	1a51      	subs	r1, r2, r1
 8001f0e:	6139      	str	r1, [r7, #16]
 8001f10:	4629      	mov	r1, r5
 8001f12:	eb63 0301 	sbc.w	r3, r3, r1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f24:	4659      	mov	r1, fp
 8001f26:	018b      	lsls	r3, r1, #6
 8001f28:	4651      	mov	r1, sl
 8001f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f2e:	4651      	mov	r1, sl
 8001f30:	018a      	lsls	r2, r1, #6
 8001f32:	4651      	mov	r1, sl
 8001f34:	ebb2 0801 	subs.w	r8, r2, r1
 8001f38:	4659      	mov	r1, fp
 8001f3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f52:	4690      	mov	r8, r2
 8001f54:	4699      	mov	r9, r3
 8001f56:	4623      	mov	r3, r4
 8001f58:	eb18 0303 	adds.w	r3, r8, r3
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	462b      	mov	r3, r5
 8001f60:	eb49 0303 	adc.w	r3, r9, r3
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f72:	4629      	mov	r1, r5
 8001f74:	024b      	lsls	r3, r1, #9
 8001f76:	4621      	mov	r1, r4
 8001f78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	024a      	lsls	r2, r1, #9
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f86:	2200      	movs	r2, #0
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f90:	f7fe f976 	bl	8000280 <__aeabi_uldivmod>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4613      	mov	r3, r2
 8001f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f9c:	e058      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	099b      	lsrs	r3, r3, #6
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	4611      	mov	r1, r2
 8001faa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fae:	623b      	str	r3, [r7, #32]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fb8:	4642      	mov	r2, r8
 8001fba:	464b      	mov	r3, r9
 8001fbc:	f04f 0000 	mov.w	r0, #0
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	0159      	lsls	r1, r3, #5
 8001fc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fca:	0150      	lsls	r0, r2, #5
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fe8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ff0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ff4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	00eb      	lsls	r3, r5, #3
 8002002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002006:	00e2      	lsls	r2, r4, #3
 8002008:	4614      	mov	r4, r2
 800200a:	461d      	mov	r5, r3
 800200c:	4643      	mov	r3, r8
 800200e:	18e3      	adds	r3, r4, r3
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	464b      	mov	r3, r9
 8002014:	eb45 0303 	adc.w	r3, r5, r3
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002026:	4629      	mov	r1, r5
 8002028:	028b      	lsls	r3, r1, #10
 800202a:	4621      	mov	r1, r4
 800202c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002030:	4621      	mov	r1, r4
 8002032:	028a      	lsls	r2, r1, #10
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800203a:	2200      	movs	r2, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	61fa      	str	r2, [r7, #28]
 8002040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002044:	f7fe f91c 	bl	8000280 <__aeabi_uldivmod>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4613      	mov	r3, r2
 800204e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_GetSysClockFreq+0x200>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	3301      	adds	r3, #1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800206a:	e002      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetSysClockFreq+0x204>)
 800206e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002074:	4618      	mov	r0, r3
 8002076:	3750      	adds	r7, #80	; 0x50
 8002078:	46bd      	mov	sp, r7
 800207a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
 8002084:	00f42400 	.word	0x00f42400
 8002088:	007a1200 	.word	0x007a1200

0800208c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000008 	.word	0x20000008

080020a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a8:	f7ff fff0 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0a9b      	lsrs	r3, r3, #10
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4903      	ldr	r1, [pc, #12]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800
 80020c8:	08004b70 	.word	0x08004b70

080020cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020d0:	f7ff ffdc 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	0b5b      	lsrs	r3, r3, #13
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4903      	ldr	r1, [pc, #12]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	08004b70 	.word	0x08004b70

080020f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e041      	b.n	800218a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fe4e 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f000 fac0 	bl	80026b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e041      	b.n	8002228 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f839 	bl	8002230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f000 fa71 	bl	80026b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_TIM_PWM_Start+0x24>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	e022      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d109      	bne.n	8002282 <HAL_TIM_PWM_Start+0x3e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e015      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d109      	bne.n	800229c <HAL_TIM_PWM_Start+0x58>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e008      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e068      	b.n	8002388 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <HAL_TIM_PWM_Start+0x82>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c4:	e013      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_PWM_Start+0x92>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022d4:	e00b      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d104      	bne.n	80022e6 <HAL_TIM_PWM_Start+0xa2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e4:	e003      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2202      	movs	r2, #2
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fc90 	bl	8002c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a23      	ldr	r2, [pc, #140]	; (8002390 <HAL_TIM_PWM_Start+0x14c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d107      	bne.n	8002316 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_TIM_PWM_Start+0x14c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d018      	beq.n	8002352 <HAL_TIM_PWM_Start+0x10e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d013      	beq.n	8002352 <HAL_TIM_PWM_Start+0x10e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a19      	ldr	r2, [pc, #100]	; (8002394 <HAL_TIM_PWM_Start+0x150>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00e      	beq.n	8002352 <HAL_TIM_PWM_Start+0x10e>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a17      	ldr	r2, [pc, #92]	; (8002398 <HAL_TIM_PWM_Start+0x154>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_TIM_PWM_Start+0x10e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a16      	ldr	r2, [pc, #88]	; (800239c <HAL_TIM_PWM_Start+0x158>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_TIM_PWM_Start+0x10e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <HAL_TIM_PWM_Start+0x15c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d111      	bne.n	8002376 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b06      	cmp	r3, #6
 8002362:	d010      	beq.n	8002386 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002374:	e007      	b.n	8002386 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40010000 	.word	0x40010000
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800
 800239c:	40000c00 	.word	0x40000c00
 80023a0:	40014000 	.word	0x40014000

080023a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023be:	2302      	movs	r3, #2
 80023c0:	e0ae      	b.n	8002520 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	f200 809f 	bhi.w	8002510 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023d2:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	0800240d 	.word	0x0800240d
 80023dc:	08002511 	.word	0x08002511
 80023e0:	08002511 	.word	0x08002511
 80023e4:	08002511 	.word	0x08002511
 80023e8:	0800244d 	.word	0x0800244d
 80023ec:	08002511 	.word	0x08002511
 80023f0:	08002511 	.word	0x08002511
 80023f4:	08002511 	.word	0x08002511
 80023f8:	0800248f 	.word	0x0800248f
 80023fc:	08002511 	.word	0x08002511
 8002400:	08002511 	.word	0x08002511
 8002404:	08002511 	.word	0x08002511
 8002408:	080024cf 	.word	0x080024cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f9dc 	bl	80027d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0208 	orr.w	r2, r2, #8
 8002426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0204 	bic.w	r2, r2, #4
 8002436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6999      	ldr	r1, [r3, #24]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	619a      	str	r2, [r3, #24]
      break;
 800244a:	e064      	b.n	8002516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fa22 	bl	800289c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6999      	ldr	r1, [r3, #24]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	021a      	lsls	r2, r3, #8
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	619a      	str	r2, [r3, #24]
      break;
 800248c:	e043      	b.n	8002516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fa6d 	bl	8002974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0208 	orr.w	r2, r2, #8
 80024a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0204 	bic.w	r2, r2, #4
 80024b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69d9      	ldr	r1, [r3, #28]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	61da      	str	r2, [r3, #28]
      break;
 80024cc:	e023      	b.n	8002516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fab7 	bl	8002a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69d9      	ldr	r1, [r3, #28]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	021a      	lsls	r2, r3, #8
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	61da      	str	r2, [r3, #28]
      break;
 800250e:	e002      	b.n	8002516 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	75fb      	strb	r3, [r7, #23]
      break;
 8002514:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800251e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_TIM_ConfigClockSource+0x1c>
 8002540:	2302      	movs	r3, #2
 8002542:	e0b4      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x186>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800256a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257c:	d03e      	beq.n	80025fc <HAL_TIM_ConfigClockSource+0xd4>
 800257e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002582:	f200 8087 	bhi.w	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258a:	f000 8086 	beq.w	800269a <HAL_TIM_ConfigClockSource+0x172>
 800258e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002592:	d87f      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b70      	cmp	r3, #112	; 0x70
 8002596:	d01a      	beq.n	80025ce <HAL_TIM_ConfigClockSource+0xa6>
 8002598:	2b70      	cmp	r3, #112	; 0x70
 800259a:	d87b      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 800259c:	2b60      	cmp	r3, #96	; 0x60
 800259e:	d050      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x11a>
 80025a0:	2b60      	cmp	r3, #96	; 0x60
 80025a2:	d877      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 80025a4:	2b50      	cmp	r3, #80	; 0x50
 80025a6:	d03c      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0xfa>
 80025a8:	2b50      	cmp	r3, #80	; 0x50
 80025aa:	d873      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d058      	beq.n	8002662 <HAL_TIM_ConfigClockSource+0x13a>
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d86f      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 80025b4:	2b30      	cmp	r3, #48	; 0x30
 80025b6:	d064      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15a>
 80025b8:	2b30      	cmp	r3, #48	; 0x30
 80025ba:	d86b      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d060      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15a>
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d867      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05c      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15a>
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d05a      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15a>
 80025cc:	e062      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025de:	f000 fafd 	bl	8002bdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	609a      	str	r2, [r3, #8]
      break;
 80025fa:	e04f      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800260c:	f000 fae6 	bl	8002bdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800261e:	609a      	str	r2, [r3, #8]
      break;
 8002620:	e03c      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800262e:	461a      	mov	r2, r3
 8002630:	f000 fa5a 	bl	8002ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2150      	movs	r1, #80	; 0x50
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fab3 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 8002640:	e02c      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800264e:	461a      	mov	r2, r3
 8002650:	f000 fa79 	bl	8002b46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2160      	movs	r1, #96	; 0x60
 800265a:	4618      	mov	r0, r3
 800265c:	f000 faa3 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 8002660:	e01c      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800266e:	461a      	mov	r2, r3
 8002670:	f000 fa3a 	bl	8002ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2140      	movs	r1, #64	; 0x40
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fa93 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 8002680:	e00c      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f000 fa8a 	bl	8002ba6 <TIM_ITRx_SetConfig>
      break;
 8002692:	e003      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      break;
 8002698:	e000      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800269a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <TIM_Base_SetConfig+0xfc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00f      	beq.n	80026f0 <TIM_Base_SetConfig+0x38>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d6:	d00b      	beq.n	80026f0 <TIM_Base_SetConfig+0x38>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a37      	ldr	r2, [pc, #220]	; (80027b8 <TIM_Base_SetConfig+0x100>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d007      	beq.n	80026f0 <TIM_Base_SetConfig+0x38>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a36      	ldr	r2, [pc, #216]	; (80027bc <TIM_Base_SetConfig+0x104>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d003      	beq.n	80026f0 <TIM_Base_SetConfig+0x38>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a35      	ldr	r2, [pc, #212]	; (80027c0 <TIM_Base_SetConfig+0x108>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d108      	bne.n	8002702 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <TIM_Base_SetConfig+0xfc>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01b      	beq.n	8002742 <TIM_Base_SetConfig+0x8a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002710:	d017      	beq.n	8002742 <TIM_Base_SetConfig+0x8a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <TIM_Base_SetConfig+0x100>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <TIM_Base_SetConfig+0x8a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <TIM_Base_SetConfig+0x104>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00f      	beq.n	8002742 <TIM_Base_SetConfig+0x8a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <TIM_Base_SetConfig+0x108>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00b      	beq.n	8002742 <TIM_Base_SetConfig+0x8a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a25      	ldr	r2, [pc, #148]	; (80027c4 <TIM_Base_SetConfig+0x10c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d007      	beq.n	8002742 <TIM_Base_SetConfig+0x8a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a24      	ldr	r2, [pc, #144]	; (80027c8 <TIM_Base_SetConfig+0x110>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d003      	beq.n	8002742 <TIM_Base_SetConfig+0x8a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a23      	ldr	r2, [pc, #140]	; (80027cc <TIM_Base_SetConfig+0x114>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d108      	bne.n	8002754 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <TIM_Base_SetConfig+0xfc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d103      	bne.n	8002788 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d105      	bne.n	80027a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f023 0201 	bic.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]
  }
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40000800 	.word	0x40000800
 80027c0:	40000c00 	.word	0x40000c00
 80027c4:	40014000 	.word	0x40014000
 80027c8:	40014400 	.word	0x40014400
 80027cc:	40014800 	.word	0x40014800

080027d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 0201 	bic.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f023 0302 	bic.w	r3, r3, #2
 8002818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <TIM_OC1_SetConfig+0xc8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d10c      	bne.n	8002846 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f023 0308 	bic.w	r3, r3, #8
 8002832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a13      	ldr	r2, [pc, #76]	; (8002898 <TIM_OC1_SetConfig+0xc8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d111      	bne.n	8002872 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800285c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	621a      	str	r2, [r3, #32]
}
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40010000 	.word	0x40010000

0800289c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f023 0210 	bic.w	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f023 0320 	bic.w	r3, r3, #32
 80028e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <TIM_OC2_SetConfig+0xd4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d10d      	bne.n	8002918 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002916:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a15      	ldr	r2, [pc, #84]	; (8002970 <TIM_OC2_SetConfig+0xd4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d113      	bne.n	8002948 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800292e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	621a      	str	r2, [r3, #32]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40010000 	.word	0x40010000

08002974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <TIM_OC3_SetConfig+0xd0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10d      	bne.n	80029ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <TIM_OC3_SetConfig+0xd0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d113      	bne.n	8002a1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	621a      	str	r2, [r3, #32]
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40010000 	.word	0x40010000

08002a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	031b      	lsls	r3, r3, #12
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <TIM_OC4_SetConfig+0x9c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d109      	bne.n	8002abc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	621a      	str	r2, [r3, #32]
}
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40010000 	.word	0x40010000

08002ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f023 0201 	bic.w	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f023 030a 	bic.w	r3, r3, #10
 8002b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	621a      	str	r2, [r3, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f023 0210 	bic.w	r2, r3, #16
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	031b      	lsls	r3, r3, #12
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f043 0307 	orr.w	r3, r3, #7
 8002bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	021a      	lsls	r2, r3, #8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	2201      	movs	r2, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1a      	ldr	r2, [r3, #32]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1a      	ldr	r2, [r3, #32]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	621a      	str	r2, [r3, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e050      	b.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d013      	beq.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a16      	ldr	r2, [pc, #88]	; (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10c      	bne.n	8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40010000 	.word	0x40010000
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800
 8002d3c:	40000c00 	.word	0x40000c00
 8002d40:	40014000 	.word	0x40014000

08002d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e042      	b.n	8002ddc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe f87e 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	; 0x24
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fa09 	bl	80031a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d175      	bne.n	8002ef0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_UART_Transmit+0x2c>
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e06e      	b.n	8002ef2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2221      	movs	r2, #33	; 0x21
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e22:	f7fe f9e3 	bl	80011ec <HAL_GetTick>
 8002e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	88fa      	ldrh	r2, [r7, #6]
 8002e2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3c:	d108      	bne.n	8002e50 <HAL_UART_Transmit+0x6c>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d104      	bne.n	8002e50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	e003      	b.n	8002e58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e58:	e02e      	b.n	8002eb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f8df 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e03a      	b.n	8002ef2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	3302      	adds	r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	e007      	b.n	8002eaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1cb      	bne.n	8002e5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2140      	movs	r1, #64	; 0x40
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f8ab 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e006      	b.n	8002ef2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e000      	b.n	8002ef2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b08a      	sub	sp, #40	; 0x28
 8002efe:	af02      	add	r7, sp, #8
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	f040 8081 	bne.w	800301e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_UART_Receive+0x2e>
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e079      	b.n	8003020 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2222      	movs	r2, #34	; 0x22
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f40:	f7fe f954 	bl	80011ec <HAL_GetTick>
 8002f44:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	88fa      	ldrh	r2, [r7, #6]
 8002f4a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d108      	bne.n	8002f6e <HAL_UART_Receive+0x74>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	e003      	b.n	8002f76 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f76:	e047      	b.n	8003008 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2120      	movs	r1, #32
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f850 	bl	8003028 <UART_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e042      	b.n	8003020 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10c      	bne.n	8002fba <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	e01f      	b.n	8002ffa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc2:	d007      	beq.n	8002fd4 <HAL_UART_Receive+0xda>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <HAL_UART_Receive+0xe8>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	e008      	b.n	8002ff4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1b2      	bne.n	8002f78 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3720      	adds	r7, #32
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003038:	e03b      	b.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d037      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fe f8d3 	bl	80011ec <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	6a3a      	ldr	r2, [r7, #32]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <UART_WaitOnFlagUntilTimeout+0x30>
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e03a      	b.n	80030d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d023      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b80      	cmp	r3, #128	; 0x80
 800306e:	d020      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b40      	cmp	r3, #64	; 0x40
 8003074:	d01d      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d116      	bne.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f81d 	bl	80030da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2208      	movs	r2, #8
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00f      	b.n	80030d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4013      	ands	r3, r2
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d0b4      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030da:	b480      	push	{r7}
 80030dc:	b095      	sub	sp, #84	; 0x54
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	330c      	adds	r3, #12
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003102:	643a      	str	r2, [r7, #64]	; 0x40
 8003104:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e5      	bne.n	80030e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3314      	adds	r3, #20
 800311c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	61fb      	str	r3, [r7, #28]
   return(result);
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	64bb      	str	r3, [r7, #72]	; 0x48
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3314      	adds	r3, #20
 8003134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800313c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e5      	bne.n	8003116 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	2b01      	cmp	r3, #1
 8003150:	d119      	bne.n	8003186 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	60bb      	str	r3, [r7, #8]
   return(result);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f023 0310 	bic.w	r3, r3, #16
 8003168:	647b      	str	r3, [r7, #68]	; 0x44
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	330c      	adds	r3, #12
 8003170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003172:	61ba      	str	r2, [r7, #24]
 8003174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	6979      	ldr	r1, [r7, #20]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	613b      	str	r3, [r7, #16]
   return(result);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e5      	bne.n	8003152 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003194:	bf00      	nop
 8003196:	3754      	adds	r7, #84	; 0x54
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a4:	b0c0      	sub	sp, #256	; 0x100
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031bc:	68d9      	ldr	r1, [r3, #12]
 80031be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	ea40 0301 	orr.w	r3, r0, r1
 80031c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	431a      	orrs	r2, r3
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031f8:	f021 010c 	bic.w	r1, r1, #12
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003206:	430b      	orrs	r3, r1
 8003208:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800320a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	6999      	ldr	r1, [r3, #24]
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	ea40 0301 	orr.w	r3, r0, r1
 8003226:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b8f      	ldr	r3, [pc, #572]	; (800346c <UART_SetConfig+0x2cc>)
 8003230:	429a      	cmp	r2, r3
 8003232:	d005      	beq.n	8003240 <UART_SetConfig+0xa0>
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b8d      	ldr	r3, [pc, #564]	; (8003470 <UART_SetConfig+0x2d0>)
 800323c:	429a      	cmp	r2, r3
 800323e:	d104      	bne.n	800324a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003240:	f7fe ff44 	bl	80020cc <HAL_RCC_GetPCLK2Freq>
 8003244:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003248:	e003      	b.n	8003252 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800324a:	f7fe ff2b 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 800324e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325c:	f040 810c 	bne.w	8003478 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003264:	2200      	movs	r2, #0
 8003266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800326a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800326e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003272:	4622      	mov	r2, r4
 8003274:	462b      	mov	r3, r5
 8003276:	1891      	adds	r1, r2, r2
 8003278:	65b9      	str	r1, [r7, #88]	; 0x58
 800327a:	415b      	adcs	r3, r3
 800327c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800327e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003282:	4621      	mov	r1, r4
 8003284:	eb12 0801 	adds.w	r8, r2, r1
 8003288:	4629      	mov	r1, r5
 800328a:	eb43 0901 	adc.w	r9, r3, r1
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800329a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800329e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032a2:	4690      	mov	r8, r2
 80032a4:	4699      	mov	r9, r3
 80032a6:	4623      	mov	r3, r4
 80032a8:	eb18 0303 	adds.w	r3, r8, r3
 80032ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032b0:	462b      	mov	r3, r5
 80032b2:	eb49 0303 	adc.w	r3, r9, r3
 80032b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032ce:	460b      	mov	r3, r1
 80032d0:	18db      	adds	r3, r3, r3
 80032d2:	653b      	str	r3, [r7, #80]	; 0x50
 80032d4:	4613      	mov	r3, r2
 80032d6:	eb42 0303 	adc.w	r3, r2, r3
 80032da:	657b      	str	r3, [r7, #84]	; 0x54
 80032dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032e4:	f7fc ffcc 	bl	8000280 <__aeabi_uldivmod>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4b61      	ldr	r3, [pc, #388]	; (8003474 <UART_SetConfig+0x2d4>)
 80032ee:	fba3 2302 	umull	r2, r3, r3, r2
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	011c      	lsls	r4, r3, #4
 80032f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003300:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003304:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003308:	4642      	mov	r2, r8
 800330a:	464b      	mov	r3, r9
 800330c:	1891      	adds	r1, r2, r2
 800330e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003310:	415b      	adcs	r3, r3
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003314:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003318:	4641      	mov	r1, r8
 800331a:	eb12 0a01 	adds.w	sl, r2, r1
 800331e:	4649      	mov	r1, r9
 8003320:	eb43 0b01 	adc.w	fp, r3, r1
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003330:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003338:	4692      	mov	sl, r2
 800333a:	469b      	mov	fp, r3
 800333c:	4643      	mov	r3, r8
 800333e:	eb1a 0303 	adds.w	r3, sl, r3
 8003342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003346:	464b      	mov	r3, r9
 8003348:	eb4b 0303 	adc.w	r3, fp, r3
 800334c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800335c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003360:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003364:	460b      	mov	r3, r1
 8003366:	18db      	adds	r3, r3, r3
 8003368:	643b      	str	r3, [r7, #64]	; 0x40
 800336a:	4613      	mov	r3, r2
 800336c:	eb42 0303 	adc.w	r3, r2, r3
 8003370:	647b      	str	r3, [r7, #68]	; 0x44
 8003372:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003376:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800337a:	f7fc ff81 	bl	8000280 <__aeabi_uldivmod>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4611      	mov	r1, r2
 8003384:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <UART_SetConfig+0x2d4>)
 8003386:	fba3 2301 	umull	r2, r3, r3, r1
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2264      	movs	r2, #100	; 0x64
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	1acb      	subs	r3, r1, r3
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800339a:	4b36      	ldr	r3, [pc, #216]	; (8003474 <UART_SetConfig+0x2d4>)
 800339c:	fba3 2302 	umull	r2, r3, r3, r2
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033a8:	441c      	add	r4, r3
 80033aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033bc:	4642      	mov	r2, r8
 80033be:	464b      	mov	r3, r9
 80033c0:	1891      	adds	r1, r2, r2
 80033c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80033c4:	415b      	adcs	r3, r3
 80033c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033cc:	4641      	mov	r1, r8
 80033ce:	1851      	adds	r1, r2, r1
 80033d0:	6339      	str	r1, [r7, #48]	; 0x30
 80033d2:	4649      	mov	r1, r9
 80033d4:	414b      	adcs	r3, r1
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033e4:	4659      	mov	r1, fp
 80033e6:	00cb      	lsls	r3, r1, #3
 80033e8:	4651      	mov	r1, sl
 80033ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ee:	4651      	mov	r1, sl
 80033f0:	00ca      	lsls	r2, r1, #3
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	4642      	mov	r2, r8
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003400:	464b      	mov	r3, r9
 8003402:	460a      	mov	r2, r1
 8003404:	eb42 0303 	adc.w	r3, r2, r3
 8003408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003418:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800341c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003420:	460b      	mov	r3, r1
 8003422:	18db      	adds	r3, r3, r3
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
 8003426:	4613      	mov	r3, r2
 8003428:	eb42 0303 	adc.w	r3, r2, r3
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003432:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003436:	f7fc ff23 	bl	8000280 <__aeabi_uldivmod>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <UART_SetConfig+0x2d4>)
 8003440:	fba3 1302 	umull	r1, r3, r3, r2
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	2164      	movs	r1, #100	; 0x64
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	3332      	adds	r3, #50	; 0x32
 8003452:	4a08      	ldr	r2, [pc, #32]	; (8003474 <UART_SetConfig+0x2d4>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	f003 0207 	and.w	r2, r3, #7
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4422      	add	r2, r4
 8003466:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003468:	e106      	b.n	8003678 <UART_SetConfig+0x4d8>
 800346a:	bf00      	nop
 800346c:	40011000 	.word	0x40011000
 8003470:	40011400 	.word	0x40011400
 8003474:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347c:	2200      	movs	r2, #0
 800347e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003482:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003486:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800348a:	4642      	mov	r2, r8
 800348c:	464b      	mov	r3, r9
 800348e:	1891      	adds	r1, r2, r2
 8003490:	6239      	str	r1, [r7, #32]
 8003492:	415b      	adcs	r3, r3
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
 8003496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800349a:	4641      	mov	r1, r8
 800349c:	1854      	adds	r4, r2, r1
 800349e:	4649      	mov	r1, r9
 80034a0:	eb43 0501 	adc.w	r5, r3, r1
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	00eb      	lsls	r3, r5, #3
 80034ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034b2:	00e2      	lsls	r2, r4, #3
 80034b4:	4614      	mov	r4, r2
 80034b6:	461d      	mov	r5, r3
 80034b8:	4643      	mov	r3, r8
 80034ba:	18e3      	adds	r3, r4, r3
 80034bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034c0:	464b      	mov	r3, r9
 80034c2:	eb45 0303 	adc.w	r3, r5, r3
 80034c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034e6:	4629      	mov	r1, r5
 80034e8:	008b      	lsls	r3, r1, #2
 80034ea:	4621      	mov	r1, r4
 80034ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f0:	4621      	mov	r1, r4
 80034f2:	008a      	lsls	r2, r1, #2
 80034f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034f8:	f7fc fec2 	bl	8000280 <__aeabi_uldivmod>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4b60      	ldr	r3, [pc, #384]	; (8003684 <UART_SetConfig+0x4e4>)
 8003502:	fba3 2302 	umull	r2, r3, r3, r2
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	011c      	lsls	r4, r3, #4
 800350a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800350e:	2200      	movs	r2, #0
 8003510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003514:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003518:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800351c:	4642      	mov	r2, r8
 800351e:	464b      	mov	r3, r9
 8003520:	1891      	adds	r1, r2, r2
 8003522:	61b9      	str	r1, [r7, #24]
 8003524:	415b      	adcs	r3, r3
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800352c:	4641      	mov	r1, r8
 800352e:	1851      	adds	r1, r2, r1
 8003530:	6139      	str	r1, [r7, #16]
 8003532:	4649      	mov	r1, r9
 8003534:	414b      	adcs	r3, r1
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003544:	4659      	mov	r1, fp
 8003546:	00cb      	lsls	r3, r1, #3
 8003548:	4651      	mov	r1, sl
 800354a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800354e:	4651      	mov	r1, sl
 8003550:	00ca      	lsls	r2, r1, #3
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	4603      	mov	r3, r0
 8003558:	4642      	mov	r2, r8
 800355a:	189b      	adds	r3, r3, r2
 800355c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003560:	464b      	mov	r3, r9
 8003562:	460a      	mov	r2, r1
 8003564:	eb42 0303 	adc.w	r3, r2, r3
 8003568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	67bb      	str	r3, [r7, #120]	; 0x78
 8003576:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003584:	4649      	mov	r1, r9
 8003586:	008b      	lsls	r3, r1, #2
 8003588:	4641      	mov	r1, r8
 800358a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800358e:	4641      	mov	r1, r8
 8003590:	008a      	lsls	r2, r1, #2
 8003592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003596:	f7fc fe73 	bl	8000280 <__aeabi_uldivmod>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	4b38      	ldr	r3, [pc, #224]	; (8003684 <UART_SetConfig+0x4e4>)
 80035a2:	fba3 2301 	umull	r2, r3, r3, r1
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2264      	movs	r2, #100	; 0x64
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	1acb      	subs	r3, r1, r3
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	3332      	adds	r3, #50	; 0x32
 80035b4:	4a33      	ldr	r2, [pc, #204]	; (8003684 <UART_SetConfig+0x4e4>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c0:	441c      	add	r4, r3
 80035c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c6:	2200      	movs	r2, #0
 80035c8:	673b      	str	r3, [r7, #112]	; 0x70
 80035ca:	677a      	str	r2, [r7, #116]	; 0x74
 80035cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035d0:	4642      	mov	r2, r8
 80035d2:	464b      	mov	r3, r9
 80035d4:	1891      	adds	r1, r2, r2
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	415b      	adcs	r3, r3
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035e0:	4641      	mov	r1, r8
 80035e2:	1851      	adds	r1, r2, r1
 80035e4:	6039      	str	r1, [r7, #0]
 80035e6:	4649      	mov	r1, r9
 80035e8:	414b      	adcs	r3, r1
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035f8:	4659      	mov	r1, fp
 80035fa:	00cb      	lsls	r3, r1, #3
 80035fc:	4651      	mov	r1, sl
 80035fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003602:	4651      	mov	r1, sl
 8003604:	00ca      	lsls	r2, r1, #3
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	4603      	mov	r3, r0
 800360c:	4642      	mov	r2, r8
 800360e:	189b      	adds	r3, r3, r2
 8003610:	66bb      	str	r3, [r7, #104]	; 0x68
 8003612:	464b      	mov	r3, r9
 8003614:	460a      	mov	r2, r1
 8003616:	eb42 0303 	adc.w	r3, r2, r3
 800361a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	663b      	str	r3, [r7, #96]	; 0x60
 8003626:	667a      	str	r2, [r7, #100]	; 0x64
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003634:	4649      	mov	r1, r9
 8003636:	008b      	lsls	r3, r1, #2
 8003638:	4641      	mov	r1, r8
 800363a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800363e:	4641      	mov	r1, r8
 8003640:	008a      	lsls	r2, r1, #2
 8003642:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003646:	f7fc fe1b 	bl	8000280 <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <UART_SetConfig+0x4e4>)
 8003650:	fba3 1302 	umull	r1, r3, r3, r2
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	2164      	movs	r1, #100	; 0x64
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	3332      	adds	r3, #50	; 0x32
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <UART_SetConfig+0x4e4>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	f003 020f 	and.w	r2, r3, #15
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4422      	add	r2, r4
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800367e:	46bd      	mov	sp, r7
 8003680:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003684:	51eb851f 	.word	0x51eb851f

08003688 <std>:
 8003688:	2300      	movs	r3, #0
 800368a:	b510      	push	{r4, lr}
 800368c:	4604      	mov	r4, r0
 800368e:	e9c0 3300 	strd	r3, r3, [r0]
 8003692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003696:	6083      	str	r3, [r0, #8]
 8003698:	8181      	strh	r1, [r0, #12]
 800369a:	6643      	str	r3, [r0, #100]	; 0x64
 800369c:	81c2      	strh	r2, [r0, #14]
 800369e:	6183      	str	r3, [r0, #24]
 80036a0:	4619      	mov	r1, r3
 80036a2:	2208      	movs	r2, #8
 80036a4:	305c      	adds	r0, #92	; 0x5c
 80036a6:	f000 fac5 	bl	8003c34 <memset>
 80036aa:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <std+0x58>)
 80036ac:	6263      	str	r3, [r4, #36]	; 0x24
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <std+0x5c>)
 80036b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <std+0x60>)
 80036b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <std+0x64>)
 80036b8:	6323      	str	r3, [r4, #48]	; 0x30
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <std+0x68>)
 80036bc:	6224      	str	r4, [r4, #32]
 80036be:	429c      	cmp	r4, r3
 80036c0:	d006      	beq.n	80036d0 <std+0x48>
 80036c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80036c6:	4294      	cmp	r4, r2
 80036c8:	d002      	beq.n	80036d0 <std+0x48>
 80036ca:	33d0      	adds	r3, #208	; 0xd0
 80036cc:	429c      	cmp	r4, r3
 80036ce:	d105      	bne.n	80036dc <std+0x54>
 80036d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d8:	f000 bb24 	b.w	8003d24 <__retarget_lock_init_recursive>
 80036dc:	bd10      	pop	{r4, pc}
 80036de:	bf00      	nop
 80036e0:	08003a85 	.word	0x08003a85
 80036e4:	08003aa7 	.word	0x08003aa7
 80036e8:	08003adf 	.word	0x08003adf
 80036ec:	08003b03 	.word	0x08003b03
 80036f0:	20000130 	.word	0x20000130

080036f4 <stdio_exit_handler>:
 80036f4:	4a02      	ldr	r2, [pc, #8]	; (8003700 <stdio_exit_handler+0xc>)
 80036f6:	4903      	ldr	r1, [pc, #12]	; (8003704 <stdio_exit_handler+0x10>)
 80036f8:	4803      	ldr	r0, [pc, #12]	; (8003708 <stdio_exit_handler+0x14>)
 80036fa:	f000 b869 	b.w	80037d0 <_fwalk_sglue>
 80036fe:	bf00      	nop
 8003700:	20000014 	.word	0x20000014
 8003704:	08004891 	.word	0x08004891
 8003708:	20000020 	.word	0x20000020

0800370c <cleanup_stdio>:
 800370c:	6841      	ldr	r1, [r0, #4]
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <cleanup_stdio+0x34>)
 8003710:	4299      	cmp	r1, r3
 8003712:	b510      	push	{r4, lr}
 8003714:	4604      	mov	r4, r0
 8003716:	d001      	beq.n	800371c <cleanup_stdio+0x10>
 8003718:	f001 f8ba 	bl	8004890 <_fflush_r>
 800371c:	68a1      	ldr	r1, [r4, #8]
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <cleanup_stdio+0x38>)
 8003720:	4299      	cmp	r1, r3
 8003722:	d002      	beq.n	800372a <cleanup_stdio+0x1e>
 8003724:	4620      	mov	r0, r4
 8003726:	f001 f8b3 	bl	8004890 <_fflush_r>
 800372a:	68e1      	ldr	r1, [r4, #12]
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <cleanup_stdio+0x3c>)
 800372e:	4299      	cmp	r1, r3
 8003730:	d004      	beq.n	800373c <cleanup_stdio+0x30>
 8003732:	4620      	mov	r0, r4
 8003734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003738:	f001 b8aa 	b.w	8004890 <_fflush_r>
 800373c:	bd10      	pop	{r4, pc}
 800373e:	bf00      	nop
 8003740:	20000130 	.word	0x20000130
 8003744:	20000198 	.word	0x20000198
 8003748:	20000200 	.word	0x20000200

0800374c <global_stdio_init.part.0>:
 800374c:	b510      	push	{r4, lr}
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <global_stdio_init.part.0+0x30>)
 8003750:	4c0b      	ldr	r4, [pc, #44]	; (8003780 <global_stdio_init.part.0+0x34>)
 8003752:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <global_stdio_init.part.0+0x38>)
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	4620      	mov	r0, r4
 8003758:	2200      	movs	r2, #0
 800375a:	2104      	movs	r1, #4
 800375c:	f7ff ff94 	bl	8003688 <std>
 8003760:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003764:	2201      	movs	r2, #1
 8003766:	2109      	movs	r1, #9
 8003768:	f7ff ff8e 	bl	8003688 <std>
 800376c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003770:	2202      	movs	r2, #2
 8003772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003776:	2112      	movs	r1, #18
 8003778:	f7ff bf86 	b.w	8003688 <std>
 800377c:	20000268 	.word	0x20000268
 8003780:	20000130 	.word	0x20000130
 8003784:	080036f5 	.word	0x080036f5

08003788 <__sfp_lock_acquire>:
 8003788:	4801      	ldr	r0, [pc, #4]	; (8003790 <__sfp_lock_acquire+0x8>)
 800378a:	f000 bacc 	b.w	8003d26 <__retarget_lock_acquire_recursive>
 800378e:	bf00      	nop
 8003790:	20000271 	.word	0x20000271

08003794 <__sfp_lock_release>:
 8003794:	4801      	ldr	r0, [pc, #4]	; (800379c <__sfp_lock_release+0x8>)
 8003796:	f000 bac7 	b.w	8003d28 <__retarget_lock_release_recursive>
 800379a:	bf00      	nop
 800379c:	20000271 	.word	0x20000271

080037a0 <__sinit>:
 80037a0:	b510      	push	{r4, lr}
 80037a2:	4604      	mov	r4, r0
 80037a4:	f7ff fff0 	bl	8003788 <__sfp_lock_acquire>
 80037a8:	6a23      	ldr	r3, [r4, #32]
 80037aa:	b11b      	cbz	r3, 80037b4 <__sinit+0x14>
 80037ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b0:	f7ff bff0 	b.w	8003794 <__sfp_lock_release>
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <__sinit+0x28>)
 80037b6:	6223      	str	r3, [r4, #32]
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <__sinit+0x2c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f5      	bne.n	80037ac <__sinit+0xc>
 80037c0:	f7ff ffc4 	bl	800374c <global_stdio_init.part.0>
 80037c4:	e7f2      	b.n	80037ac <__sinit+0xc>
 80037c6:	bf00      	nop
 80037c8:	0800370d 	.word	0x0800370d
 80037cc:	20000268 	.word	0x20000268

080037d0 <_fwalk_sglue>:
 80037d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d4:	4607      	mov	r7, r0
 80037d6:	4688      	mov	r8, r1
 80037d8:	4614      	mov	r4, r2
 80037da:	2600      	movs	r6, #0
 80037dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037e0:	f1b9 0901 	subs.w	r9, r9, #1
 80037e4:	d505      	bpl.n	80037f2 <_fwalk_sglue+0x22>
 80037e6:	6824      	ldr	r4, [r4, #0]
 80037e8:	2c00      	cmp	r4, #0
 80037ea:	d1f7      	bne.n	80037dc <_fwalk_sglue+0xc>
 80037ec:	4630      	mov	r0, r6
 80037ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037f2:	89ab      	ldrh	r3, [r5, #12]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d907      	bls.n	8003808 <_fwalk_sglue+0x38>
 80037f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037fc:	3301      	adds	r3, #1
 80037fe:	d003      	beq.n	8003808 <_fwalk_sglue+0x38>
 8003800:	4629      	mov	r1, r5
 8003802:	4638      	mov	r0, r7
 8003804:	47c0      	blx	r8
 8003806:	4306      	orrs	r6, r0
 8003808:	3568      	adds	r5, #104	; 0x68
 800380a:	e7e9      	b.n	80037e0 <_fwalk_sglue+0x10>

0800380c <iprintf>:
 800380c:	b40f      	push	{r0, r1, r2, r3}
 800380e:	b507      	push	{r0, r1, r2, lr}
 8003810:	4906      	ldr	r1, [pc, #24]	; (800382c <iprintf+0x20>)
 8003812:	ab04      	add	r3, sp, #16
 8003814:	6808      	ldr	r0, [r1, #0]
 8003816:	f853 2b04 	ldr.w	r2, [r3], #4
 800381a:	6881      	ldr	r1, [r0, #8]
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	f000 fd07 	bl	8004230 <_vfiprintf_r>
 8003822:	b003      	add	sp, #12
 8003824:	f85d eb04 	ldr.w	lr, [sp], #4
 8003828:	b004      	add	sp, #16
 800382a:	4770      	bx	lr
 800382c:	2000006c 	.word	0x2000006c

08003830 <_puts_r>:
 8003830:	6a03      	ldr	r3, [r0, #32]
 8003832:	b570      	push	{r4, r5, r6, lr}
 8003834:	6884      	ldr	r4, [r0, #8]
 8003836:	4605      	mov	r5, r0
 8003838:	460e      	mov	r6, r1
 800383a:	b90b      	cbnz	r3, 8003840 <_puts_r+0x10>
 800383c:	f7ff ffb0 	bl	80037a0 <__sinit>
 8003840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003842:	07db      	lsls	r3, r3, #31
 8003844:	d405      	bmi.n	8003852 <_puts_r+0x22>
 8003846:	89a3      	ldrh	r3, [r4, #12]
 8003848:	0598      	lsls	r0, r3, #22
 800384a:	d402      	bmi.n	8003852 <_puts_r+0x22>
 800384c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800384e:	f000 fa6a 	bl	8003d26 <__retarget_lock_acquire_recursive>
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	0719      	lsls	r1, r3, #28
 8003856:	d513      	bpl.n	8003880 <_puts_r+0x50>
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	b18b      	cbz	r3, 8003880 <_puts_r+0x50>
 800385c:	3e01      	subs	r6, #1
 800385e:	68a3      	ldr	r3, [r4, #8]
 8003860:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003864:	3b01      	subs	r3, #1
 8003866:	60a3      	str	r3, [r4, #8]
 8003868:	b9e9      	cbnz	r1, 80038a6 <_puts_r+0x76>
 800386a:	2b00      	cmp	r3, #0
 800386c:	da2e      	bge.n	80038cc <_puts_r+0x9c>
 800386e:	4622      	mov	r2, r4
 8003870:	210a      	movs	r1, #10
 8003872:	4628      	mov	r0, r5
 8003874:	f000 f949 	bl	8003b0a <__swbuf_r>
 8003878:	3001      	adds	r0, #1
 800387a:	d007      	beq.n	800388c <_puts_r+0x5c>
 800387c:	250a      	movs	r5, #10
 800387e:	e007      	b.n	8003890 <_puts_r+0x60>
 8003880:	4621      	mov	r1, r4
 8003882:	4628      	mov	r0, r5
 8003884:	f000 f97e 	bl	8003b84 <__swsetup_r>
 8003888:	2800      	cmp	r0, #0
 800388a:	d0e7      	beq.n	800385c <_puts_r+0x2c>
 800388c:	f04f 35ff 	mov.w	r5, #4294967295
 8003890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003892:	07da      	lsls	r2, r3, #31
 8003894:	d405      	bmi.n	80038a2 <_puts_r+0x72>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	059b      	lsls	r3, r3, #22
 800389a:	d402      	bmi.n	80038a2 <_puts_r+0x72>
 800389c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800389e:	f000 fa43 	bl	8003d28 <__retarget_lock_release_recursive>
 80038a2:	4628      	mov	r0, r5
 80038a4:	bd70      	pop	{r4, r5, r6, pc}
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	da04      	bge.n	80038b4 <_puts_r+0x84>
 80038aa:	69a2      	ldr	r2, [r4, #24]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	dc06      	bgt.n	80038be <_puts_r+0x8e>
 80038b0:	290a      	cmp	r1, #10
 80038b2:	d004      	beq.n	80038be <_puts_r+0x8e>
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	6022      	str	r2, [r4, #0]
 80038ba:	7019      	strb	r1, [r3, #0]
 80038bc:	e7cf      	b.n	800385e <_puts_r+0x2e>
 80038be:	4622      	mov	r2, r4
 80038c0:	4628      	mov	r0, r5
 80038c2:	f000 f922 	bl	8003b0a <__swbuf_r>
 80038c6:	3001      	adds	r0, #1
 80038c8:	d1c9      	bne.n	800385e <_puts_r+0x2e>
 80038ca:	e7df      	b.n	800388c <_puts_r+0x5c>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	250a      	movs	r5, #10
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	6022      	str	r2, [r4, #0]
 80038d4:	701d      	strb	r5, [r3, #0]
 80038d6:	e7db      	b.n	8003890 <_puts_r+0x60>

080038d8 <puts>:
 80038d8:	4b02      	ldr	r3, [pc, #8]	; (80038e4 <puts+0xc>)
 80038da:	4601      	mov	r1, r0
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	f7ff bfa7 	b.w	8003830 <_puts_r>
 80038e2:	bf00      	nop
 80038e4:	2000006c 	.word	0x2000006c

080038e8 <setvbuf>:
 80038e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80038ec:	461d      	mov	r5, r3
 80038ee:	4b54      	ldr	r3, [pc, #336]	; (8003a40 <setvbuf+0x158>)
 80038f0:	681f      	ldr	r7, [r3, #0]
 80038f2:	4604      	mov	r4, r0
 80038f4:	460e      	mov	r6, r1
 80038f6:	4690      	mov	r8, r2
 80038f8:	b127      	cbz	r7, 8003904 <setvbuf+0x1c>
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	b913      	cbnz	r3, 8003904 <setvbuf+0x1c>
 80038fe:	4638      	mov	r0, r7
 8003900:	f7ff ff4e 	bl	80037a0 <__sinit>
 8003904:	f1b8 0f02 	cmp.w	r8, #2
 8003908:	d006      	beq.n	8003918 <setvbuf+0x30>
 800390a:	f1b8 0f01 	cmp.w	r8, #1
 800390e:	f200 8094 	bhi.w	8003a3a <setvbuf+0x152>
 8003912:	2d00      	cmp	r5, #0
 8003914:	f2c0 8091 	blt.w	8003a3a <setvbuf+0x152>
 8003918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800391a:	07da      	lsls	r2, r3, #31
 800391c:	d405      	bmi.n	800392a <setvbuf+0x42>
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	059b      	lsls	r3, r3, #22
 8003922:	d402      	bmi.n	800392a <setvbuf+0x42>
 8003924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003926:	f000 f9fe 	bl	8003d26 <__retarget_lock_acquire_recursive>
 800392a:	4621      	mov	r1, r4
 800392c:	4638      	mov	r0, r7
 800392e:	f000 ffaf 	bl	8004890 <_fflush_r>
 8003932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003934:	b141      	cbz	r1, 8003948 <setvbuf+0x60>
 8003936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800393a:	4299      	cmp	r1, r3
 800393c:	d002      	beq.n	8003944 <setvbuf+0x5c>
 800393e:	4638      	mov	r0, r7
 8003940:	f000 f9f4 	bl	8003d2c <_free_r>
 8003944:	2300      	movs	r3, #0
 8003946:	6363      	str	r3, [r4, #52]	; 0x34
 8003948:	2300      	movs	r3, #0
 800394a:	61a3      	str	r3, [r4, #24]
 800394c:	6063      	str	r3, [r4, #4]
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	0618      	lsls	r0, r3, #24
 8003952:	d503      	bpl.n	800395c <setvbuf+0x74>
 8003954:	6921      	ldr	r1, [r4, #16]
 8003956:	4638      	mov	r0, r7
 8003958:	f000 f9e8 	bl	8003d2c <_free_r>
 800395c:	89a3      	ldrh	r3, [r4, #12]
 800395e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	f1b8 0f02 	cmp.w	r8, #2
 800396a:	81a3      	strh	r3, [r4, #12]
 800396c:	d05f      	beq.n	8003a2e <setvbuf+0x146>
 800396e:	ab01      	add	r3, sp, #4
 8003970:	466a      	mov	r2, sp
 8003972:	4621      	mov	r1, r4
 8003974:	4638      	mov	r0, r7
 8003976:	f000 ffb3 	bl	80048e0 <__swhatbuf_r>
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	4318      	orrs	r0, r3
 800397e:	81a0      	strh	r0, [r4, #12]
 8003980:	bb2d      	cbnz	r5, 80039ce <setvbuf+0xe6>
 8003982:	9d00      	ldr	r5, [sp, #0]
 8003984:	4628      	mov	r0, r5
 8003986:	f000 fa1d 	bl	8003dc4 <malloc>
 800398a:	4606      	mov	r6, r0
 800398c:	2800      	cmp	r0, #0
 800398e:	d150      	bne.n	8003a32 <setvbuf+0x14a>
 8003990:	f8dd 9000 	ldr.w	r9, [sp]
 8003994:	45a9      	cmp	r9, r5
 8003996:	d13e      	bne.n	8003a16 <setvbuf+0x12e>
 8003998:	f04f 35ff 	mov.w	r5, #4294967295
 800399c:	2200      	movs	r2, #0
 800399e:	60a2      	str	r2, [r4, #8]
 80039a0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80039a4:	6022      	str	r2, [r4, #0]
 80039a6:	6122      	str	r2, [r4, #16]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ae:	6162      	str	r2, [r4, #20]
 80039b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	07d1      	lsls	r1, r2, #31
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	d404      	bmi.n	80039c6 <setvbuf+0xde>
 80039bc:	059b      	lsls	r3, r3, #22
 80039be:	d402      	bmi.n	80039c6 <setvbuf+0xde>
 80039c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039c2:	f000 f9b1 	bl	8003d28 <__retarget_lock_release_recursive>
 80039c6:	4628      	mov	r0, r5
 80039c8:	b003      	add	sp, #12
 80039ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039ce:	2e00      	cmp	r6, #0
 80039d0:	d0d8      	beq.n	8003984 <setvbuf+0x9c>
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	b913      	cbnz	r3, 80039dc <setvbuf+0xf4>
 80039d6:	4638      	mov	r0, r7
 80039d8:	f7ff fee2 	bl	80037a0 <__sinit>
 80039dc:	f1b8 0f01 	cmp.w	r8, #1
 80039e0:	bf08      	it	eq
 80039e2:	89a3      	ldrheq	r3, [r4, #12]
 80039e4:	6026      	str	r6, [r4, #0]
 80039e6:	bf04      	itt	eq
 80039e8:	f043 0301 	orreq.w	r3, r3, #1
 80039ec:	81a3      	strheq	r3, [r4, #12]
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	f013 0208 	ands.w	r2, r3, #8
 80039f4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80039f8:	d01d      	beq.n	8003a36 <setvbuf+0x14e>
 80039fa:	07da      	lsls	r2, r3, #31
 80039fc:	bf41      	itttt	mi
 80039fe:	2200      	movmi	r2, #0
 8003a00:	426d      	negmi	r5, r5
 8003a02:	60a2      	strmi	r2, [r4, #8]
 8003a04:	61a5      	strmi	r5, [r4, #24]
 8003a06:	bf58      	it	pl
 8003a08:	60a5      	strpl	r5, [r4, #8]
 8003a0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003a0c:	f015 0501 	ands.w	r5, r5, #1
 8003a10:	d0d4      	beq.n	80039bc <setvbuf+0xd4>
 8003a12:	2500      	movs	r5, #0
 8003a14:	e7d7      	b.n	80039c6 <setvbuf+0xde>
 8003a16:	4648      	mov	r0, r9
 8003a18:	f000 f9d4 	bl	8003dc4 <malloc>
 8003a1c:	4606      	mov	r6, r0
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d0ba      	beq.n	8003998 <setvbuf+0xb0>
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	464d      	mov	r5, r9
 8003a2c:	e7d1      	b.n	80039d2 <setvbuf+0xea>
 8003a2e:	2500      	movs	r5, #0
 8003a30:	e7b4      	b.n	800399c <setvbuf+0xb4>
 8003a32:	46a9      	mov	r9, r5
 8003a34:	e7f5      	b.n	8003a22 <setvbuf+0x13a>
 8003a36:	60a2      	str	r2, [r4, #8]
 8003a38:	e7e7      	b.n	8003a0a <setvbuf+0x122>
 8003a3a:	f04f 35ff 	mov.w	r5, #4294967295
 8003a3e:	e7c2      	b.n	80039c6 <setvbuf+0xde>
 8003a40:	2000006c 	.word	0x2000006c

08003a44 <siprintf>:
 8003a44:	b40e      	push	{r1, r2, r3}
 8003a46:	b500      	push	{lr}
 8003a48:	b09c      	sub	sp, #112	; 0x70
 8003a4a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a4c:	9002      	str	r0, [sp, #8]
 8003a4e:	9006      	str	r0, [sp, #24]
 8003a50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a54:	4809      	ldr	r0, [pc, #36]	; (8003a7c <siprintf+0x38>)
 8003a56:	9107      	str	r1, [sp, #28]
 8003a58:	9104      	str	r1, [sp, #16]
 8003a5a:	4909      	ldr	r1, [pc, #36]	; (8003a80 <siprintf+0x3c>)
 8003a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a60:	9105      	str	r1, [sp, #20]
 8003a62:	6800      	ldr	r0, [r0, #0]
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	a902      	add	r1, sp, #8
 8003a68:	f000 faba 	bl	8003fe0 <_svfiprintf_r>
 8003a6c:	9b02      	ldr	r3, [sp, #8]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	b01c      	add	sp, #112	; 0x70
 8003a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a78:	b003      	add	sp, #12
 8003a7a:	4770      	bx	lr
 8003a7c:	2000006c 	.word	0x2000006c
 8003a80:	ffff0208 	.word	0xffff0208

08003a84 <__sread>:
 8003a84:	b510      	push	{r4, lr}
 8003a86:	460c      	mov	r4, r1
 8003a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a8c:	f000 f8fc 	bl	8003c88 <_read_r>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	bfab      	itete	ge
 8003a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a96:	89a3      	ldrhlt	r3, [r4, #12]
 8003a98:	181b      	addge	r3, r3, r0
 8003a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a9e:	bfac      	ite	ge
 8003aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003aa2:	81a3      	strhlt	r3, [r4, #12]
 8003aa4:	bd10      	pop	{r4, pc}

08003aa6 <__swrite>:
 8003aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aaa:	461f      	mov	r7, r3
 8003aac:	898b      	ldrh	r3, [r1, #12]
 8003aae:	05db      	lsls	r3, r3, #23
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	4616      	mov	r6, r2
 8003ab6:	d505      	bpl.n	8003ac4 <__swrite+0x1e>
 8003ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003abc:	2302      	movs	r3, #2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f000 f8d0 	bl	8003c64 <_lseek_r>
 8003ac4:	89a3      	ldrh	r3, [r4, #12]
 8003ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	4632      	mov	r2, r6
 8003ad2:	463b      	mov	r3, r7
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ada:	f000 b8e7 	b.w	8003cac <_write_r>

08003ade <__sseek>:
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae6:	f000 f8bd 	bl	8003c64 <_lseek_r>
 8003aea:	1c43      	adds	r3, r0, #1
 8003aec:	89a3      	ldrh	r3, [r4, #12]
 8003aee:	bf15      	itete	ne
 8003af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003afa:	81a3      	strheq	r3, [r4, #12]
 8003afc:	bf18      	it	ne
 8003afe:	81a3      	strhne	r3, [r4, #12]
 8003b00:	bd10      	pop	{r4, pc}

08003b02 <__sclose>:
 8003b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b06:	f000 b89d 	b.w	8003c44 <_close_r>

08003b0a <__swbuf_r>:
 8003b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0c:	460e      	mov	r6, r1
 8003b0e:	4614      	mov	r4, r2
 8003b10:	4605      	mov	r5, r0
 8003b12:	b118      	cbz	r0, 8003b1c <__swbuf_r+0x12>
 8003b14:	6a03      	ldr	r3, [r0, #32]
 8003b16:	b90b      	cbnz	r3, 8003b1c <__swbuf_r+0x12>
 8003b18:	f7ff fe42 	bl	80037a0 <__sinit>
 8003b1c:	69a3      	ldr	r3, [r4, #24]
 8003b1e:	60a3      	str	r3, [r4, #8]
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	071a      	lsls	r2, r3, #28
 8003b24:	d525      	bpl.n	8003b72 <__swbuf_r+0x68>
 8003b26:	6923      	ldr	r3, [r4, #16]
 8003b28:	b31b      	cbz	r3, 8003b72 <__swbuf_r+0x68>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	6922      	ldr	r2, [r4, #16]
 8003b2e:	1a98      	subs	r0, r3, r2
 8003b30:	6963      	ldr	r3, [r4, #20]
 8003b32:	b2f6      	uxtb	r6, r6
 8003b34:	4283      	cmp	r3, r0
 8003b36:	4637      	mov	r7, r6
 8003b38:	dc04      	bgt.n	8003b44 <__swbuf_r+0x3a>
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f000 fea7 	bl	8004890 <_fflush_r>
 8003b42:	b9e0      	cbnz	r0, 8003b7e <__swbuf_r+0x74>
 8003b44:	68a3      	ldr	r3, [r4, #8]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	60a3      	str	r3, [r4, #8]
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	6022      	str	r2, [r4, #0]
 8003b50:	701e      	strb	r6, [r3, #0]
 8003b52:	6962      	ldr	r2, [r4, #20]
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d004      	beq.n	8003b64 <__swbuf_r+0x5a>
 8003b5a:	89a3      	ldrh	r3, [r4, #12]
 8003b5c:	07db      	lsls	r3, r3, #31
 8003b5e:	d506      	bpl.n	8003b6e <__swbuf_r+0x64>
 8003b60:	2e0a      	cmp	r6, #10
 8003b62:	d104      	bne.n	8003b6e <__swbuf_r+0x64>
 8003b64:	4621      	mov	r1, r4
 8003b66:	4628      	mov	r0, r5
 8003b68:	f000 fe92 	bl	8004890 <_fflush_r>
 8003b6c:	b938      	cbnz	r0, 8003b7e <__swbuf_r+0x74>
 8003b6e:	4638      	mov	r0, r7
 8003b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b72:	4621      	mov	r1, r4
 8003b74:	4628      	mov	r0, r5
 8003b76:	f000 f805 	bl	8003b84 <__swsetup_r>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d0d5      	beq.n	8003b2a <__swbuf_r+0x20>
 8003b7e:	f04f 37ff 	mov.w	r7, #4294967295
 8003b82:	e7f4      	b.n	8003b6e <__swbuf_r+0x64>

08003b84 <__swsetup_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <__swsetup_r+0xac>)
 8003b88:	4605      	mov	r5, r0
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	b118      	cbz	r0, 8003b98 <__swsetup_r+0x14>
 8003b90:	6a03      	ldr	r3, [r0, #32]
 8003b92:	b90b      	cbnz	r3, 8003b98 <__swsetup_r+0x14>
 8003b94:	f7ff fe04 	bl	80037a0 <__sinit>
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b9e:	0718      	lsls	r0, r3, #28
 8003ba0:	d422      	bmi.n	8003be8 <__swsetup_r+0x64>
 8003ba2:	06d9      	lsls	r1, r3, #27
 8003ba4:	d407      	bmi.n	8003bb6 <__swsetup_r+0x32>
 8003ba6:	2309      	movs	r3, #9
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003bae:	81a3      	strh	r3, [r4, #12]
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb4:	e034      	b.n	8003c20 <__swsetup_r+0x9c>
 8003bb6:	0758      	lsls	r0, r3, #29
 8003bb8:	d512      	bpl.n	8003be0 <__swsetup_r+0x5c>
 8003bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bbc:	b141      	cbz	r1, 8003bd0 <__swsetup_r+0x4c>
 8003bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bc2:	4299      	cmp	r1, r3
 8003bc4:	d002      	beq.n	8003bcc <__swsetup_r+0x48>
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f000 f8b0 	bl	8003d2c <_free_r>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6363      	str	r3, [r4, #52]	; 0x34
 8003bd0:	89a3      	ldrh	r3, [r4, #12]
 8003bd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bd6:	81a3      	strh	r3, [r4, #12]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6063      	str	r3, [r4, #4]
 8003bdc:	6923      	ldr	r3, [r4, #16]
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	f043 0308 	orr.w	r3, r3, #8
 8003be6:	81a3      	strh	r3, [r4, #12]
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	b94b      	cbnz	r3, 8003c00 <__swsetup_r+0x7c>
 8003bec:	89a3      	ldrh	r3, [r4, #12]
 8003bee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf6:	d003      	beq.n	8003c00 <__swsetup_r+0x7c>
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	f000 fe96 	bl	800492c <__smakebuf_r>
 8003c00:	89a0      	ldrh	r0, [r4, #12]
 8003c02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c06:	f010 0301 	ands.w	r3, r0, #1
 8003c0a:	d00a      	beq.n	8003c22 <__swsetup_r+0x9e>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60a3      	str	r3, [r4, #8]
 8003c10:	6963      	ldr	r3, [r4, #20]
 8003c12:	425b      	negs	r3, r3
 8003c14:	61a3      	str	r3, [r4, #24]
 8003c16:	6923      	ldr	r3, [r4, #16]
 8003c18:	b943      	cbnz	r3, 8003c2c <__swsetup_r+0xa8>
 8003c1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c1e:	d1c4      	bne.n	8003baa <__swsetup_r+0x26>
 8003c20:	bd38      	pop	{r3, r4, r5, pc}
 8003c22:	0781      	lsls	r1, r0, #30
 8003c24:	bf58      	it	pl
 8003c26:	6963      	ldrpl	r3, [r4, #20]
 8003c28:	60a3      	str	r3, [r4, #8]
 8003c2a:	e7f4      	b.n	8003c16 <__swsetup_r+0x92>
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	e7f7      	b.n	8003c20 <__swsetup_r+0x9c>
 8003c30:	2000006c 	.word	0x2000006c

08003c34 <memset>:
 8003c34:	4402      	add	r2, r0
 8003c36:	4603      	mov	r3, r0
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d100      	bne.n	8003c3e <memset+0xa>
 8003c3c:	4770      	bx	lr
 8003c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c42:	e7f9      	b.n	8003c38 <memset+0x4>

08003c44 <_close_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	4d06      	ldr	r5, [pc, #24]	; (8003c60 <_close_r+0x1c>)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	f7fd f9bf 	bl	8000fd2 <_close>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_close_r+0x1a>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_close_r+0x1a>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	2000026c 	.word	0x2000026c

08003c64 <_lseek_r>:
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	4d07      	ldr	r5, [pc, #28]	; (8003c84 <_lseek_r+0x20>)
 8003c68:	4604      	mov	r4, r0
 8003c6a:	4608      	mov	r0, r1
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	2200      	movs	r2, #0
 8003c70:	602a      	str	r2, [r5, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f7fd f9d4 	bl	8001020 <_lseek>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	d102      	bne.n	8003c82 <_lseek_r+0x1e>
 8003c7c:	682b      	ldr	r3, [r5, #0]
 8003c7e:	b103      	cbz	r3, 8003c82 <_lseek_r+0x1e>
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
 8003c84:	2000026c 	.word	0x2000026c

08003c88 <_read_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	4d07      	ldr	r5, [pc, #28]	; (8003ca8 <_read_r+0x20>)
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	4608      	mov	r0, r1
 8003c90:	4611      	mov	r1, r2
 8003c92:	2200      	movs	r2, #0
 8003c94:	602a      	str	r2, [r5, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f7fd f962 	bl	8000f60 <_read>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_read_r+0x1e>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_read_r+0x1e>
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	2000026c 	.word	0x2000026c

08003cac <_write_r>:
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	4d07      	ldr	r5, [pc, #28]	; (8003ccc <_write_r+0x20>)
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	4608      	mov	r0, r1
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	602a      	str	r2, [r5, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7fd f96d 	bl	8000f9a <_write>
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	d102      	bne.n	8003cca <_write_r+0x1e>
 8003cc4:	682b      	ldr	r3, [r5, #0]
 8003cc6:	b103      	cbz	r3, 8003cca <_write_r+0x1e>
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	bd38      	pop	{r3, r4, r5, pc}
 8003ccc:	2000026c 	.word	0x2000026c

08003cd0 <__errno>:
 8003cd0:	4b01      	ldr	r3, [pc, #4]	; (8003cd8 <__errno+0x8>)
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	2000006c 	.word	0x2000006c

08003cdc <__libc_init_array>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	4d0d      	ldr	r5, [pc, #52]	; (8003d14 <__libc_init_array+0x38>)
 8003ce0:	4c0d      	ldr	r4, [pc, #52]	; (8003d18 <__libc_init_array+0x3c>)
 8003ce2:	1b64      	subs	r4, r4, r5
 8003ce4:	10a4      	asrs	r4, r4, #2
 8003ce6:	2600      	movs	r6, #0
 8003ce8:	42a6      	cmp	r6, r4
 8003cea:	d109      	bne.n	8003d00 <__libc_init_array+0x24>
 8003cec:	4d0b      	ldr	r5, [pc, #44]	; (8003d1c <__libc_init_array+0x40>)
 8003cee:	4c0c      	ldr	r4, [pc, #48]	; (8003d20 <__libc_init_array+0x44>)
 8003cf0:	f000 feea 	bl	8004ac8 <_init>
 8003cf4:	1b64      	subs	r4, r4, r5
 8003cf6:	10a4      	asrs	r4, r4, #2
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	42a6      	cmp	r6, r4
 8003cfc:	d105      	bne.n	8003d0a <__libc_init_array+0x2e>
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
 8003d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d04:	4798      	blx	r3
 8003d06:	3601      	adds	r6, #1
 8003d08:	e7ee      	b.n	8003ce8 <__libc_init_array+0xc>
 8003d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0e:	4798      	blx	r3
 8003d10:	3601      	adds	r6, #1
 8003d12:	e7f2      	b.n	8003cfa <__libc_init_array+0x1e>
 8003d14:	08004bb4 	.word	0x08004bb4
 8003d18:	08004bb4 	.word	0x08004bb4
 8003d1c:	08004bb4 	.word	0x08004bb4
 8003d20:	08004bb8 	.word	0x08004bb8

08003d24 <__retarget_lock_init_recursive>:
 8003d24:	4770      	bx	lr

08003d26 <__retarget_lock_acquire_recursive>:
 8003d26:	4770      	bx	lr

08003d28 <__retarget_lock_release_recursive>:
 8003d28:	4770      	bx	lr
	...

08003d2c <_free_r>:
 8003d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d2e:	2900      	cmp	r1, #0
 8003d30:	d044      	beq.n	8003dbc <_free_r+0x90>
 8003d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d36:	9001      	str	r0, [sp, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f1a1 0404 	sub.w	r4, r1, #4
 8003d3e:	bfb8      	it	lt
 8003d40:	18e4      	addlt	r4, r4, r3
 8003d42:	f000 f8e7 	bl	8003f14 <__malloc_lock>
 8003d46:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <_free_r+0x94>)
 8003d48:	9801      	ldr	r0, [sp, #4]
 8003d4a:	6813      	ldr	r3, [r2, #0]
 8003d4c:	b933      	cbnz	r3, 8003d5c <_free_r+0x30>
 8003d4e:	6063      	str	r3, [r4, #4]
 8003d50:	6014      	str	r4, [r2, #0]
 8003d52:	b003      	add	sp, #12
 8003d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d58:	f000 b8e2 	b.w	8003f20 <__malloc_unlock>
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	d908      	bls.n	8003d72 <_free_r+0x46>
 8003d60:	6825      	ldr	r5, [r4, #0]
 8003d62:	1961      	adds	r1, r4, r5
 8003d64:	428b      	cmp	r3, r1
 8003d66:	bf01      	itttt	eq
 8003d68:	6819      	ldreq	r1, [r3, #0]
 8003d6a:	685b      	ldreq	r3, [r3, #4]
 8003d6c:	1949      	addeq	r1, r1, r5
 8003d6e:	6021      	streq	r1, [r4, #0]
 8003d70:	e7ed      	b.n	8003d4e <_free_r+0x22>
 8003d72:	461a      	mov	r2, r3
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	b10b      	cbz	r3, 8003d7c <_free_r+0x50>
 8003d78:	42a3      	cmp	r3, r4
 8003d7a:	d9fa      	bls.n	8003d72 <_free_r+0x46>
 8003d7c:	6811      	ldr	r1, [r2, #0]
 8003d7e:	1855      	adds	r5, r2, r1
 8003d80:	42a5      	cmp	r5, r4
 8003d82:	d10b      	bne.n	8003d9c <_free_r+0x70>
 8003d84:	6824      	ldr	r4, [r4, #0]
 8003d86:	4421      	add	r1, r4
 8003d88:	1854      	adds	r4, r2, r1
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	6011      	str	r1, [r2, #0]
 8003d8e:	d1e0      	bne.n	8003d52 <_free_r+0x26>
 8003d90:	681c      	ldr	r4, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	6053      	str	r3, [r2, #4]
 8003d96:	440c      	add	r4, r1
 8003d98:	6014      	str	r4, [r2, #0]
 8003d9a:	e7da      	b.n	8003d52 <_free_r+0x26>
 8003d9c:	d902      	bls.n	8003da4 <_free_r+0x78>
 8003d9e:	230c      	movs	r3, #12
 8003da0:	6003      	str	r3, [r0, #0]
 8003da2:	e7d6      	b.n	8003d52 <_free_r+0x26>
 8003da4:	6825      	ldr	r5, [r4, #0]
 8003da6:	1961      	adds	r1, r4, r5
 8003da8:	428b      	cmp	r3, r1
 8003daa:	bf04      	itt	eq
 8003dac:	6819      	ldreq	r1, [r3, #0]
 8003dae:	685b      	ldreq	r3, [r3, #4]
 8003db0:	6063      	str	r3, [r4, #4]
 8003db2:	bf04      	itt	eq
 8003db4:	1949      	addeq	r1, r1, r5
 8003db6:	6021      	streq	r1, [r4, #0]
 8003db8:	6054      	str	r4, [r2, #4]
 8003dba:	e7ca      	b.n	8003d52 <_free_r+0x26>
 8003dbc:	b003      	add	sp, #12
 8003dbe:	bd30      	pop	{r4, r5, pc}
 8003dc0:	20000274 	.word	0x20000274

08003dc4 <malloc>:
 8003dc4:	4b02      	ldr	r3, [pc, #8]	; (8003dd0 <malloc+0xc>)
 8003dc6:	4601      	mov	r1, r0
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	f000 b823 	b.w	8003e14 <_malloc_r>
 8003dce:	bf00      	nop
 8003dd0:	2000006c 	.word	0x2000006c

08003dd4 <sbrk_aligned>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4e0e      	ldr	r6, [pc, #56]	; (8003e10 <sbrk_aligned+0x3c>)
 8003dd8:	460c      	mov	r4, r1
 8003dda:	6831      	ldr	r1, [r6, #0]
 8003ddc:	4605      	mov	r5, r0
 8003dde:	b911      	cbnz	r1, 8003de6 <sbrk_aligned+0x12>
 8003de0:	f000 fe1c 	bl	8004a1c <_sbrk_r>
 8003de4:	6030      	str	r0, [r6, #0]
 8003de6:	4621      	mov	r1, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	f000 fe17 	bl	8004a1c <_sbrk_r>
 8003dee:	1c43      	adds	r3, r0, #1
 8003df0:	d00a      	beq.n	8003e08 <sbrk_aligned+0x34>
 8003df2:	1cc4      	adds	r4, r0, #3
 8003df4:	f024 0403 	bic.w	r4, r4, #3
 8003df8:	42a0      	cmp	r0, r4
 8003dfa:	d007      	beq.n	8003e0c <sbrk_aligned+0x38>
 8003dfc:	1a21      	subs	r1, r4, r0
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f000 fe0c 	bl	8004a1c <_sbrk_r>
 8003e04:	3001      	adds	r0, #1
 8003e06:	d101      	bne.n	8003e0c <sbrk_aligned+0x38>
 8003e08:	f04f 34ff 	mov.w	r4, #4294967295
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	20000278 	.word	0x20000278

08003e14 <_malloc_r>:
 8003e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e18:	1ccd      	adds	r5, r1, #3
 8003e1a:	f025 0503 	bic.w	r5, r5, #3
 8003e1e:	3508      	adds	r5, #8
 8003e20:	2d0c      	cmp	r5, #12
 8003e22:	bf38      	it	cc
 8003e24:	250c      	movcc	r5, #12
 8003e26:	2d00      	cmp	r5, #0
 8003e28:	4607      	mov	r7, r0
 8003e2a:	db01      	blt.n	8003e30 <_malloc_r+0x1c>
 8003e2c:	42a9      	cmp	r1, r5
 8003e2e:	d905      	bls.n	8003e3c <_malloc_r+0x28>
 8003e30:	230c      	movs	r3, #12
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	2600      	movs	r6, #0
 8003e36:	4630      	mov	r0, r6
 8003e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f10 <_malloc_r+0xfc>
 8003e40:	f000 f868 	bl	8003f14 <__malloc_lock>
 8003e44:	f8d8 3000 	ldr.w	r3, [r8]
 8003e48:	461c      	mov	r4, r3
 8003e4a:	bb5c      	cbnz	r4, 8003ea4 <_malloc_r+0x90>
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4638      	mov	r0, r7
 8003e50:	f7ff ffc0 	bl	8003dd4 <sbrk_aligned>
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	4604      	mov	r4, r0
 8003e58:	d155      	bne.n	8003f06 <_malloc_r+0xf2>
 8003e5a:	f8d8 4000 	ldr.w	r4, [r8]
 8003e5e:	4626      	mov	r6, r4
 8003e60:	2e00      	cmp	r6, #0
 8003e62:	d145      	bne.n	8003ef0 <_malloc_r+0xdc>
 8003e64:	2c00      	cmp	r4, #0
 8003e66:	d048      	beq.n	8003efa <_malloc_r+0xe6>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	eb04 0903 	add.w	r9, r4, r3
 8003e72:	f000 fdd3 	bl	8004a1c <_sbrk_r>
 8003e76:	4581      	cmp	r9, r0
 8003e78:	d13f      	bne.n	8003efa <_malloc_r+0xe6>
 8003e7a:	6821      	ldr	r1, [r4, #0]
 8003e7c:	1a6d      	subs	r5, r5, r1
 8003e7e:	4629      	mov	r1, r5
 8003e80:	4638      	mov	r0, r7
 8003e82:	f7ff ffa7 	bl	8003dd4 <sbrk_aligned>
 8003e86:	3001      	adds	r0, #1
 8003e88:	d037      	beq.n	8003efa <_malloc_r+0xe6>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	442b      	add	r3, r5
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	f8d8 3000 	ldr.w	r3, [r8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d038      	beq.n	8003f0a <_malloc_r+0xf6>
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	42a2      	cmp	r2, r4
 8003e9c:	d12b      	bne.n	8003ef6 <_malloc_r+0xe2>
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	e00f      	b.n	8003ec4 <_malloc_r+0xb0>
 8003ea4:	6822      	ldr	r2, [r4, #0]
 8003ea6:	1b52      	subs	r2, r2, r5
 8003ea8:	d41f      	bmi.n	8003eea <_malloc_r+0xd6>
 8003eaa:	2a0b      	cmp	r2, #11
 8003eac:	d917      	bls.n	8003ede <_malloc_r+0xca>
 8003eae:	1961      	adds	r1, r4, r5
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	6025      	str	r5, [r4, #0]
 8003eb4:	bf18      	it	ne
 8003eb6:	6059      	strne	r1, [r3, #4]
 8003eb8:	6863      	ldr	r3, [r4, #4]
 8003eba:	bf08      	it	eq
 8003ebc:	f8c8 1000 	streq.w	r1, [r8]
 8003ec0:	5162      	str	r2, [r4, r5]
 8003ec2:	604b      	str	r3, [r1, #4]
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f104 060b 	add.w	r6, r4, #11
 8003eca:	f000 f829 	bl	8003f20 <__malloc_unlock>
 8003ece:	f026 0607 	bic.w	r6, r6, #7
 8003ed2:	1d23      	adds	r3, r4, #4
 8003ed4:	1af2      	subs	r2, r6, r3
 8003ed6:	d0ae      	beq.n	8003e36 <_malloc_r+0x22>
 8003ed8:	1b9b      	subs	r3, r3, r6
 8003eda:	50a3      	str	r3, [r4, r2]
 8003edc:	e7ab      	b.n	8003e36 <_malloc_r+0x22>
 8003ede:	42a3      	cmp	r3, r4
 8003ee0:	6862      	ldr	r2, [r4, #4]
 8003ee2:	d1dd      	bne.n	8003ea0 <_malloc_r+0x8c>
 8003ee4:	f8c8 2000 	str.w	r2, [r8]
 8003ee8:	e7ec      	b.n	8003ec4 <_malloc_r+0xb0>
 8003eea:	4623      	mov	r3, r4
 8003eec:	6864      	ldr	r4, [r4, #4]
 8003eee:	e7ac      	b.n	8003e4a <_malloc_r+0x36>
 8003ef0:	4634      	mov	r4, r6
 8003ef2:	6876      	ldr	r6, [r6, #4]
 8003ef4:	e7b4      	b.n	8003e60 <_malloc_r+0x4c>
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	e7cc      	b.n	8003e94 <_malloc_r+0x80>
 8003efa:	230c      	movs	r3, #12
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	4638      	mov	r0, r7
 8003f00:	f000 f80e 	bl	8003f20 <__malloc_unlock>
 8003f04:	e797      	b.n	8003e36 <_malloc_r+0x22>
 8003f06:	6025      	str	r5, [r4, #0]
 8003f08:	e7dc      	b.n	8003ec4 <_malloc_r+0xb0>
 8003f0a:	605b      	str	r3, [r3, #4]
 8003f0c:	deff      	udf	#255	; 0xff
 8003f0e:	bf00      	nop
 8003f10:	20000274 	.word	0x20000274

08003f14 <__malloc_lock>:
 8003f14:	4801      	ldr	r0, [pc, #4]	; (8003f1c <__malloc_lock+0x8>)
 8003f16:	f7ff bf06 	b.w	8003d26 <__retarget_lock_acquire_recursive>
 8003f1a:	bf00      	nop
 8003f1c:	20000270 	.word	0x20000270

08003f20 <__malloc_unlock>:
 8003f20:	4801      	ldr	r0, [pc, #4]	; (8003f28 <__malloc_unlock+0x8>)
 8003f22:	f7ff bf01 	b.w	8003d28 <__retarget_lock_release_recursive>
 8003f26:	bf00      	nop
 8003f28:	20000270 	.word	0x20000270

08003f2c <__ssputs_r>:
 8003f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f30:	688e      	ldr	r6, [r1, #8]
 8003f32:	461f      	mov	r7, r3
 8003f34:	42be      	cmp	r6, r7
 8003f36:	680b      	ldr	r3, [r1, #0]
 8003f38:	4682      	mov	sl, r0
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	4690      	mov	r8, r2
 8003f3e:	d82c      	bhi.n	8003f9a <__ssputs_r+0x6e>
 8003f40:	898a      	ldrh	r2, [r1, #12]
 8003f42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f46:	d026      	beq.n	8003f96 <__ssputs_r+0x6a>
 8003f48:	6965      	ldr	r5, [r4, #20]
 8003f4a:	6909      	ldr	r1, [r1, #16]
 8003f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f50:	eba3 0901 	sub.w	r9, r3, r1
 8003f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f58:	1c7b      	adds	r3, r7, #1
 8003f5a:	444b      	add	r3, r9
 8003f5c:	106d      	asrs	r5, r5, #1
 8003f5e:	429d      	cmp	r5, r3
 8003f60:	bf38      	it	cc
 8003f62:	461d      	movcc	r5, r3
 8003f64:	0553      	lsls	r3, r2, #21
 8003f66:	d527      	bpl.n	8003fb8 <__ssputs_r+0x8c>
 8003f68:	4629      	mov	r1, r5
 8003f6a:	f7ff ff53 	bl	8003e14 <_malloc_r>
 8003f6e:	4606      	mov	r6, r0
 8003f70:	b360      	cbz	r0, 8003fcc <__ssputs_r+0xa0>
 8003f72:	6921      	ldr	r1, [r4, #16]
 8003f74:	464a      	mov	r2, r9
 8003f76:	f000 fd61 	bl	8004a3c <memcpy>
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f84:	81a3      	strh	r3, [r4, #12]
 8003f86:	6126      	str	r6, [r4, #16]
 8003f88:	6165      	str	r5, [r4, #20]
 8003f8a:	444e      	add	r6, r9
 8003f8c:	eba5 0509 	sub.w	r5, r5, r9
 8003f90:	6026      	str	r6, [r4, #0]
 8003f92:	60a5      	str	r5, [r4, #8]
 8003f94:	463e      	mov	r6, r7
 8003f96:	42be      	cmp	r6, r7
 8003f98:	d900      	bls.n	8003f9c <__ssputs_r+0x70>
 8003f9a:	463e      	mov	r6, r7
 8003f9c:	6820      	ldr	r0, [r4, #0]
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	f000 fcff 	bl	80049a4 <memmove>
 8003fa6:	68a3      	ldr	r3, [r4, #8]
 8003fa8:	1b9b      	subs	r3, r3, r6
 8003faa:	60a3      	str	r3, [r4, #8]
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	4433      	add	r3, r6
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb8:	462a      	mov	r2, r5
 8003fba:	f000 fd4d 	bl	8004a58 <_realloc_r>
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d1e0      	bne.n	8003f86 <__ssputs_r+0x5a>
 8003fc4:	6921      	ldr	r1, [r4, #16]
 8003fc6:	4650      	mov	r0, sl
 8003fc8:	f7ff feb0 	bl	8003d2c <_free_r>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	f8ca 3000 	str.w	r3, [sl]
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd8:	81a3      	strh	r3, [r4, #12]
 8003fda:	f04f 30ff 	mov.w	r0, #4294967295
 8003fde:	e7e9      	b.n	8003fb4 <__ssputs_r+0x88>

08003fe0 <_svfiprintf_r>:
 8003fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe4:	4698      	mov	r8, r3
 8003fe6:	898b      	ldrh	r3, [r1, #12]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	b09d      	sub	sp, #116	; 0x74
 8003fec:	4607      	mov	r7, r0
 8003fee:	460d      	mov	r5, r1
 8003ff0:	4614      	mov	r4, r2
 8003ff2:	d50e      	bpl.n	8004012 <_svfiprintf_r+0x32>
 8003ff4:	690b      	ldr	r3, [r1, #16]
 8003ff6:	b963      	cbnz	r3, 8004012 <_svfiprintf_r+0x32>
 8003ff8:	2140      	movs	r1, #64	; 0x40
 8003ffa:	f7ff ff0b 	bl	8003e14 <_malloc_r>
 8003ffe:	6028      	str	r0, [r5, #0]
 8004000:	6128      	str	r0, [r5, #16]
 8004002:	b920      	cbnz	r0, 800400e <_svfiprintf_r+0x2e>
 8004004:	230c      	movs	r3, #12
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	e0d0      	b.n	80041b0 <_svfiprintf_r+0x1d0>
 800400e:	2340      	movs	r3, #64	; 0x40
 8004010:	616b      	str	r3, [r5, #20]
 8004012:	2300      	movs	r3, #0
 8004014:	9309      	str	r3, [sp, #36]	; 0x24
 8004016:	2320      	movs	r3, #32
 8004018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800401c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004020:	2330      	movs	r3, #48	; 0x30
 8004022:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041c8 <_svfiprintf_r+0x1e8>
 8004026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800402a:	f04f 0901 	mov.w	r9, #1
 800402e:	4623      	mov	r3, r4
 8004030:	469a      	mov	sl, r3
 8004032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004036:	b10a      	cbz	r2, 800403c <_svfiprintf_r+0x5c>
 8004038:	2a25      	cmp	r2, #37	; 0x25
 800403a:	d1f9      	bne.n	8004030 <_svfiprintf_r+0x50>
 800403c:	ebba 0b04 	subs.w	fp, sl, r4
 8004040:	d00b      	beq.n	800405a <_svfiprintf_r+0x7a>
 8004042:	465b      	mov	r3, fp
 8004044:	4622      	mov	r2, r4
 8004046:	4629      	mov	r1, r5
 8004048:	4638      	mov	r0, r7
 800404a:	f7ff ff6f 	bl	8003f2c <__ssputs_r>
 800404e:	3001      	adds	r0, #1
 8004050:	f000 80a9 	beq.w	80041a6 <_svfiprintf_r+0x1c6>
 8004054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004056:	445a      	add	r2, fp
 8004058:	9209      	str	r2, [sp, #36]	; 0x24
 800405a:	f89a 3000 	ldrb.w	r3, [sl]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80a1 	beq.w	80041a6 <_svfiprintf_r+0x1c6>
 8004064:	2300      	movs	r3, #0
 8004066:	f04f 32ff 	mov.w	r2, #4294967295
 800406a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800406e:	f10a 0a01 	add.w	sl, sl, #1
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	9307      	str	r3, [sp, #28]
 8004076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800407a:	931a      	str	r3, [sp, #104]	; 0x68
 800407c:	4654      	mov	r4, sl
 800407e:	2205      	movs	r2, #5
 8004080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004084:	4850      	ldr	r0, [pc, #320]	; (80041c8 <_svfiprintf_r+0x1e8>)
 8004086:	f7fc f8ab 	bl	80001e0 <memchr>
 800408a:	9a04      	ldr	r2, [sp, #16]
 800408c:	b9d8      	cbnz	r0, 80040c6 <_svfiprintf_r+0xe6>
 800408e:	06d0      	lsls	r0, r2, #27
 8004090:	bf44      	itt	mi
 8004092:	2320      	movmi	r3, #32
 8004094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004098:	0711      	lsls	r1, r2, #28
 800409a:	bf44      	itt	mi
 800409c:	232b      	movmi	r3, #43	; 0x2b
 800409e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040a2:	f89a 3000 	ldrb.w	r3, [sl]
 80040a6:	2b2a      	cmp	r3, #42	; 0x2a
 80040a8:	d015      	beq.n	80040d6 <_svfiprintf_r+0xf6>
 80040aa:	9a07      	ldr	r2, [sp, #28]
 80040ac:	4654      	mov	r4, sl
 80040ae:	2000      	movs	r0, #0
 80040b0:	f04f 0c0a 	mov.w	ip, #10
 80040b4:	4621      	mov	r1, r4
 80040b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ba:	3b30      	subs	r3, #48	; 0x30
 80040bc:	2b09      	cmp	r3, #9
 80040be:	d94d      	bls.n	800415c <_svfiprintf_r+0x17c>
 80040c0:	b1b0      	cbz	r0, 80040f0 <_svfiprintf_r+0x110>
 80040c2:	9207      	str	r2, [sp, #28]
 80040c4:	e014      	b.n	80040f0 <_svfiprintf_r+0x110>
 80040c6:	eba0 0308 	sub.w	r3, r0, r8
 80040ca:	fa09 f303 	lsl.w	r3, r9, r3
 80040ce:	4313      	orrs	r3, r2
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	46a2      	mov	sl, r4
 80040d4:	e7d2      	b.n	800407c <_svfiprintf_r+0x9c>
 80040d6:	9b03      	ldr	r3, [sp, #12]
 80040d8:	1d19      	adds	r1, r3, #4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	9103      	str	r1, [sp, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bfbb      	ittet	lt
 80040e2:	425b      	neglt	r3, r3
 80040e4:	f042 0202 	orrlt.w	r2, r2, #2
 80040e8:	9307      	strge	r3, [sp, #28]
 80040ea:	9307      	strlt	r3, [sp, #28]
 80040ec:	bfb8      	it	lt
 80040ee:	9204      	strlt	r2, [sp, #16]
 80040f0:	7823      	ldrb	r3, [r4, #0]
 80040f2:	2b2e      	cmp	r3, #46	; 0x2e
 80040f4:	d10c      	bne.n	8004110 <_svfiprintf_r+0x130>
 80040f6:	7863      	ldrb	r3, [r4, #1]
 80040f8:	2b2a      	cmp	r3, #42	; 0x2a
 80040fa:	d134      	bne.n	8004166 <_svfiprintf_r+0x186>
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	1d1a      	adds	r2, r3, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	9203      	str	r2, [sp, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	bfb8      	it	lt
 8004108:	f04f 33ff 	movlt.w	r3, #4294967295
 800410c:	3402      	adds	r4, #2
 800410e:	9305      	str	r3, [sp, #20]
 8004110:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80041d8 <_svfiprintf_r+0x1f8>
 8004114:	7821      	ldrb	r1, [r4, #0]
 8004116:	2203      	movs	r2, #3
 8004118:	4650      	mov	r0, sl
 800411a:	f7fc f861 	bl	80001e0 <memchr>
 800411e:	b138      	cbz	r0, 8004130 <_svfiprintf_r+0x150>
 8004120:	9b04      	ldr	r3, [sp, #16]
 8004122:	eba0 000a 	sub.w	r0, r0, sl
 8004126:	2240      	movs	r2, #64	; 0x40
 8004128:	4082      	lsls	r2, r0
 800412a:	4313      	orrs	r3, r2
 800412c:	3401      	adds	r4, #1
 800412e:	9304      	str	r3, [sp, #16]
 8004130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004134:	4825      	ldr	r0, [pc, #148]	; (80041cc <_svfiprintf_r+0x1ec>)
 8004136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800413a:	2206      	movs	r2, #6
 800413c:	f7fc f850 	bl	80001e0 <memchr>
 8004140:	2800      	cmp	r0, #0
 8004142:	d038      	beq.n	80041b6 <_svfiprintf_r+0x1d6>
 8004144:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <_svfiprintf_r+0x1f0>)
 8004146:	bb1b      	cbnz	r3, 8004190 <_svfiprintf_r+0x1b0>
 8004148:	9b03      	ldr	r3, [sp, #12]
 800414a:	3307      	adds	r3, #7
 800414c:	f023 0307 	bic.w	r3, r3, #7
 8004150:	3308      	adds	r3, #8
 8004152:	9303      	str	r3, [sp, #12]
 8004154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004156:	4433      	add	r3, r6
 8004158:	9309      	str	r3, [sp, #36]	; 0x24
 800415a:	e768      	b.n	800402e <_svfiprintf_r+0x4e>
 800415c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004160:	460c      	mov	r4, r1
 8004162:	2001      	movs	r0, #1
 8004164:	e7a6      	b.n	80040b4 <_svfiprintf_r+0xd4>
 8004166:	2300      	movs	r3, #0
 8004168:	3401      	adds	r4, #1
 800416a:	9305      	str	r3, [sp, #20]
 800416c:	4619      	mov	r1, r3
 800416e:	f04f 0c0a 	mov.w	ip, #10
 8004172:	4620      	mov	r0, r4
 8004174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004178:	3a30      	subs	r2, #48	; 0x30
 800417a:	2a09      	cmp	r2, #9
 800417c:	d903      	bls.n	8004186 <_svfiprintf_r+0x1a6>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0c6      	beq.n	8004110 <_svfiprintf_r+0x130>
 8004182:	9105      	str	r1, [sp, #20]
 8004184:	e7c4      	b.n	8004110 <_svfiprintf_r+0x130>
 8004186:	fb0c 2101 	mla	r1, ip, r1, r2
 800418a:	4604      	mov	r4, r0
 800418c:	2301      	movs	r3, #1
 800418e:	e7f0      	b.n	8004172 <_svfiprintf_r+0x192>
 8004190:	ab03      	add	r3, sp, #12
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	462a      	mov	r2, r5
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <_svfiprintf_r+0x1f4>)
 8004198:	a904      	add	r1, sp, #16
 800419a:	4638      	mov	r0, r7
 800419c:	f3af 8000 	nop.w
 80041a0:	1c42      	adds	r2, r0, #1
 80041a2:	4606      	mov	r6, r0
 80041a4:	d1d6      	bne.n	8004154 <_svfiprintf_r+0x174>
 80041a6:	89ab      	ldrh	r3, [r5, #12]
 80041a8:	065b      	lsls	r3, r3, #25
 80041aa:	f53f af2d 	bmi.w	8004008 <_svfiprintf_r+0x28>
 80041ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041b0:	b01d      	add	sp, #116	; 0x74
 80041b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b6:	ab03      	add	r3, sp, #12
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	462a      	mov	r2, r5
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <_svfiprintf_r+0x1f4>)
 80041be:	a904      	add	r1, sp, #16
 80041c0:	4638      	mov	r0, r7
 80041c2:	f000 f9bd 	bl	8004540 <_printf_i>
 80041c6:	e7eb      	b.n	80041a0 <_svfiprintf_r+0x1c0>
 80041c8:	08004b78 	.word	0x08004b78
 80041cc:	08004b82 	.word	0x08004b82
 80041d0:	00000000 	.word	0x00000000
 80041d4:	08003f2d 	.word	0x08003f2d
 80041d8:	08004b7e 	.word	0x08004b7e

080041dc <__sfputc_r>:
 80041dc:	6893      	ldr	r3, [r2, #8]
 80041de:	3b01      	subs	r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	b410      	push	{r4}
 80041e4:	6093      	str	r3, [r2, #8]
 80041e6:	da08      	bge.n	80041fa <__sfputc_r+0x1e>
 80041e8:	6994      	ldr	r4, [r2, #24]
 80041ea:	42a3      	cmp	r3, r4
 80041ec:	db01      	blt.n	80041f2 <__sfputc_r+0x16>
 80041ee:	290a      	cmp	r1, #10
 80041f0:	d103      	bne.n	80041fa <__sfputc_r+0x1e>
 80041f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041f6:	f7ff bc88 	b.w	8003b0a <__swbuf_r>
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	1c58      	adds	r0, r3, #1
 80041fe:	6010      	str	r0, [r2, #0]
 8004200:	7019      	strb	r1, [r3, #0]
 8004202:	4608      	mov	r0, r1
 8004204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004208:	4770      	bx	lr

0800420a <__sfputs_r>:
 800420a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420c:	4606      	mov	r6, r0
 800420e:	460f      	mov	r7, r1
 8004210:	4614      	mov	r4, r2
 8004212:	18d5      	adds	r5, r2, r3
 8004214:	42ac      	cmp	r4, r5
 8004216:	d101      	bne.n	800421c <__sfputs_r+0x12>
 8004218:	2000      	movs	r0, #0
 800421a:	e007      	b.n	800422c <__sfputs_r+0x22>
 800421c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004220:	463a      	mov	r2, r7
 8004222:	4630      	mov	r0, r6
 8004224:	f7ff ffda 	bl	80041dc <__sfputc_r>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d1f3      	bne.n	8004214 <__sfputs_r+0xa>
 800422c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004230 <_vfiprintf_r>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	460d      	mov	r5, r1
 8004236:	b09d      	sub	sp, #116	; 0x74
 8004238:	4614      	mov	r4, r2
 800423a:	4698      	mov	r8, r3
 800423c:	4606      	mov	r6, r0
 800423e:	b118      	cbz	r0, 8004248 <_vfiprintf_r+0x18>
 8004240:	6a03      	ldr	r3, [r0, #32]
 8004242:	b90b      	cbnz	r3, 8004248 <_vfiprintf_r+0x18>
 8004244:	f7ff faac 	bl	80037a0 <__sinit>
 8004248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800424a:	07d9      	lsls	r1, r3, #31
 800424c:	d405      	bmi.n	800425a <_vfiprintf_r+0x2a>
 800424e:	89ab      	ldrh	r3, [r5, #12]
 8004250:	059a      	lsls	r2, r3, #22
 8004252:	d402      	bmi.n	800425a <_vfiprintf_r+0x2a>
 8004254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004256:	f7ff fd66 	bl	8003d26 <__retarget_lock_acquire_recursive>
 800425a:	89ab      	ldrh	r3, [r5, #12]
 800425c:	071b      	lsls	r3, r3, #28
 800425e:	d501      	bpl.n	8004264 <_vfiprintf_r+0x34>
 8004260:	692b      	ldr	r3, [r5, #16]
 8004262:	b99b      	cbnz	r3, 800428c <_vfiprintf_r+0x5c>
 8004264:	4629      	mov	r1, r5
 8004266:	4630      	mov	r0, r6
 8004268:	f7ff fc8c 	bl	8003b84 <__swsetup_r>
 800426c:	b170      	cbz	r0, 800428c <_vfiprintf_r+0x5c>
 800426e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004270:	07dc      	lsls	r4, r3, #31
 8004272:	d504      	bpl.n	800427e <_vfiprintf_r+0x4e>
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	b01d      	add	sp, #116	; 0x74
 800427a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427e:	89ab      	ldrh	r3, [r5, #12]
 8004280:	0598      	lsls	r0, r3, #22
 8004282:	d4f7      	bmi.n	8004274 <_vfiprintf_r+0x44>
 8004284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004286:	f7ff fd4f 	bl	8003d28 <__retarget_lock_release_recursive>
 800428a:	e7f3      	b.n	8004274 <_vfiprintf_r+0x44>
 800428c:	2300      	movs	r3, #0
 800428e:	9309      	str	r3, [sp, #36]	; 0x24
 8004290:	2320      	movs	r3, #32
 8004292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004296:	f8cd 800c 	str.w	r8, [sp, #12]
 800429a:	2330      	movs	r3, #48	; 0x30
 800429c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004450 <_vfiprintf_r+0x220>
 80042a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042a4:	f04f 0901 	mov.w	r9, #1
 80042a8:	4623      	mov	r3, r4
 80042aa:	469a      	mov	sl, r3
 80042ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042b0:	b10a      	cbz	r2, 80042b6 <_vfiprintf_r+0x86>
 80042b2:	2a25      	cmp	r2, #37	; 0x25
 80042b4:	d1f9      	bne.n	80042aa <_vfiprintf_r+0x7a>
 80042b6:	ebba 0b04 	subs.w	fp, sl, r4
 80042ba:	d00b      	beq.n	80042d4 <_vfiprintf_r+0xa4>
 80042bc:	465b      	mov	r3, fp
 80042be:	4622      	mov	r2, r4
 80042c0:	4629      	mov	r1, r5
 80042c2:	4630      	mov	r0, r6
 80042c4:	f7ff ffa1 	bl	800420a <__sfputs_r>
 80042c8:	3001      	adds	r0, #1
 80042ca:	f000 80a9 	beq.w	8004420 <_vfiprintf_r+0x1f0>
 80042ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042d0:	445a      	add	r2, fp
 80042d2:	9209      	str	r2, [sp, #36]	; 0x24
 80042d4:	f89a 3000 	ldrb.w	r3, [sl]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a1 	beq.w	8004420 <_vfiprintf_r+0x1f0>
 80042de:	2300      	movs	r3, #0
 80042e0:	f04f 32ff 	mov.w	r2, #4294967295
 80042e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042e8:	f10a 0a01 	add.w	sl, sl, #1
 80042ec:	9304      	str	r3, [sp, #16]
 80042ee:	9307      	str	r3, [sp, #28]
 80042f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042f4:	931a      	str	r3, [sp, #104]	; 0x68
 80042f6:	4654      	mov	r4, sl
 80042f8:	2205      	movs	r2, #5
 80042fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042fe:	4854      	ldr	r0, [pc, #336]	; (8004450 <_vfiprintf_r+0x220>)
 8004300:	f7fb ff6e 	bl	80001e0 <memchr>
 8004304:	9a04      	ldr	r2, [sp, #16]
 8004306:	b9d8      	cbnz	r0, 8004340 <_vfiprintf_r+0x110>
 8004308:	06d1      	lsls	r1, r2, #27
 800430a:	bf44      	itt	mi
 800430c:	2320      	movmi	r3, #32
 800430e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004312:	0713      	lsls	r3, r2, #28
 8004314:	bf44      	itt	mi
 8004316:	232b      	movmi	r3, #43	; 0x2b
 8004318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800431c:	f89a 3000 	ldrb.w	r3, [sl]
 8004320:	2b2a      	cmp	r3, #42	; 0x2a
 8004322:	d015      	beq.n	8004350 <_vfiprintf_r+0x120>
 8004324:	9a07      	ldr	r2, [sp, #28]
 8004326:	4654      	mov	r4, sl
 8004328:	2000      	movs	r0, #0
 800432a:	f04f 0c0a 	mov.w	ip, #10
 800432e:	4621      	mov	r1, r4
 8004330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004334:	3b30      	subs	r3, #48	; 0x30
 8004336:	2b09      	cmp	r3, #9
 8004338:	d94d      	bls.n	80043d6 <_vfiprintf_r+0x1a6>
 800433a:	b1b0      	cbz	r0, 800436a <_vfiprintf_r+0x13a>
 800433c:	9207      	str	r2, [sp, #28]
 800433e:	e014      	b.n	800436a <_vfiprintf_r+0x13a>
 8004340:	eba0 0308 	sub.w	r3, r0, r8
 8004344:	fa09 f303 	lsl.w	r3, r9, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	9304      	str	r3, [sp, #16]
 800434c:	46a2      	mov	sl, r4
 800434e:	e7d2      	b.n	80042f6 <_vfiprintf_r+0xc6>
 8004350:	9b03      	ldr	r3, [sp, #12]
 8004352:	1d19      	adds	r1, r3, #4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	9103      	str	r1, [sp, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	bfbb      	ittet	lt
 800435c:	425b      	neglt	r3, r3
 800435e:	f042 0202 	orrlt.w	r2, r2, #2
 8004362:	9307      	strge	r3, [sp, #28]
 8004364:	9307      	strlt	r3, [sp, #28]
 8004366:	bfb8      	it	lt
 8004368:	9204      	strlt	r2, [sp, #16]
 800436a:	7823      	ldrb	r3, [r4, #0]
 800436c:	2b2e      	cmp	r3, #46	; 0x2e
 800436e:	d10c      	bne.n	800438a <_vfiprintf_r+0x15a>
 8004370:	7863      	ldrb	r3, [r4, #1]
 8004372:	2b2a      	cmp	r3, #42	; 0x2a
 8004374:	d134      	bne.n	80043e0 <_vfiprintf_r+0x1b0>
 8004376:	9b03      	ldr	r3, [sp, #12]
 8004378:	1d1a      	adds	r2, r3, #4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	9203      	str	r2, [sp, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	bfb8      	it	lt
 8004382:	f04f 33ff 	movlt.w	r3, #4294967295
 8004386:	3402      	adds	r4, #2
 8004388:	9305      	str	r3, [sp, #20]
 800438a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004460 <_vfiprintf_r+0x230>
 800438e:	7821      	ldrb	r1, [r4, #0]
 8004390:	2203      	movs	r2, #3
 8004392:	4650      	mov	r0, sl
 8004394:	f7fb ff24 	bl	80001e0 <memchr>
 8004398:	b138      	cbz	r0, 80043aa <_vfiprintf_r+0x17a>
 800439a:	9b04      	ldr	r3, [sp, #16]
 800439c:	eba0 000a 	sub.w	r0, r0, sl
 80043a0:	2240      	movs	r2, #64	; 0x40
 80043a2:	4082      	lsls	r2, r0
 80043a4:	4313      	orrs	r3, r2
 80043a6:	3401      	adds	r4, #1
 80043a8:	9304      	str	r3, [sp, #16]
 80043aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ae:	4829      	ldr	r0, [pc, #164]	; (8004454 <_vfiprintf_r+0x224>)
 80043b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043b4:	2206      	movs	r2, #6
 80043b6:	f7fb ff13 	bl	80001e0 <memchr>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d03f      	beq.n	800443e <_vfiprintf_r+0x20e>
 80043be:	4b26      	ldr	r3, [pc, #152]	; (8004458 <_vfiprintf_r+0x228>)
 80043c0:	bb1b      	cbnz	r3, 800440a <_vfiprintf_r+0x1da>
 80043c2:	9b03      	ldr	r3, [sp, #12]
 80043c4:	3307      	adds	r3, #7
 80043c6:	f023 0307 	bic.w	r3, r3, #7
 80043ca:	3308      	adds	r3, #8
 80043cc:	9303      	str	r3, [sp, #12]
 80043ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d0:	443b      	add	r3, r7
 80043d2:	9309      	str	r3, [sp, #36]	; 0x24
 80043d4:	e768      	b.n	80042a8 <_vfiprintf_r+0x78>
 80043d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80043da:	460c      	mov	r4, r1
 80043dc:	2001      	movs	r0, #1
 80043de:	e7a6      	b.n	800432e <_vfiprintf_r+0xfe>
 80043e0:	2300      	movs	r3, #0
 80043e2:	3401      	adds	r4, #1
 80043e4:	9305      	str	r3, [sp, #20]
 80043e6:	4619      	mov	r1, r3
 80043e8:	f04f 0c0a 	mov.w	ip, #10
 80043ec:	4620      	mov	r0, r4
 80043ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043f2:	3a30      	subs	r2, #48	; 0x30
 80043f4:	2a09      	cmp	r2, #9
 80043f6:	d903      	bls.n	8004400 <_vfiprintf_r+0x1d0>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0c6      	beq.n	800438a <_vfiprintf_r+0x15a>
 80043fc:	9105      	str	r1, [sp, #20]
 80043fe:	e7c4      	b.n	800438a <_vfiprintf_r+0x15a>
 8004400:	fb0c 2101 	mla	r1, ip, r1, r2
 8004404:	4604      	mov	r4, r0
 8004406:	2301      	movs	r3, #1
 8004408:	e7f0      	b.n	80043ec <_vfiprintf_r+0x1bc>
 800440a:	ab03      	add	r3, sp, #12
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	462a      	mov	r2, r5
 8004410:	4b12      	ldr	r3, [pc, #72]	; (800445c <_vfiprintf_r+0x22c>)
 8004412:	a904      	add	r1, sp, #16
 8004414:	4630      	mov	r0, r6
 8004416:	f3af 8000 	nop.w
 800441a:	4607      	mov	r7, r0
 800441c:	1c78      	adds	r0, r7, #1
 800441e:	d1d6      	bne.n	80043ce <_vfiprintf_r+0x19e>
 8004420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004422:	07d9      	lsls	r1, r3, #31
 8004424:	d405      	bmi.n	8004432 <_vfiprintf_r+0x202>
 8004426:	89ab      	ldrh	r3, [r5, #12]
 8004428:	059a      	lsls	r2, r3, #22
 800442a:	d402      	bmi.n	8004432 <_vfiprintf_r+0x202>
 800442c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800442e:	f7ff fc7b 	bl	8003d28 <__retarget_lock_release_recursive>
 8004432:	89ab      	ldrh	r3, [r5, #12]
 8004434:	065b      	lsls	r3, r3, #25
 8004436:	f53f af1d 	bmi.w	8004274 <_vfiprintf_r+0x44>
 800443a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800443c:	e71c      	b.n	8004278 <_vfiprintf_r+0x48>
 800443e:	ab03      	add	r3, sp, #12
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	462a      	mov	r2, r5
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <_vfiprintf_r+0x22c>)
 8004446:	a904      	add	r1, sp, #16
 8004448:	4630      	mov	r0, r6
 800444a:	f000 f879 	bl	8004540 <_printf_i>
 800444e:	e7e4      	b.n	800441a <_vfiprintf_r+0x1ea>
 8004450:	08004b78 	.word	0x08004b78
 8004454:	08004b82 	.word	0x08004b82
 8004458:	00000000 	.word	0x00000000
 800445c:	0800420b 	.word	0x0800420b
 8004460:	08004b7e 	.word	0x08004b7e

08004464 <_printf_common>:
 8004464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004468:	4616      	mov	r6, r2
 800446a:	4699      	mov	r9, r3
 800446c:	688a      	ldr	r2, [r1, #8]
 800446e:	690b      	ldr	r3, [r1, #16]
 8004470:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004474:	4293      	cmp	r3, r2
 8004476:	bfb8      	it	lt
 8004478:	4613      	movlt	r3, r2
 800447a:	6033      	str	r3, [r6, #0]
 800447c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004480:	4607      	mov	r7, r0
 8004482:	460c      	mov	r4, r1
 8004484:	b10a      	cbz	r2, 800448a <_printf_common+0x26>
 8004486:	3301      	adds	r3, #1
 8004488:	6033      	str	r3, [r6, #0]
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	0699      	lsls	r1, r3, #26
 800448e:	bf42      	ittt	mi
 8004490:	6833      	ldrmi	r3, [r6, #0]
 8004492:	3302      	addmi	r3, #2
 8004494:	6033      	strmi	r3, [r6, #0]
 8004496:	6825      	ldr	r5, [r4, #0]
 8004498:	f015 0506 	ands.w	r5, r5, #6
 800449c:	d106      	bne.n	80044ac <_printf_common+0x48>
 800449e:	f104 0a19 	add.w	sl, r4, #25
 80044a2:	68e3      	ldr	r3, [r4, #12]
 80044a4:	6832      	ldr	r2, [r6, #0]
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	42ab      	cmp	r3, r5
 80044aa:	dc26      	bgt.n	80044fa <_printf_common+0x96>
 80044ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044b0:	1e13      	subs	r3, r2, #0
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	bf18      	it	ne
 80044b6:	2301      	movne	r3, #1
 80044b8:	0692      	lsls	r2, r2, #26
 80044ba:	d42b      	bmi.n	8004514 <_printf_common+0xb0>
 80044bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044c0:	4649      	mov	r1, r9
 80044c2:	4638      	mov	r0, r7
 80044c4:	47c0      	blx	r8
 80044c6:	3001      	adds	r0, #1
 80044c8:	d01e      	beq.n	8004508 <_printf_common+0xa4>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	6922      	ldr	r2, [r4, #16]
 80044ce:	f003 0306 	and.w	r3, r3, #6
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	bf02      	ittt	eq
 80044d6:	68e5      	ldreq	r5, [r4, #12]
 80044d8:	6833      	ldreq	r3, [r6, #0]
 80044da:	1aed      	subeq	r5, r5, r3
 80044dc:	68a3      	ldr	r3, [r4, #8]
 80044de:	bf0c      	ite	eq
 80044e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e4:	2500      	movne	r5, #0
 80044e6:	4293      	cmp	r3, r2
 80044e8:	bfc4      	itt	gt
 80044ea:	1a9b      	subgt	r3, r3, r2
 80044ec:	18ed      	addgt	r5, r5, r3
 80044ee:	2600      	movs	r6, #0
 80044f0:	341a      	adds	r4, #26
 80044f2:	42b5      	cmp	r5, r6
 80044f4:	d11a      	bne.n	800452c <_printf_common+0xc8>
 80044f6:	2000      	movs	r0, #0
 80044f8:	e008      	b.n	800450c <_printf_common+0xa8>
 80044fa:	2301      	movs	r3, #1
 80044fc:	4652      	mov	r2, sl
 80044fe:	4649      	mov	r1, r9
 8004500:	4638      	mov	r0, r7
 8004502:	47c0      	blx	r8
 8004504:	3001      	adds	r0, #1
 8004506:	d103      	bne.n	8004510 <_printf_common+0xac>
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004510:	3501      	adds	r5, #1
 8004512:	e7c6      	b.n	80044a2 <_printf_common+0x3e>
 8004514:	18e1      	adds	r1, r4, r3
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	2030      	movs	r0, #48	; 0x30
 800451a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800451e:	4422      	add	r2, r4
 8004520:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004524:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004528:	3302      	adds	r3, #2
 800452a:	e7c7      	b.n	80044bc <_printf_common+0x58>
 800452c:	2301      	movs	r3, #1
 800452e:	4622      	mov	r2, r4
 8004530:	4649      	mov	r1, r9
 8004532:	4638      	mov	r0, r7
 8004534:	47c0      	blx	r8
 8004536:	3001      	adds	r0, #1
 8004538:	d0e6      	beq.n	8004508 <_printf_common+0xa4>
 800453a:	3601      	adds	r6, #1
 800453c:	e7d9      	b.n	80044f2 <_printf_common+0x8e>
	...

08004540 <_printf_i>:
 8004540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004544:	7e0f      	ldrb	r7, [r1, #24]
 8004546:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004548:	2f78      	cmp	r7, #120	; 0x78
 800454a:	4691      	mov	r9, r2
 800454c:	4680      	mov	r8, r0
 800454e:	460c      	mov	r4, r1
 8004550:	469a      	mov	sl, r3
 8004552:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004556:	d807      	bhi.n	8004568 <_printf_i+0x28>
 8004558:	2f62      	cmp	r7, #98	; 0x62
 800455a:	d80a      	bhi.n	8004572 <_printf_i+0x32>
 800455c:	2f00      	cmp	r7, #0
 800455e:	f000 80d4 	beq.w	800470a <_printf_i+0x1ca>
 8004562:	2f58      	cmp	r7, #88	; 0x58
 8004564:	f000 80c0 	beq.w	80046e8 <_printf_i+0x1a8>
 8004568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800456c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004570:	e03a      	b.n	80045e8 <_printf_i+0xa8>
 8004572:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004576:	2b15      	cmp	r3, #21
 8004578:	d8f6      	bhi.n	8004568 <_printf_i+0x28>
 800457a:	a101      	add	r1, pc, #4	; (adr r1, 8004580 <_printf_i+0x40>)
 800457c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045ed 	.word	0x080045ed
 8004588:	08004569 	.word	0x08004569
 800458c:	08004569 	.word	0x08004569
 8004590:	08004569 	.word	0x08004569
 8004594:	08004569 	.word	0x08004569
 8004598:	080045ed 	.word	0x080045ed
 800459c:	08004569 	.word	0x08004569
 80045a0:	08004569 	.word	0x08004569
 80045a4:	08004569 	.word	0x08004569
 80045a8:	08004569 	.word	0x08004569
 80045ac:	080046f1 	.word	0x080046f1
 80045b0:	08004619 	.word	0x08004619
 80045b4:	080046ab 	.word	0x080046ab
 80045b8:	08004569 	.word	0x08004569
 80045bc:	08004569 	.word	0x08004569
 80045c0:	08004713 	.word	0x08004713
 80045c4:	08004569 	.word	0x08004569
 80045c8:	08004619 	.word	0x08004619
 80045cc:	08004569 	.word	0x08004569
 80045d0:	08004569 	.word	0x08004569
 80045d4:	080046b3 	.word	0x080046b3
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	1d1a      	adds	r2, r3, #4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e8:	2301      	movs	r3, #1
 80045ea:	e09f      	b.n	800472c <_printf_i+0x1ec>
 80045ec:	6820      	ldr	r0, [r4, #0]
 80045ee:	682b      	ldr	r3, [r5, #0]
 80045f0:	0607      	lsls	r7, r0, #24
 80045f2:	f103 0104 	add.w	r1, r3, #4
 80045f6:	6029      	str	r1, [r5, #0]
 80045f8:	d501      	bpl.n	80045fe <_printf_i+0xbe>
 80045fa:	681e      	ldr	r6, [r3, #0]
 80045fc:	e003      	b.n	8004606 <_printf_i+0xc6>
 80045fe:	0646      	lsls	r6, r0, #25
 8004600:	d5fb      	bpl.n	80045fa <_printf_i+0xba>
 8004602:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004606:	2e00      	cmp	r6, #0
 8004608:	da03      	bge.n	8004612 <_printf_i+0xd2>
 800460a:	232d      	movs	r3, #45	; 0x2d
 800460c:	4276      	negs	r6, r6
 800460e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004612:	485a      	ldr	r0, [pc, #360]	; (800477c <_printf_i+0x23c>)
 8004614:	230a      	movs	r3, #10
 8004616:	e012      	b.n	800463e <_printf_i+0xfe>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	6820      	ldr	r0, [r4, #0]
 800461c:	1d19      	adds	r1, r3, #4
 800461e:	6029      	str	r1, [r5, #0]
 8004620:	0605      	lsls	r5, r0, #24
 8004622:	d501      	bpl.n	8004628 <_printf_i+0xe8>
 8004624:	681e      	ldr	r6, [r3, #0]
 8004626:	e002      	b.n	800462e <_printf_i+0xee>
 8004628:	0641      	lsls	r1, r0, #25
 800462a:	d5fb      	bpl.n	8004624 <_printf_i+0xe4>
 800462c:	881e      	ldrh	r6, [r3, #0]
 800462e:	4853      	ldr	r0, [pc, #332]	; (800477c <_printf_i+0x23c>)
 8004630:	2f6f      	cmp	r7, #111	; 0x6f
 8004632:	bf0c      	ite	eq
 8004634:	2308      	moveq	r3, #8
 8004636:	230a      	movne	r3, #10
 8004638:	2100      	movs	r1, #0
 800463a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800463e:	6865      	ldr	r5, [r4, #4]
 8004640:	60a5      	str	r5, [r4, #8]
 8004642:	2d00      	cmp	r5, #0
 8004644:	bfa2      	ittt	ge
 8004646:	6821      	ldrge	r1, [r4, #0]
 8004648:	f021 0104 	bicge.w	r1, r1, #4
 800464c:	6021      	strge	r1, [r4, #0]
 800464e:	b90e      	cbnz	r6, 8004654 <_printf_i+0x114>
 8004650:	2d00      	cmp	r5, #0
 8004652:	d04b      	beq.n	80046ec <_printf_i+0x1ac>
 8004654:	4615      	mov	r5, r2
 8004656:	fbb6 f1f3 	udiv	r1, r6, r3
 800465a:	fb03 6711 	mls	r7, r3, r1, r6
 800465e:	5dc7      	ldrb	r7, [r0, r7]
 8004660:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004664:	4637      	mov	r7, r6
 8004666:	42bb      	cmp	r3, r7
 8004668:	460e      	mov	r6, r1
 800466a:	d9f4      	bls.n	8004656 <_printf_i+0x116>
 800466c:	2b08      	cmp	r3, #8
 800466e:	d10b      	bne.n	8004688 <_printf_i+0x148>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	07de      	lsls	r6, r3, #31
 8004674:	d508      	bpl.n	8004688 <_printf_i+0x148>
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	6861      	ldr	r1, [r4, #4]
 800467a:	4299      	cmp	r1, r3
 800467c:	bfde      	ittt	le
 800467e:	2330      	movle	r3, #48	; 0x30
 8004680:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004684:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004688:	1b52      	subs	r2, r2, r5
 800468a:	6122      	str	r2, [r4, #16]
 800468c:	f8cd a000 	str.w	sl, [sp]
 8004690:	464b      	mov	r3, r9
 8004692:	aa03      	add	r2, sp, #12
 8004694:	4621      	mov	r1, r4
 8004696:	4640      	mov	r0, r8
 8004698:	f7ff fee4 	bl	8004464 <_printf_common>
 800469c:	3001      	adds	r0, #1
 800469e:	d14a      	bne.n	8004736 <_printf_i+0x1f6>
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	b004      	add	sp, #16
 80046a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	f043 0320 	orr.w	r3, r3, #32
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	4833      	ldr	r0, [pc, #204]	; (8004780 <_printf_i+0x240>)
 80046b4:	2778      	movs	r7, #120	; 0x78
 80046b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	6829      	ldr	r1, [r5, #0]
 80046be:	061f      	lsls	r7, r3, #24
 80046c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80046c4:	d402      	bmi.n	80046cc <_printf_i+0x18c>
 80046c6:	065f      	lsls	r7, r3, #25
 80046c8:	bf48      	it	mi
 80046ca:	b2b6      	uxthmi	r6, r6
 80046cc:	07df      	lsls	r7, r3, #31
 80046ce:	bf48      	it	mi
 80046d0:	f043 0320 	orrmi.w	r3, r3, #32
 80046d4:	6029      	str	r1, [r5, #0]
 80046d6:	bf48      	it	mi
 80046d8:	6023      	strmi	r3, [r4, #0]
 80046da:	b91e      	cbnz	r6, 80046e4 <_printf_i+0x1a4>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	f023 0320 	bic.w	r3, r3, #32
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	2310      	movs	r3, #16
 80046e6:	e7a7      	b.n	8004638 <_printf_i+0xf8>
 80046e8:	4824      	ldr	r0, [pc, #144]	; (800477c <_printf_i+0x23c>)
 80046ea:	e7e4      	b.n	80046b6 <_printf_i+0x176>
 80046ec:	4615      	mov	r5, r2
 80046ee:	e7bd      	b.n	800466c <_printf_i+0x12c>
 80046f0:	682b      	ldr	r3, [r5, #0]
 80046f2:	6826      	ldr	r6, [r4, #0]
 80046f4:	6961      	ldr	r1, [r4, #20]
 80046f6:	1d18      	adds	r0, r3, #4
 80046f8:	6028      	str	r0, [r5, #0]
 80046fa:	0635      	lsls	r5, r6, #24
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	d501      	bpl.n	8004704 <_printf_i+0x1c4>
 8004700:	6019      	str	r1, [r3, #0]
 8004702:	e002      	b.n	800470a <_printf_i+0x1ca>
 8004704:	0670      	lsls	r0, r6, #25
 8004706:	d5fb      	bpl.n	8004700 <_printf_i+0x1c0>
 8004708:	8019      	strh	r1, [r3, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	6123      	str	r3, [r4, #16]
 800470e:	4615      	mov	r5, r2
 8004710:	e7bc      	b.n	800468c <_printf_i+0x14c>
 8004712:	682b      	ldr	r3, [r5, #0]
 8004714:	1d1a      	adds	r2, r3, #4
 8004716:	602a      	str	r2, [r5, #0]
 8004718:	681d      	ldr	r5, [r3, #0]
 800471a:	6862      	ldr	r2, [r4, #4]
 800471c:	2100      	movs	r1, #0
 800471e:	4628      	mov	r0, r5
 8004720:	f7fb fd5e 	bl	80001e0 <memchr>
 8004724:	b108      	cbz	r0, 800472a <_printf_i+0x1ea>
 8004726:	1b40      	subs	r0, r0, r5
 8004728:	6060      	str	r0, [r4, #4]
 800472a:	6863      	ldr	r3, [r4, #4]
 800472c:	6123      	str	r3, [r4, #16]
 800472e:	2300      	movs	r3, #0
 8004730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004734:	e7aa      	b.n	800468c <_printf_i+0x14c>
 8004736:	6923      	ldr	r3, [r4, #16]
 8004738:	462a      	mov	r2, r5
 800473a:	4649      	mov	r1, r9
 800473c:	4640      	mov	r0, r8
 800473e:	47d0      	blx	sl
 8004740:	3001      	adds	r0, #1
 8004742:	d0ad      	beq.n	80046a0 <_printf_i+0x160>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	079b      	lsls	r3, r3, #30
 8004748:	d413      	bmi.n	8004772 <_printf_i+0x232>
 800474a:	68e0      	ldr	r0, [r4, #12]
 800474c:	9b03      	ldr	r3, [sp, #12]
 800474e:	4298      	cmp	r0, r3
 8004750:	bfb8      	it	lt
 8004752:	4618      	movlt	r0, r3
 8004754:	e7a6      	b.n	80046a4 <_printf_i+0x164>
 8004756:	2301      	movs	r3, #1
 8004758:	4632      	mov	r2, r6
 800475a:	4649      	mov	r1, r9
 800475c:	4640      	mov	r0, r8
 800475e:	47d0      	blx	sl
 8004760:	3001      	adds	r0, #1
 8004762:	d09d      	beq.n	80046a0 <_printf_i+0x160>
 8004764:	3501      	adds	r5, #1
 8004766:	68e3      	ldr	r3, [r4, #12]
 8004768:	9903      	ldr	r1, [sp, #12]
 800476a:	1a5b      	subs	r3, r3, r1
 800476c:	42ab      	cmp	r3, r5
 800476e:	dcf2      	bgt.n	8004756 <_printf_i+0x216>
 8004770:	e7eb      	b.n	800474a <_printf_i+0x20a>
 8004772:	2500      	movs	r5, #0
 8004774:	f104 0619 	add.w	r6, r4, #25
 8004778:	e7f5      	b.n	8004766 <_printf_i+0x226>
 800477a:	bf00      	nop
 800477c:	08004b89 	.word	0x08004b89
 8004780:	08004b9a 	.word	0x08004b9a

08004784 <__sflush_r>:
 8004784:	898a      	ldrh	r2, [r1, #12]
 8004786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478a:	4605      	mov	r5, r0
 800478c:	0710      	lsls	r0, r2, #28
 800478e:	460c      	mov	r4, r1
 8004790:	d458      	bmi.n	8004844 <__sflush_r+0xc0>
 8004792:	684b      	ldr	r3, [r1, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	dc05      	bgt.n	80047a4 <__sflush_r+0x20>
 8004798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	dc02      	bgt.n	80047a4 <__sflush_r+0x20>
 800479e:	2000      	movs	r0, #0
 80047a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047a6:	2e00      	cmp	r6, #0
 80047a8:	d0f9      	beq.n	800479e <__sflush_r+0x1a>
 80047aa:	2300      	movs	r3, #0
 80047ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047b0:	682f      	ldr	r7, [r5, #0]
 80047b2:	6a21      	ldr	r1, [r4, #32]
 80047b4:	602b      	str	r3, [r5, #0]
 80047b6:	d032      	beq.n	800481e <__sflush_r+0x9a>
 80047b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	075a      	lsls	r2, r3, #29
 80047be:	d505      	bpl.n	80047cc <__sflush_r+0x48>
 80047c0:	6863      	ldr	r3, [r4, #4]
 80047c2:	1ac0      	subs	r0, r0, r3
 80047c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047c6:	b10b      	cbz	r3, 80047cc <__sflush_r+0x48>
 80047c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047ca:	1ac0      	subs	r0, r0, r3
 80047cc:	2300      	movs	r3, #0
 80047ce:	4602      	mov	r2, r0
 80047d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047d2:	6a21      	ldr	r1, [r4, #32]
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b0      	blx	r6
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	d106      	bne.n	80047ec <__sflush_r+0x68>
 80047de:	6829      	ldr	r1, [r5, #0]
 80047e0:	291d      	cmp	r1, #29
 80047e2:	d82b      	bhi.n	800483c <__sflush_r+0xb8>
 80047e4:	4a29      	ldr	r2, [pc, #164]	; (800488c <__sflush_r+0x108>)
 80047e6:	410a      	asrs	r2, r1
 80047e8:	07d6      	lsls	r6, r2, #31
 80047ea:	d427      	bmi.n	800483c <__sflush_r+0xb8>
 80047ec:	2200      	movs	r2, #0
 80047ee:	6062      	str	r2, [r4, #4]
 80047f0:	04d9      	lsls	r1, r3, #19
 80047f2:	6922      	ldr	r2, [r4, #16]
 80047f4:	6022      	str	r2, [r4, #0]
 80047f6:	d504      	bpl.n	8004802 <__sflush_r+0x7e>
 80047f8:	1c42      	adds	r2, r0, #1
 80047fa:	d101      	bne.n	8004800 <__sflush_r+0x7c>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b903      	cbnz	r3, 8004802 <__sflush_r+0x7e>
 8004800:	6560      	str	r0, [r4, #84]	; 0x54
 8004802:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004804:	602f      	str	r7, [r5, #0]
 8004806:	2900      	cmp	r1, #0
 8004808:	d0c9      	beq.n	800479e <__sflush_r+0x1a>
 800480a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800480e:	4299      	cmp	r1, r3
 8004810:	d002      	beq.n	8004818 <__sflush_r+0x94>
 8004812:	4628      	mov	r0, r5
 8004814:	f7ff fa8a 	bl	8003d2c <_free_r>
 8004818:	2000      	movs	r0, #0
 800481a:	6360      	str	r0, [r4, #52]	; 0x34
 800481c:	e7c0      	b.n	80047a0 <__sflush_r+0x1c>
 800481e:	2301      	movs	r3, #1
 8004820:	4628      	mov	r0, r5
 8004822:	47b0      	blx	r6
 8004824:	1c41      	adds	r1, r0, #1
 8004826:	d1c8      	bne.n	80047ba <__sflush_r+0x36>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0c5      	beq.n	80047ba <__sflush_r+0x36>
 800482e:	2b1d      	cmp	r3, #29
 8004830:	d001      	beq.n	8004836 <__sflush_r+0xb2>
 8004832:	2b16      	cmp	r3, #22
 8004834:	d101      	bne.n	800483a <__sflush_r+0xb6>
 8004836:	602f      	str	r7, [r5, #0]
 8004838:	e7b1      	b.n	800479e <__sflush_r+0x1a>
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	e7ad      	b.n	80047a0 <__sflush_r+0x1c>
 8004844:	690f      	ldr	r7, [r1, #16]
 8004846:	2f00      	cmp	r7, #0
 8004848:	d0a9      	beq.n	800479e <__sflush_r+0x1a>
 800484a:	0793      	lsls	r3, r2, #30
 800484c:	680e      	ldr	r6, [r1, #0]
 800484e:	bf08      	it	eq
 8004850:	694b      	ldreq	r3, [r1, #20]
 8004852:	600f      	str	r7, [r1, #0]
 8004854:	bf18      	it	ne
 8004856:	2300      	movne	r3, #0
 8004858:	eba6 0807 	sub.w	r8, r6, r7
 800485c:	608b      	str	r3, [r1, #8]
 800485e:	f1b8 0f00 	cmp.w	r8, #0
 8004862:	dd9c      	ble.n	800479e <__sflush_r+0x1a>
 8004864:	6a21      	ldr	r1, [r4, #32]
 8004866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004868:	4643      	mov	r3, r8
 800486a:	463a      	mov	r2, r7
 800486c:	4628      	mov	r0, r5
 800486e:	47b0      	blx	r6
 8004870:	2800      	cmp	r0, #0
 8004872:	dc06      	bgt.n	8004882 <__sflush_r+0xfe>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800487a:	81a3      	strh	r3, [r4, #12]
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	e78e      	b.n	80047a0 <__sflush_r+0x1c>
 8004882:	4407      	add	r7, r0
 8004884:	eba8 0800 	sub.w	r8, r8, r0
 8004888:	e7e9      	b.n	800485e <__sflush_r+0xda>
 800488a:	bf00      	nop
 800488c:	dfbffffe 	.word	0xdfbffffe

08004890 <_fflush_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	690b      	ldr	r3, [r1, #16]
 8004894:	4605      	mov	r5, r0
 8004896:	460c      	mov	r4, r1
 8004898:	b913      	cbnz	r3, 80048a0 <_fflush_r+0x10>
 800489a:	2500      	movs	r5, #0
 800489c:	4628      	mov	r0, r5
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	b118      	cbz	r0, 80048aa <_fflush_r+0x1a>
 80048a2:	6a03      	ldr	r3, [r0, #32]
 80048a4:	b90b      	cbnz	r3, 80048aa <_fflush_r+0x1a>
 80048a6:	f7fe ff7b 	bl	80037a0 <__sinit>
 80048aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f3      	beq.n	800489a <_fflush_r+0xa>
 80048b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048b4:	07d0      	lsls	r0, r2, #31
 80048b6:	d404      	bmi.n	80048c2 <_fflush_r+0x32>
 80048b8:	0599      	lsls	r1, r3, #22
 80048ba:	d402      	bmi.n	80048c2 <_fflush_r+0x32>
 80048bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048be:	f7ff fa32 	bl	8003d26 <__retarget_lock_acquire_recursive>
 80048c2:	4628      	mov	r0, r5
 80048c4:	4621      	mov	r1, r4
 80048c6:	f7ff ff5d 	bl	8004784 <__sflush_r>
 80048ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048cc:	07da      	lsls	r2, r3, #31
 80048ce:	4605      	mov	r5, r0
 80048d0:	d4e4      	bmi.n	800489c <_fflush_r+0xc>
 80048d2:	89a3      	ldrh	r3, [r4, #12]
 80048d4:	059b      	lsls	r3, r3, #22
 80048d6:	d4e1      	bmi.n	800489c <_fflush_r+0xc>
 80048d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048da:	f7ff fa25 	bl	8003d28 <__retarget_lock_release_recursive>
 80048de:	e7dd      	b.n	800489c <_fflush_r+0xc>

080048e0 <__swhatbuf_r>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	460c      	mov	r4, r1
 80048e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e8:	2900      	cmp	r1, #0
 80048ea:	b096      	sub	sp, #88	; 0x58
 80048ec:	4615      	mov	r5, r2
 80048ee:	461e      	mov	r6, r3
 80048f0:	da0d      	bge.n	800490e <__swhatbuf_r+0x2e>
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80048f8:	f04f 0100 	mov.w	r1, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004902:	2340      	movne	r3, #64	; 0x40
 8004904:	2000      	movs	r0, #0
 8004906:	6031      	str	r1, [r6, #0]
 8004908:	602b      	str	r3, [r5, #0]
 800490a:	b016      	add	sp, #88	; 0x58
 800490c:	bd70      	pop	{r4, r5, r6, pc}
 800490e:	466a      	mov	r2, sp
 8004910:	f000 f862 	bl	80049d8 <_fstat_r>
 8004914:	2800      	cmp	r0, #0
 8004916:	dbec      	blt.n	80048f2 <__swhatbuf_r+0x12>
 8004918:	9901      	ldr	r1, [sp, #4]
 800491a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800491e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004922:	4259      	negs	r1, r3
 8004924:	4159      	adcs	r1, r3
 8004926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800492a:	e7eb      	b.n	8004904 <__swhatbuf_r+0x24>

0800492c <__smakebuf_r>:
 800492c:	898b      	ldrh	r3, [r1, #12]
 800492e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004930:	079d      	lsls	r5, r3, #30
 8004932:	4606      	mov	r6, r0
 8004934:	460c      	mov	r4, r1
 8004936:	d507      	bpl.n	8004948 <__smakebuf_r+0x1c>
 8004938:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	6123      	str	r3, [r4, #16]
 8004940:	2301      	movs	r3, #1
 8004942:	6163      	str	r3, [r4, #20]
 8004944:	b002      	add	sp, #8
 8004946:	bd70      	pop	{r4, r5, r6, pc}
 8004948:	ab01      	add	r3, sp, #4
 800494a:	466a      	mov	r2, sp
 800494c:	f7ff ffc8 	bl	80048e0 <__swhatbuf_r>
 8004950:	9900      	ldr	r1, [sp, #0]
 8004952:	4605      	mov	r5, r0
 8004954:	4630      	mov	r0, r6
 8004956:	f7ff fa5d 	bl	8003e14 <_malloc_r>
 800495a:	b948      	cbnz	r0, 8004970 <__smakebuf_r+0x44>
 800495c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004960:	059a      	lsls	r2, r3, #22
 8004962:	d4ef      	bmi.n	8004944 <__smakebuf_r+0x18>
 8004964:	f023 0303 	bic.w	r3, r3, #3
 8004968:	f043 0302 	orr.w	r3, r3, #2
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	e7e3      	b.n	8004938 <__smakebuf_r+0xc>
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	6020      	str	r0, [r4, #0]
 8004974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	9b00      	ldr	r3, [sp, #0]
 800497c:	6163      	str	r3, [r4, #20]
 800497e:	9b01      	ldr	r3, [sp, #4]
 8004980:	6120      	str	r0, [r4, #16]
 8004982:	b15b      	cbz	r3, 800499c <__smakebuf_r+0x70>
 8004984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004988:	4630      	mov	r0, r6
 800498a:	f000 f837 	bl	80049fc <_isatty_r>
 800498e:	b128      	cbz	r0, 800499c <__smakebuf_r+0x70>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	81a3      	strh	r3, [r4, #12]
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	431d      	orrs	r5, r3
 80049a0:	81a5      	strh	r5, [r4, #12]
 80049a2:	e7cf      	b.n	8004944 <__smakebuf_r+0x18>

080049a4 <memmove>:
 80049a4:	4288      	cmp	r0, r1
 80049a6:	b510      	push	{r4, lr}
 80049a8:	eb01 0402 	add.w	r4, r1, r2
 80049ac:	d902      	bls.n	80049b4 <memmove+0x10>
 80049ae:	4284      	cmp	r4, r0
 80049b0:	4623      	mov	r3, r4
 80049b2:	d807      	bhi.n	80049c4 <memmove+0x20>
 80049b4:	1e43      	subs	r3, r0, #1
 80049b6:	42a1      	cmp	r1, r4
 80049b8:	d008      	beq.n	80049cc <memmove+0x28>
 80049ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049c2:	e7f8      	b.n	80049b6 <memmove+0x12>
 80049c4:	4402      	add	r2, r0
 80049c6:	4601      	mov	r1, r0
 80049c8:	428a      	cmp	r2, r1
 80049ca:	d100      	bne.n	80049ce <memmove+0x2a>
 80049cc:	bd10      	pop	{r4, pc}
 80049ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049d6:	e7f7      	b.n	80049c8 <memmove+0x24>

080049d8 <_fstat_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4d07      	ldr	r5, [pc, #28]	; (80049f8 <_fstat_r+0x20>)
 80049dc:	2300      	movs	r3, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	602b      	str	r3, [r5, #0]
 80049e6:	f7fc fb00 	bl	8000fea <_fstat>
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	d102      	bne.n	80049f4 <_fstat_r+0x1c>
 80049ee:	682b      	ldr	r3, [r5, #0]
 80049f0:	b103      	cbz	r3, 80049f4 <_fstat_r+0x1c>
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	bd38      	pop	{r3, r4, r5, pc}
 80049f6:	bf00      	nop
 80049f8:	2000026c 	.word	0x2000026c

080049fc <_isatty_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4d06      	ldr	r5, [pc, #24]	; (8004a18 <_isatty_r+0x1c>)
 8004a00:	2300      	movs	r3, #0
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	602b      	str	r3, [r5, #0]
 8004a08:	f7fc faff 	bl	800100a <_isatty>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_isatty_r+0x1a>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_isatty_r+0x1a>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	2000026c 	.word	0x2000026c

08004a1c <_sbrk_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4d06      	ldr	r5, [pc, #24]	; (8004a38 <_sbrk_r+0x1c>)
 8004a20:	2300      	movs	r3, #0
 8004a22:	4604      	mov	r4, r0
 8004a24:	4608      	mov	r0, r1
 8004a26:	602b      	str	r3, [r5, #0]
 8004a28:	f7fc fb08 	bl	800103c <_sbrk>
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	d102      	bne.n	8004a36 <_sbrk_r+0x1a>
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	b103      	cbz	r3, 8004a36 <_sbrk_r+0x1a>
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	2000026c 	.word	0x2000026c

08004a3c <memcpy>:
 8004a3c:	440a      	add	r2, r1
 8004a3e:	4291      	cmp	r1, r2
 8004a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a44:	d100      	bne.n	8004a48 <memcpy+0xc>
 8004a46:	4770      	bx	lr
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a52:	4291      	cmp	r1, r2
 8004a54:	d1f9      	bne.n	8004a4a <memcpy+0xe>
 8004a56:	bd10      	pop	{r4, pc}

08004a58 <_realloc_r>:
 8004a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	4614      	mov	r4, r2
 8004a60:	460e      	mov	r6, r1
 8004a62:	b921      	cbnz	r1, 8004a6e <_realloc_r+0x16>
 8004a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a68:	4611      	mov	r1, r2
 8004a6a:	f7ff b9d3 	b.w	8003e14 <_malloc_r>
 8004a6e:	b92a      	cbnz	r2, 8004a7c <_realloc_r+0x24>
 8004a70:	f7ff f95c 	bl	8003d2c <_free_r>
 8004a74:	4625      	mov	r5, r4
 8004a76:	4628      	mov	r0, r5
 8004a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a7c:	f000 f81b 	bl	8004ab6 <_malloc_usable_size_r>
 8004a80:	4284      	cmp	r4, r0
 8004a82:	4607      	mov	r7, r0
 8004a84:	d802      	bhi.n	8004a8c <_realloc_r+0x34>
 8004a86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a8a:	d812      	bhi.n	8004ab2 <_realloc_r+0x5a>
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4640      	mov	r0, r8
 8004a90:	f7ff f9c0 	bl	8003e14 <_malloc_r>
 8004a94:	4605      	mov	r5, r0
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d0ed      	beq.n	8004a76 <_realloc_r+0x1e>
 8004a9a:	42bc      	cmp	r4, r7
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	bf28      	it	cs
 8004aa2:	463a      	movcs	r2, r7
 8004aa4:	f7ff ffca 	bl	8004a3c <memcpy>
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4640      	mov	r0, r8
 8004aac:	f7ff f93e 	bl	8003d2c <_free_r>
 8004ab0:	e7e1      	b.n	8004a76 <_realloc_r+0x1e>
 8004ab2:	4635      	mov	r5, r6
 8004ab4:	e7df      	b.n	8004a76 <_realloc_r+0x1e>

08004ab6 <_malloc_usable_size_r>:
 8004ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aba:	1f18      	subs	r0, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bfbc      	itt	lt
 8004ac0:	580b      	ldrlt	r3, [r1, r0]
 8004ac2:	18c0      	addlt	r0, r0, r3
 8004ac4:	4770      	bx	lr
	...

08004ac8 <_init>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	bf00      	nop
 8004acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	469e      	mov	lr, r3
 8004ad2:	4770      	bx	lr

08004ad4 <_fini>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr
