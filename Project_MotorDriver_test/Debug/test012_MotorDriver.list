
test012_MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800486c  0800486c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004874  08004874  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800487c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  080048e4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080048e4  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d045  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dae  00000000  00000000  0002d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  0002eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d5  00000000  00000000  0002fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000172d9  00000000  00000000  00030545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e386  00000000  00000000  0004781e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009001b  00000000  00000000  00055ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ea4  00000000  00000000  000e5bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e9a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004768 	.word	0x08004768

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004768 	.word	0x08004768

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc3d 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f845 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f94d 	bl	8000828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f921 	bl	80007d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000592:	f000 f8a9 	bl	80006e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("DC Motor & Motor Driver Test");
 8000596:	481a      	ldr	r0, [pc, #104]	; (8000600 <main+0x84>)
 8000598:	f000 fa18 	bl	80009cc <ProgramStart>
  HAL_GPIO_WritePin(D_A1_GPIO_Port, D_A1_Pin, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	4818      	ldr	r0, [pc, #96]	; (8000604 <main+0x88>)
 80005a2:	f000 ff45 	bl	8001430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D_A2_GPIO_Port, D_A2_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2110      	movs	r1, #16
 80005aa:	4816      	ldr	r0, [pc, #88]	; (8000604 <main+0x88>)
 80005ac:	f000 ff40 	bl	8001430 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005b0:	2104      	movs	r1, #4
 80005b2:	4815      	ldr	r0, [pc, #84]	; (8000608 <main+0x8c>)
 80005b4:	f001 fc96 	bl	8001ee4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int ccr1 = 0, op = 10;
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	230a      	movs	r3, #10
 80005be:	603b      	str	r3, [r7, #0]
  printf("111111111111111");
 80005c0:	4812      	ldr	r0, [pc, #72]	; (800060c <main+0x90>)
 80005c2:	f002 ff73 	bl	80034ac <iprintf>
  while (1)
  {
	  htim2.Instance->CCR2 = ccr1;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <main+0x8c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	639a      	str	r2, [r3, #56]	; 0x38
	  ccr1 += op;
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	607b      	str	r3, [r7, #4]
	  if(ccr1 > htim2.Instance->ARR || ccr1 < 0)
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <main+0x8c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d302      	bcc.n	80005e8 <main+0x6c>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da06      	bge.n	80005f6 <main+0x7a>
	  {
		  op *= -1;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	425b      	negs	r3, r3
 80005ec:	603b      	str	r3, [r7, #0]
		  printf("Motor Direction changed  %d \r\n", op);
 80005ee:	6839      	ldr	r1, [r7, #0]
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x94>)
 80005f2:	f002 ff5b 	bl	80034ac <iprintf>
	  }

	  HAL_Delay(50);
 80005f6:	2032      	movs	r0, #50	; 0x32
 80005f8:	f000 fc74 	bl	8000ee4 <HAL_Delay>
	  htim2.Instance->CCR2 = ccr1;
 80005fc:	e7e3      	b.n	80005c6 <main+0x4a>
 80005fe:	bf00      	nop
 8000600:	08004780 	.word	0x08004780
 8000604:	40020400 	.word	0x40020400
 8000608:	20000084 	.word	0x20000084
 800060c:	080047a0 	.word	0x080047a0
 8000610:	080047b0 	.word	0x080047b0

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 f956 	bl	80038d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000684:	2310      	movs	r3, #16
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000688:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068e:	2304      	movs	r3, #4
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000692:	2304      	movs	r3, #4
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fee2 	bl	8001464 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a6:	f000 f943 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2302      	movs	r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f944 	bl	8001954 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d2:	f000 f92d 	bl	8000930 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	; 0x38
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000718:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_TIM2_Init+0xe8>)
 800071a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <MX_TIM2_Init+0xe8>)
 8000722:	2253      	movs	r2, #83	; 0x53
 8000724:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_TIM2_Init+0xe8>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_TIM2_Init+0xe8>)
 800072e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000732:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_TIM2_Init+0xe8>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_TIM2_Init+0xe8>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000740:	4823      	ldr	r0, [pc, #140]	; (80007d0 <MX_TIM2_Init+0xe8>)
 8000742:	f001 fb27 	bl	8001d94 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800074c:	f000 f8f0 	bl	8000930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075a:	4619      	mov	r1, r3
 800075c:	481c      	ldr	r0, [pc, #112]	; (80007d0 <MX_TIM2_Init+0xe8>)
 800075e:	f001 fd33 	bl	80021c8 <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000768:	f000 f8e2 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800076c:	4818      	ldr	r0, [pc, #96]	; (80007d0 <MX_TIM2_Init+0xe8>)
 800076e:	f001 fb60 	bl	8001e32 <HAL_TIM_PWM_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000778:	f000 f8da 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4619      	mov	r1, r3
 800078a:	4811      	ldr	r0, [pc, #68]	; (80007d0 <MX_TIM2_Init+0xe8>)
 800078c:	f002 f8bc 	bl	8002908 <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000796:	f000 f8cb 	bl	8000930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079a:	2360      	movs	r3, #96	; 0x60
 800079c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2204      	movs	r2, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <MX_TIM2_Init+0xe8>)
 80007b2:	f001 fc47 	bl	8002044 <HAL_TIM_PWM_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007bc:	f000 f8b8 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <MX_TIM2_Init+0xe8>)
 80007c2:	f000 f993 	bl	8000aec <HAL_TIM_MspPostInit>

}
 80007c6:	bf00      	nop
 80007c8:	3738      	adds	r7, #56	; 0x38
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000084 	.word	0x20000084

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f002 f8ea 	bl	80029e4 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f88b 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000cc 	.word	0x200000cc
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b37      	ldr	r3, [pc, #220]	; (8000920 <MX_GPIO_Init+0xf8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a36      	ldr	r2, [pc, #216]	; (8000920 <MX_GPIO_Init+0xf8>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <MX_GPIO_Init+0xf8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b30      	ldr	r3, [pc, #192]	; (8000920 <MX_GPIO_Init+0xf8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a2f      	ldr	r2, [pc, #188]	; (8000920 <MX_GPIO_Init+0xf8>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_GPIO_Init+0xf8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <MX_GPIO_Init+0xf8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a28      	ldr	r2, [pc, #160]	; (8000920 <MX_GPIO_Init+0xf8>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_GPIO_Init+0xf8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b22      	ldr	r3, [pc, #136]	; (8000920 <MX_GPIO_Init+0xf8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a21      	ldr	r2, [pc, #132]	; (8000920 <MX_GPIO_Init+0xf8>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_GPIO_Init+0xf8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	481c      	ldr	r0, [pc, #112]	; (8000924 <MX_GPIO_Init+0xfc>)
 80008b4:	f000 fdbc 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_A2_Pin|D_A1_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2130      	movs	r1, #48	; 0x30
 80008bc:	481a      	ldr	r0, [pc, #104]	; (8000928 <MX_GPIO_Init+0x100>)
 80008be:	f000 fdb7 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4814      	ldr	r0, [pc, #80]	; (800092c <MX_GPIO_Init+0x104>)
 80008da:	f000 fc0d 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008de:	2320      	movs	r3, #32
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <MX_GPIO_Init+0xfc>)
 80008f6:	f000 fbff 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_A2_Pin D_A1_Pin */
  GPIO_InitStruct.Pin = D_A2_Pin|D_A1_Pin;
 80008fa:	2330      	movs	r3, #48	; 0x30
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_GPIO_Init+0x100>)
 8000912:	f000 fbf1 	bl	80010f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000
 8000928:	40020400 	.word	0x40020400
 800092c:	40020800 	.word	0x40020800

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <__io_getchar>:
extern UART_HandleTypeDef huart2;
//int *hi2c = NULL;
//I2C_HandleTypeDef *hi2c = NULL;

int __io_getchar(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	char ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000942:	bf00      	nop
 8000944:	1df9      	adds	r1, r7, #7
 8000946:	230a      	movs	r3, #10
 8000948:	2201      	movs	r2, #1
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <__io_getchar+0x44>)
 800094c:	f002 f925 	bl	8002b9a <HAL_UART_Receive>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f6      	bne.n	8000944 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10);	//Echo
 8000956:	1df9      	adds	r1, r7, #7
 8000958:	230a      	movs	r3, #10
 800095a:	2201      	movs	r2, #1
 800095c:	4808      	ldr	r0, [pc, #32]	; (8000980 <__io_getchar+0x44>)
 800095e:	f002 f891 	bl	8002a84 <HAL_UART_Transmit>
	if(ch == '\r')
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b0d      	cmp	r3, #13
 8000966:	d105      	bne.n	8000974 <__io_getchar+0x38>
		HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000968:	230a      	movs	r3, #10
 800096a:	2201      	movs	r2, #1
 800096c:	4905      	ldr	r1, [pc, #20]	; (8000984 <__io_getchar+0x48>)
 800096e:	4804      	ldr	r0, [pc, #16]	; (8000980 <__io_getchar+0x44>)
 8000970:	f002 f888 	bl	8002a84 <HAL_UART_Transmit>
	return ch;
 8000974:	79fb      	ldrb	r3, [r7, #7]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000cc 	.word	0x200000cc
 8000984:	080047d0 	.word	0x080047d0

08000988 <__io_putchar>:
int __io_putchar(int ch)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000990:	1d39      	adds	r1, r7, #4
 8000992:	230a      	movs	r3, #10
 8000994:	2201      	movs	r2, #1
 8000996:	4804      	ldr	r0, [pc, #16]	; (80009a8 <__io_putchar+0x20>)
 8000998:	f002 f874 	bl	8002a84 <HAL_UART_Transmit>
	return ch;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000cc 	.word	0x200000cc

080009ac <StandBy>:

void StandBy()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80009b0:	bf00      	nop
 80009b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b6:	4804      	ldr	r0, [pc, #16]	; (80009c8 <StandBy+0x1c>)
 80009b8:	f000 fd22 	bl	8001400 <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1f7      	bne.n	80009b2 <StandBy+0x6>
}
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40020800 	.word	0x40020800

080009cc <ProgramStart>:

void ProgramStart(char * str)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	//printf("\033[2J\033[0;0H");
	cls();
 80009d4:	f000 f820 	bl	8000a18 <cls>
	Cursor(0, 0);
 80009d8:	2100      	movs	r1, #0
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 f826 	bl	8000a2c <Cursor>
	printf("Program Name - %s\r\n", str);
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	480a      	ldr	r0, [pc, #40]	; (8000a0c <ProgramStart+0x40>)
 80009e4:	f002 fd62 	bl	80034ac <iprintf>
	printf("Press Blue-Button(B1) to Start...\r\n");
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <ProgramStart+0x44>)
 80009ea:	f002 fdc5 	bl	8003578 <puts>
	StandBy();
 80009ee:	f7ff ffdd 	bl	80009ac <StandBy>
	setvbuf(stdin, NULL, _IONBF, 0);	//scanf buffer clear
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <ProgramStart+0x48>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6858      	ldr	r0, [r3, #4]
 80009f8:	2300      	movs	r3, #0
 80009fa:	2202      	movs	r2, #2
 80009fc:	2100      	movs	r1, #0
 80009fe:	f002 fdc3 	bl	8003588 <setvbuf>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	080047d4 	.word	0x080047d4
 8000a10:	080047e8 	.word	0x080047e8
 8000a14:	20000064 	.word	0x20000064

08000a18 <cls>:

void cls()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <cls+0x10>)
 8000a1e:	f002 fd45 	bl	80034ac <iprintf>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	0800480c 	.word	0x0800480c

08000a2c <Cursor>:

void Cursor(int x, int y)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 8000a36:	f107 000c 	add.w	r0, r7, #12
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	4906      	ldr	r1, [pc, #24]	; (8000a58 <Cursor+0x2c>)
 8000a40:	f002 fe50 	bl	80036e4 <siprintf>
	puts(buf);   		//or printf("%s", buf);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fd95 	bl	8003578 <puts>
}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	08004814 	.word	0x08004814

08000a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 faf8 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000abc:	d10d      	bne.n	8000ada <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b0c:	d11d      	bne.n	8000b4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_TIM_MspPostInit+0x68>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_TIM_MspPostInit+0x68>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_TIM_MspPostInit+0x68>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <HAL_TIM_MspPostInit+0x6c>)
 8000b46:	f000 fad7 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020400 	.word	0x40020400

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_UART_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <HAL_UART_MspInit+0x8c>)
 8000bd2:	f000 fa91 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40004400 	.word	0x40004400
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f934 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	e00a      	b.n	8000c68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c52:	f7ff fe73 	bl	800093c <__io_getchar>
 8000c56:	4601      	mov	r1, r0
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	b2ca      	uxtb	r2, r1
 8000c60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbf0      	blt.n	8000c52 <_read+0x12>
  }

  return len;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e009      	b.n	8000ca0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fe77 	bl	8000988 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf1      	blt.n	8000c8c <_write+0x12>
  }
  return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_close>:

int _close(int file)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cda:	605a      	str	r2, [r3, #4]
  return 0;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_isatty>:

int _isatty(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f002 fe10 	bl	8003970 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000114 	.word	0x20000114
 8000d84:	20000268 	.word	0x20000268

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	; (8000dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	; (8000df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f002 fdcf 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fbcd 	bl	800057c <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000df0:	0800487c 	.word	0x0800487c
  ldr r2, =_sbss
 8000df4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000df8:	20000268 	.word	0x20000268

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f931 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fe12 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f93b 	bl	80010de <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f911 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000118 	.word	0x20000118

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000118 	.word	0x20000118

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff47 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff5c 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffb0 	bl	800104c <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e159      	b.n	80013c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8148 	bne.w	80013c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a2 	beq.w	80013c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a56      	ldr	r2, [pc, #344]	; (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <HAL_GPIO_Init+0x2e8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a52      	ldr	r2, [pc, #328]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a49      	ldr	r2, [pc, #292]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x202>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a48      	ldr	r2, [pc, #288]	; (80013ec <HAL_GPIO_Init+0x2f4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1fe>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a47      	ldr	r2, [pc, #284]	; (80013f0 <HAL_GPIO_Init+0x2f8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1fa>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a46      	ldr	r2, [pc, #280]	; (80013f4 <HAL_GPIO_Init+0x2fc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1f6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a45      	ldr	r2, [pc, #276]	; (80013f8 <HAL_GPIO_Init+0x300>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1f2>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_GPIO_Init+0x304>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a2f      	ldr	r2, [pc, #188]	; (80013fc <HAL_GPIO_Init+0x304>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_GPIO_Init+0x304>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a24      	ldr	r2, [pc, #144]	; (80013fc <HAL_GPIO_Init+0x304>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <HAL_GPIO_Init+0x304>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <HAL_GPIO_Init+0x304>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_GPIO_Init+0x304>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_GPIO_Init+0x304>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f aea2 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e001      	b.n	8001422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800144c:	e003      	b.n	8001456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	619a      	str	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e267      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d075      	beq.n	800156e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001482:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	d00c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148e:	4b85      	ldr	r3, [pc, #532]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001496:	2b08      	cmp	r3, #8
 8001498:	d112      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b82      	ldr	r3, [pc, #520]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014a6:	d10b      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	4b7e      	ldr	r3, [pc, #504]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d05b      	beq.n	800156c <HAL_RCC_OscConfig+0x108>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d157      	bne.n	800156c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e242      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c8:	d106      	bne.n	80014d8 <HAL_RCC_OscConfig+0x74>
 80014ca:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a75      	ldr	r2, [pc, #468]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xb0>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x98>
 80014e2:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6f      	ldr	r2, [pc, #444]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b6d      	ldr	r3, [pc, #436]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6c      	ldr	r2, [pc, #432]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xb0>
 80014fc:	4b69      	ldr	r3, [pc, #420]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a68      	ldr	r2, [pc, #416]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a65      	ldr	r2, [pc, #404]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fcd6 	bl	8000ecc <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fcd2 	bl	8000ecc <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e207      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xc0>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fcc2 	bl	8000ecc <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fcbe 	bl	8000ecc <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1f3      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0xe8>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800157a:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800158e:	2b08      	cmp	r3, #8
 8001590:	d11c      	bne.n	80015cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d116      	bne.n	80015cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x152>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e1c7      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4937      	ldr	r1, [pc, #220]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	e03a      	b.n	8001642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d4:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_OscConfig+0x244>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fc77 	bl	8000ecc <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fc73 	bl	8000ecc <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1a8      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4925      	ldr	r1, [pc, #148]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
 8001614:	e015      	b.n	8001642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_OscConfig+0x244>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fc56 	bl	8000ecc <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001624:	f7ff fc52 	bl	8000ecc <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e187      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d036      	beq.n	80016bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d016      	beq.n	8001684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_RCC_OscConfig+0x248>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff fc36 	bl	8000ecc <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff fc32 	bl	8000ecc <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e167      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x240>)
 8001678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x200>
 8001682:	e01b      	b.n	80016bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_RCC_OscConfig+0x248>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff fc1f 	bl	8000ecc <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	e00e      	b.n	80016b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff fc1b 	bl	8000ecc <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d907      	bls.n	80016b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e150      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	42470000 	.word	0x42470000
 80016ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1ea      	bne.n	8001692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 8097 	beq.w	80017f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ce:	4b81      	ldr	r3, [pc, #516]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10f      	bne.n	80016fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b7d      	ldr	r3, [pc, #500]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a7c      	ldr	r2, [pc, #496]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b7a      	ldr	r3, [pc, #488]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b77      	ldr	r3, [pc, #476]	; (80018d8 <HAL_RCC_OscConfig+0x474>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001706:	4b74      	ldr	r3, [pc, #464]	; (80018d8 <HAL_RCC_OscConfig+0x474>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a73      	ldr	r2, [pc, #460]	; (80018d8 <HAL_RCC_OscConfig+0x474>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff fbdb 	bl	8000ecc <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171a:	f7ff fbd7 	bl	8000ecc <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e10c      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b6a      	ldr	r3, [pc, #424]	; (80018d8 <HAL_RCC_OscConfig+0x474>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x2ea>
 8001740:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a63      	ldr	r2, [pc, #396]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
 800174c:	e01c      	b.n	8001788 <HAL_RCC_OscConfig+0x324>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x30c>
 8001756:	4b5f      	ldr	r3, [pc, #380]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	4a5e      	ldr	r2, [pc, #376]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6713      	str	r3, [r2, #112]	; 0x70
 8001762:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	4a5b      	ldr	r2, [pc, #364]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6713      	str	r3, [r2, #112]	; 0x70
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0x324>
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	4a57      	ldr	r2, [pc, #348]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6713      	str	r3, [r2, #112]	; 0x70
 800177c:	4b55      	ldr	r3, [pc, #340]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a54      	ldr	r2, [pc, #336]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 0304 	bic.w	r3, r3, #4
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d015      	beq.n	80017bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fb9c 	bl	8000ecc <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001796:	e00a      	b.n	80017ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001798:	f7ff fb98 	bl	8000ecc <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e0cb      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0ee      	beq.n	8001798 <HAL_RCC_OscConfig+0x334>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff fb86 	bl	8000ecc <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c4:	f7ff fb82 	bl	8000ecc <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0b5      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017da:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ee      	bne.n	80017c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	4a38      	ldr	r2, [pc, #224]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 80017f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a1 	beq.w	8001944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001802:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b08      	cmp	r3, #8
 800180c:	d05c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d141      	bne.n	800189a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_RCC_OscConfig+0x478>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fb56 	bl	8000ecc <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff fb52 	bl	8000ecc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e087      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	019b      	lsls	r3, r3, #6
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	3b01      	subs	r3, #1
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	491b      	ldr	r1, [pc, #108]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_RCC_OscConfig+0x478>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb2b 	bl	8000ecc <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb27 	bl	8000ecc <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e05c      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x416>
 8001898:	e054      	b.n	8001944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_RCC_OscConfig+0x478>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fb14 	bl	8000ecc <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff fb10 	bl	8000ecc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e045      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_RCC_OscConfig+0x470>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x444>
 80018c6:	e03d      	b.n	8001944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e038      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40007000 	.word	0x40007000
 80018dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_RCC_OscConfig+0x4ec>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d028      	beq.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d121      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d11a      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001910:	4013      	ands	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001918:	4293      	cmp	r3, r2
 800191a:	d111      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	3b01      	subs	r3, #1
 800192a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d107      	bne.n	8001940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0cc      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d90c      	bls.n	8001990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b65      	ldr	r3, [pc, #404]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0b8      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a8:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a58      	ldr	r2, [pc, #352]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c0:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	494d      	ldr	r1, [pc, #308]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d044      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d119      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e07f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a12:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e067      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4934      	ldr	r1, [pc, #208]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a44:	f7ff fa42 	bl	8000ecc <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff fa3e 	bl	8000ecc <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e04f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d20c      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e032      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4916      	ldr	r1, [pc, #88]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d009      	beq.n	8001ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	490e      	ldr	r1, [pc, #56]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ada:	f000 f821 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	490a      	ldr	r1, [pc, #40]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	5ccb      	ldrb	r3, [r1, r3]
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_ClockConfig+0x1c8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff f9a2 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00
 8001b10:	40023800 	.word	0x40023800
 8001b14:	08004820 	.word	0x08004820
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b24:	b094      	sub	sp, #80	; 0x50
 8001b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b38:	4b79      	ldr	r3, [pc, #484]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d00d      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x40>
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	f200 80e1 	bhi.w	8001d0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b52:	e0db      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b58:	e0db      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5a:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b5e:	e0d8      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b60:	4b6f      	ldr	r3, [pc, #444]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d063      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b92:	4622      	mov	r2, r4
 8001b94:	462b      	mov	r3, r5
 8001b96:	f04f 0000 	mov.w	r0, #0
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	0159      	lsls	r1, r3, #5
 8001ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba4:	0150      	lsls	r0, r2, #5
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4621      	mov	r1, r4
 8001bac:	1a51      	subs	r1, r2, r1
 8001bae:	6139      	str	r1, [r7, #16]
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bc4:	4659      	mov	r1, fp
 8001bc6:	018b      	lsls	r3, r1, #6
 8001bc8:	4651      	mov	r1, sl
 8001bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bce:	4651      	mov	r1, sl
 8001bd0:	018a      	lsls	r2, r1, #6
 8001bd2:	4651      	mov	r1, sl
 8001bd4:	ebb2 0801 	subs.w	r8, r2, r1
 8001bd8:	4659      	mov	r1, fp
 8001bda:	eb63 0901 	sbc.w	r9, r3, r1
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bf2:	4690      	mov	r8, r2
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	eb18 0303 	adds.w	r3, r8, r3
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	462b      	mov	r3, r5
 8001c00:	eb49 0303 	adc.w	r3, r9, r3
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c12:	4629      	mov	r1, r5
 8001c14:	024b      	lsls	r3, r1, #9
 8001c16:	4621      	mov	r1, r4
 8001c18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	024a      	lsls	r2, r1, #9
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c26:	2200      	movs	r2, #0
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c30:	f7fe fb26 	bl	8000280 <__aeabi_uldivmod>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c3c:	e058      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3e:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	099b      	lsrs	r3, r3, #6
 8001c44:	2200      	movs	r2, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	4611      	mov	r1, r2
 8001c4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c4e:	623b      	str	r3, [r7, #32]
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
 8001c54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c58:	4642      	mov	r2, r8
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	f04f 0000 	mov.w	r0, #0
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	0159      	lsls	r1, r3, #5
 8001c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c6a:	0150      	lsls	r0, r2, #5
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4641      	mov	r1, r8
 8001c72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c76:	4649      	mov	r1, r9
 8001c78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c90:	ebb2 040a 	subs.w	r4, r2, sl
 8001c94:	eb63 050b 	sbc.w	r5, r3, fp
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	00eb      	lsls	r3, r5, #3
 8001ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ca6:	00e2      	lsls	r2, r4, #3
 8001ca8:	4614      	mov	r4, r2
 8001caa:	461d      	mov	r5, r3
 8001cac:	4643      	mov	r3, r8
 8001cae:	18e3      	adds	r3, r4, r3
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	eb45 0303 	adc.w	r3, r5, r3
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	028b      	lsls	r3, r1, #10
 8001cca:	4621      	mov	r1, r4
 8001ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	028a      	lsls	r2, r1, #10
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	61fa      	str	r2, [r7, #28]
 8001ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce4:	f7fe facc 	bl	8000280 <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4613      	mov	r3, r2
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0c1b      	lsrs	r3, r3, #16
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001d00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d0a:	e002      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3750      	adds	r7, #80	; 0x50
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	00f42400 	.word	0x00f42400
 8001d28:	007a1200 	.word	0x007a1200

08001d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d48:	f7ff fff0 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0a9b      	lsrs	r3, r3, #10
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	08004830 	.word	0x08004830

08001d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d70:	f7ff ffdc 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0b5b      	lsrs	r3, r3, #13
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	08004830 	.word	0x08004830

08001d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e041      	b.n	8001e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fe76 	bl	8000aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 fac0 	bl	8002358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e041      	b.n	8001ec8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d106      	bne.n	8001e5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f839 	bl	8001ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4610      	mov	r0, r2
 8001e72:	f000 fa71 	bl	8002358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_TIM_PWM_Start+0x24>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	e022      	b.n	8001f4e <HAL_TIM_PWM_Start+0x6a>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d109      	bne.n	8001f22 <HAL_TIM_PWM_Start+0x3e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	bf14      	ite	ne
 8001f1a:	2301      	movne	r3, #1
 8001f1c:	2300      	moveq	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	e015      	b.n	8001f4e <HAL_TIM_PWM_Start+0x6a>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d109      	bne.n	8001f3c <HAL_TIM_PWM_Start+0x58>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	bf14      	ite	ne
 8001f34:	2301      	movne	r3, #1
 8001f36:	2300      	moveq	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	e008      	b.n	8001f4e <HAL_TIM_PWM_Start+0x6a>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e068      	b.n	8002028 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIM_PWM_Start+0x82>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	e013      	b.n	8001f8e <HAL_TIM_PWM_Start+0xaa>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d104      	bne.n	8001f76 <HAL_TIM_PWM_Start+0x92>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f74:	e00b      	b.n	8001f8e <HAL_TIM_PWM_Start+0xaa>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d104      	bne.n	8001f86 <HAL_TIM_PWM_Start+0xa2>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f84:	e003      	b.n	8001f8e <HAL_TIM_PWM_Start+0xaa>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	6839      	ldr	r1, [r7, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fc90 	bl	80028bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <HAL_TIM_PWM_Start+0x14c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d107      	bne.n	8001fb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_TIM_PWM_Start+0x14c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d018      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x10e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc8:	d013      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x10e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a19      	ldr	r2, [pc, #100]	; (8002034 <HAL_TIM_PWM_Start+0x150>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00e      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x10e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_TIM_PWM_Start+0x154>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d009      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x10e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a16      	ldr	r2, [pc, #88]	; (800203c <HAL_TIM_PWM_Start+0x158>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d004      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x10e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_TIM_PWM_Start+0x15c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d111      	bne.n	8002016 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b06      	cmp	r3, #6
 8002002:	d010      	beq.n	8002026 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002014:	e007      	b.n	8002026 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40010000 	.word	0x40010000
 8002034:	40000400 	.word	0x40000400
 8002038:	40000800 	.word	0x40000800
 800203c:	40000c00 	.word	0x40000c00
 8002040:	40014000 	.word	0x40014000

08002044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800205e:	2302      	movs	r3, #2
 8002060:	e0ae      	b.n	80021c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0c      	cmp	r3, #12
 800206e:	f200 809f 	bhi.w	80021b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002072:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	080020ad 	.word	0x080020ad
 800207c:	080021b1 	.word	0x080021b1
 8002080:	080021b1 	.word	0x080021b1
 8002084:	080021b1 	.word	0x080021b1
 8002088:	080020ed 	.word	0x080020ed
 800208c:	080021b1 	.word	0x080021b1
 8002090:	080021b1 	.word	0x080021b1
 8002094:	080021b1 	.word	0x080021b1
 8002098:	0800212f 	.word	0x0800212f
 800209c:	080021b1 	.word	0x080021b1
 80020a0:	080021b1 	.word	0x080021b1
 80020a4:	080021b1 	.word	0x080021b1
 80020a8:	0800216f 	.word	0x0800216f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f9dc 	bl	8002470 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0208 	orr.w	r2, r2, #8
 80020c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0204 	bic.w	r2, r2, #4
 80020d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6999      	ldr	r1, [r3, #24]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	619a      	str	r2, [r3, #24]
      break;
 80020ea:	e064      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fa22 	bl	800253c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6999      	ldr	r1, [r3, #24]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	021a      	lsls	r2, r3, #8
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	619a      	str	r2, [r3, #24]
      break;
 800212c:	e043      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fa6d 	bl	8002614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0208 	orr.w	r2, r2, #8
 8002148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0204 	bic.w	r2, r2, #4
 8002158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69d9      	ldr	r1, [r3, #28]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	61da      	str	r2, [r3, #28]
      break;
 800216c:	e023      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fab7 	bl	80026e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69d9      	ldr	r1, [r3, #28]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	021a      	lsls	r2, r3, #8
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	61da      	str	r2, [r3, #28]
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	75fb      	strb	r3, [r7, #23]
      break;
 80021b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021be:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_TIM_ConfigClockSource+0x1c>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0b4      	b.n	800234e <HAL_TIM_ConfigClockSource+0x186>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800220a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800221c:	d03e      	beq.n	800229c <HAL_TIM_ConfigClockSource+0xd4>
 800221e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002222:	f200 8087 	bhi.w	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 8002226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222a:	f000 8086 	beq.w	800233a <HAL_TIM_ConfigClockSource+0x172>
 800222e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002232:	d87f      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 8002234:	2b70      	cmp	r3, #112	; 0x70
 8002236:	d01a      	beq.n	800226e <HAL_TIM_ConfigClockSource+0xa6>
 8002238:	2b70      	cmp	r3, #112	; 0x70
 800223a:	d87b      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 800223c:	2b60      	cmp	r3, #96	; 0x60
 800223e:	d050      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002240:	2b60      	cmp	r3, #96	; 0x60
 8002242:	d877      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 8002244:	2b50      	cmp	r3, #80	; 0x50
 8002246:	d03c      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002248:	2b50      	cmp	r3, #80	; 0x50
 800224a:	d873      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d058      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x13a>
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d86f      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 8002254:	2b30      	cmp	r3, #48	; 0x30
 8002256:	d064      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x15a>
 8002258:	2b30      	cmp	r3, #48	; 0x30
 800225a:	d86b      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 800225c:	2b20      	cmp	r3, #32
 800225e:	d060      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x15a>
 8002260:	2b20      	cmp	r3, #32
 8002262:	d867      	bhi.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
 8002264:	2b00      	cmp	r3, #0
 8002266:	d05c      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x15a>
 8002268:	2b10      	cmp	r3, #16
 800226a:	d05a      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x15a>
 800226c:	e062      	b.n	8002334 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800227e:	f000 fafd 	bl	800287c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	609a      	str	r2, [r3, #8]
      break;
 800229a:	e04f      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022ac:	f000 fae6 	bl	800287c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022be:	609a      	str	r2, [r3, #8]
      break;
 80022c0:	e03c      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 fa5a 	bl	8002788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2150      	movs	r1, #80	; 0x50
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fab3 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 80022e0:	e02c      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ee:	461a      	mov	r2, r3
 80022f0:	f000 fa79 	bl	80027e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2160      	movs	r1, #96	; 0x60
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 faa3 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 8002300:	e01c      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800230e:	461a      	mov	r2, r3
 8002310:	f000 fa3a 	bl	8002788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2140      	movs	r1, #64	; 0x40
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fa93 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 8002320:	e00c      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	4610      	mov	r0, r2
 800232e:	f000 fa8a 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 8002332:	e003      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e000      	b.n	800233c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800233a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <TIM_Base_SetConfig+0xfc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00f      	beq.n	8002390 <TIM_Base_SetConfig+0x38>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d00b      	beq.n	8002390 <TIM_Base_SetConfig+0x38>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a37      	ldr	r2, [pc, #220]	; (8002458 <TIM_Base_SetConfig+0x100>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <TIM_Base_SetConfig+0x38>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a36      	ldr	r2, [pc, #216]	; (800245c <TIM_Base_SetConfig+0x104>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d003      	beq.n	8002390 <TIM_Base_SetConfig+0x38>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a35      	ldr	r2, [pc, #212]	; (8002460 <TIM_Base_SetConfig+0x108>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d108      	bne.n	80023a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <TIM_Base_SetConfig+0xfc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d01b      	beq.n	80023e2 <TIM_Base_SetConfig+0x8a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b0:	d017      	beq.n	80023e2 <TIM_Base_SetConfig+0x8a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a28      	ldr	r2, [pc, #160]	; (8002458 <TIM_Base_SetConfig+0x100>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <TIM_Base_SetConfig+0x8a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a27      	ldr	r2, [pc, #156]	; (800245c <TIM_Base_SetConfig+0x104>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00f      	beq.n	80023e2 <TIM_Base_SetConfig+0x8a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a26      	ldr	r2, [pc, #152]	; (8002460 <TIM_Base_SetConfig+0x108>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00b      	beq.n	80023e2 <TIM_Base_SetConfig+0x8a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a25      	ldr	r2, [pc, #148]	; (8002464 <TIM_Base_SetConfig+0x10c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <TIM_Base_SetConfig+0x8a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a24      	ldr	r2, [pc, #144]	; (8002468 <TIM_Base_SetConfig+0x110>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_Base_SetConfig+0x8a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a23      	ldr	r2, [pc, #140]	; (800246c <TIM_Base_SetConfig+0x114>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d108      	bne.n	80023f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <TIM_Base_SetConfig+0xfc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d103      	bne.n	8002428 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f023 0201 	bic.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	611a      	str	r2, [r3, #16]
  }
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40010000 	.word	0x40010000
 8002458:	40000400 	.word	0x40000400
 800245c:	40000800 	.word	0x40000800
 8002460:	40000c00 	.word	0x40000c00
 8002464:	40014000 	.word	0x40014000
 8002468:	40014400 	.word	0x40014400
 800246c:	40014800 	.word	0x40014800

08002470 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f023 0201 	bic.w	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f023 0302 	bic.w	r3, r3, #2
 80024b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <TIM_OC1_SetConfig+0xc8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d10c      	bne.n	80024e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f023 0308 	bic.w	r3, r3, #8
 80024d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <TIM_OC1_SetConfig+0xc8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d111      	bne.n	8002512 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	621a      	str	r2, [r3, #32]
}
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40010000 	.word	0x40010000

0800253c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f023 0210 	bic.w	r2, r3, #16
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800256a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f023 0320 	bic.w	r3, r3, #32
 8002586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <TIM_OC2_SetConfig+0xd4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d10d      	bne.n	80025b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a15      	ldr	r2, [pc, #84]	; (8002610 <TIM_OC2_SetConfig+0xd4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d113      	bne.n	80025e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	621a      	str	r2, [r3, #32]
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40010000 	.word	0x40010000

08002614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0303 	bic.w	r3, r3, #3
 800264a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800265c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <TIM_OC3_SetConfig+0xd0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10d      	bne.n	800268e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800268c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <TIM_OC3_SetConfig+0xd0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d113      	bne.n	80026be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800269c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	621a      	str	r2, [r3, #32]
}
 80026d8:	bf00      	nop
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40010000 	.word	0x40010000

080026e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	031b      	lsls	r3, r3, #12
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a10      	ldr	r2, [pc, #64]	; (8002784 <TIM_OC4_SetConfig+0x9c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d109      	bne.n	800275c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800274e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	019b      	lsls	r3, r3, #6
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000

08002788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0201 	bic.w	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f023 030a 	bic.w	r3, r3, #10
 80027c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	621a      	str	r2, [r3, #32]
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b087      	sub	sp, #28
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f023 0210 	bic.w	r2, r3, #16
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	031b      	lsls	r3, r3, #12
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002822:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	621a      	str	r2, [r3, #32]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	f043 0307 	orr.w	r3, r3, #7
 8002868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	021a      	lsls	r2, r3, #8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	431a      	orrs	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	2201      	movs	r2, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1a      	ldr	r2, [r3, #32]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	43db      	mvns	r3, r3
 80028de:	401a      	ands	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800291c:	2302      	movs	r3, #2
 800291e:	e050      	b.n	80029c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d018      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296c:	d013      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00e      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a16      	ldr	r2, [pc, #88]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a15      	ldr	r2, [pc, #84]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d004      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10c      	bne.n	80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800299c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40010000 	.word	0x40010000
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40000800 	.word	0x40000800
 80029dc:	40000c00 	.word	0x40000c00
 80029e0:	40014000 	.word	0x40014000

080029e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e042      	b.n	8002a7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe f8a6 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	; 0x24
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fa09 	bl	8002e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d175      	bne.n	8002b90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_UART_Transmit+0x2c>
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e06e      	b.n	8002b92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2221      	movs	r2, #33	; 0x21
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ac2:	f7fe fa03 	bl	8000ecc <HAL_GetTick>
 8002ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	88fa      	ldrh	r2, [r7, #6]
 8002acc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	88fa      	ldrh	r2, [r7, #6]
 8002ad2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002adc:	d108      	bne.n	8002af0 <HAL_UART_Transmit+0x6c>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e003      	b.n	8002af8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002af8:	e02e      	b.n	8002b58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f8df 	bl	8002cc8 <UART_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e03a      	b.n	8002b92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10b      	bne.n	8002b3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	3302      	adds	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e007      	b.n	8002b4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	3301      	adds	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1cb      	bne.n	8002afa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2140      	movs	r1, #64	; 0x40
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f8ab 	bl	8002cc8 <UART_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e006      	b.n	8002b92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b08a      	sub	sp, #40	; 0x28
 8002b9e:	af02      	add	r7, sp, #8
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	f040 8081 	bne.w	8002cbe <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_UART_Receive+0x2e>
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e079      	b.n	8002cc0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2222      	movs	r2, #34	; 0x22
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002be0:	f7fe f974 	bl	8000ecc <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfa:	d108      	bne.n	8002c0e <HAL_UART_Receive+0x74>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	e003      	b.n	8002c16 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c16:	e047      	b.n	8002ca8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2120      	movs	r1, #32
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f850 	bl	8002cc8 <UART_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e042      	b.n	8002cc0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10c      	bne.n	8002c5a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	3302      	adds	r3, #2
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	e01f      	b.n	8002c9a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c62:	d007      	beq.n	8002c74 <HAL_UART_Receive+0xda>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_UART_Receive+0xe8>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e008      	b.n	8002c94 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1b2      	bne.n	8002c18 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
  }
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd8:	e03b      	b.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d037      	beq.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce2:	f7fe f8f3 	bl	8000ecc <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d302      	bcc.n	8002cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e03a      	b.n	8002d72 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d023      	beq.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b80      	cmp	r3, #128	; 0x80
 8002d0e:	d020      	beq.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d01d      	beq.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d116      	bne.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f81d 	bl	8002d7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2208      	movs	r2, #8
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00f      	b.n	8002d72 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d0b4      	beq.n	8002cda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b095      	sub	sp, #84	; 0x54
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	330c      	adds	r3, #12
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8c:	e853 3f00 	ldrex	r3, [r3]
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002da2:	643a      	str	r2, [r7, #64]	; 0x40
 8002da4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002da8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002daa:	e841 2300 	strex	r3, r2, [r1]
 8002dae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e5      	bne.n	8002d82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	e853 3f00 	ldrex	r3, [r3]
 8002dc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1e5      	bne.n	8002db6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d119      	bne.n	8002e26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	330c      	adds	r3, #12
 8002df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f023 0310 	bic.w	r3, r3, #16
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e12:	61ba      	str	r2, [r7, #24]
 8002e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e5      	bne.n	8002df2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e34:	bf00      	nop
 8002e36:	3754      	adds	r7, #84	; 0x54
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b0c0      	sub	sp, #256	; 0x100
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	68d9      	ldr	r1, [r3, #12]
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	ea40 0301 	orr.w	r3, r0, r1
 8002e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e98:	f021 010c 	bic.w	r1, r1, #12
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	6999      	ldr	r1, [r3, #24]
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	ea40 0301 	orr.w	r3, r0, r1
 8002ec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b8f      	ldr	r3, [pc, #572]	; (800310c <UART_SetConfig+0x2cc>)
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d005      	beq.n	8002ee0 <UART_SetConfig+0xa0>
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b8d      	ldr	r3, [pc, #564]	; (8003110 <UART_SetConfig+0x2d0>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d104      	bne.n	8002eea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ee0:	f7fe ff44 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 8002ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ee8:	e003      	b.n	8002ef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eea:	f7fe ff2b 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 8002eee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efc:	f040 810c 	bne.w	8003118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f12:	4622      	mov	r2, r4
 8002f14:	462b      	mov	r3, r5
 8002f16:	1891      	adds	r1, r2, r2
 8002f18:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f1a:	415b      	adcs	r3, r3
 8002f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f22:	4621      	mov	r1, r4
 8002f24:	eb12 0801 	adds.w	r8, r2, r1
 8002f28:	4629      	mov	r1, r5
 8002f2a:	eb43 0901 	adc.w	r9, r3, r1
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f42:	4690      	mov	r8, r2
 8002f44:	4699      	mov	r9, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	eb18 0303 	adds.w	r3, r8, r3
 8002f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f50:	462b      	mov	r3, r5
 8002f52:	eb49 0303 	adc.w	r3, r9, r3
 8002f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f6e:	460b      	mov	r3, r1
 8002f70:	18db      	adds	r3, r3, r3
 8002f72:	653b      	str	r3, [r7, #80]	; 0x50
 8002f74:	4613      	mov	r3, r2
 8002f76:	eb42 0303 	adc.w	r3, r2, r3
 8002f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f84:	f7fd f97c 	bl	8000280 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4b61      	ldr	r3, [pc, #388]	; (8003114 <UART_SetConfig+0x2d4>)
 8002f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	011c      	lsls	r4, r3, #4
 8002f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fa8:	4642      	mov	r2, r8
 8002faa:	464b      	mov	r3, r9
 8002fac:	1891      	adds	r1, r2, r2
 8002fae:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fb0:	415b      	adcs	r3, r3
 8002fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fb8:	4641      	mov	r1, r8
 8002fba:	eb12 0a01 	adds.w	sl, r2, r1
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fd8:	4692      	mov	sl, r2
 8002fda:	469b      	mov	fp, r3
 8002fdc:	4643      	mov	r3, r8
 8002fde:	eb1a 0303 	adds.w	r3, sl, r3
 8002fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003004:	460b      	mov	r3, r1
 8003006:	18db      	adds	r3, r3, r3
 8003008:	643b      	str	r3, [r7, #64]	; 0x40
 800300a:	4613      	mov	r3, r2
 800300c:	eb42 0303 	adc.w	r3, r2, r3
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
 8003012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800301a:	f7fd f931 	bl	8000280 <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4611      	mov	r1, r2
 8003024:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <UART_SetConfig+0x2d4>)
 8003026:	fba3 2301 	umull	r2, r3, r3, r1
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2264      	movs	r2, #100	; 0x64
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	1acb      	subs	r3, r1, r3
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <UART_SetConfig+0x2d4>)
 800303c:	fba3 2302 	umull	r2, r3, r3, r2
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003048:	441c      	add	r4, r3
 800304a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800304e:	2200      	movs	r2, #0
 8003050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003054:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	1891      	adds	r1, r2, r2
 8003062:	63b9      	str	r1, [r7, #56]	; 0x38
 8003064:	415b      	adcs	r3, r3
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800306c:	4641      	mov	r1, r8
 800306e:	1851      	adds	r1, r2, r1
 8003070:	6339      	str	r1, [r7, #48]	; 0x30
 8003072:	4649      	mov	r1, r9
 8003074:	414b      	adcs	r3, r1
 8003076:	637b      	str	r3, [r7, #52]	; 0x34
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003084:	4659      	mov	r1, fp
 8003086:	00cb      	lsls	r3, r1, #3
 8003088:	4651      	mov	r1, sl
 800308a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800308e:	4651      	mov	r1, sl
 8003090:	00ca      	lsls	r2, r1, #3
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	4603      	mov	r3, r0
 8003098:	4642      	mov	r2, r8
 800309a:	189b      	adds	r3, r3, r2
 800309c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030a0:	464b      	mov	r3, r9
 80030a2:	460a      	mov	r2, r1
 80030a4:	eb42 0303 	adc.w	r3, r2, r3
 80030a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030c0:	460b      	mov	r3, r1
 80030c2:	18db      	adds	r3, r3, r3
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c6:	4613      	mov	r3, r2
 80030c8:	eb42 0303 	adc.w	r3, r2, r3
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030d6:	f7fd f8d3 	bl	8000280 <__aeabi_uldivmod>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <UART_SetConfig+0x2d4>)
 80030e0:	fba3 1302 	umull	r1, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	2164      	movs	r1, #100	; 0x64
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	3332      	adds	r3, #50	; 0x32
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <UART_SetConfig+0x2d4>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	f003 0207 	and.w	r2, r3, #7
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4422      	add	r2, r4
 8003106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003108:	e106      	b.n	8003318 <UART_SetConfig+0x4d8>
 800310a:	bf00      	nop
 800310c:	40011000 	.word	0x40011000
 8003110:	40011400 	.word	0x40011400
 8003114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311c:	2200      	movs	r2, #0
 800311e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003122:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800312a:	4642      	mov	r2, r8
 800312c:	464b      	mov	r3, r9
 800312e:	1891      	adds	r1, r2, r2
 8003130:	6239      	str	r1, [r7, #32]
 8003132:	415b      	adcs	r3, r3
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800313a:	4641      	mov	r1, r8
 800313c:	1854      	adds	r4, r2, r1
 800313e:	4649      	mov	r1, r9
 8003140:	eb43 0501 	adc.w	r5, r3, r1
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	00eb      	lsls	r3, r5, #3
 800314e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003152:	00e2      	lsls	r2, r4, #3
 8003154:	4614      	mov	r4, r2
 8003156:	461d      	mov	r5, r3
 8003158:	4643      	mov	r3, r8
 800315a:	18e3      	adds	r3, r4, r3
 800315c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003160:	464b      	mov	r3, r9
 8003162:	eb45 0303 	adc.w	r3, r5, r3
 8003166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003186:	4629      	mov	r1, r5
 8003188:	008b      	lsls	r3, r1, #2
 800318a:	4621      	mov	r1, r4
 800318c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003190:	4621      	mov	r1, r4
 8003192:	008a      	lsls	r2, r1, #2
 8003194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003198:	f7fd f872 	bl	8000280 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4b60      	ldr	r3, [pc, #384]	; (8003324 <UART_SetConfig+0x4e4>)
 80031a2:	fba3 2302 	umull	r2, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	011c      	lsls	r4, r3, #4
 80031aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031bc:	4642      	mov	r2, r8
 80031be:	464b      	mov	r3, r9
 80031c0:	1891      	adds	r1, r2, r2
 80031c2:	61b9      	str	r1, [r7, #24]
 80031c4:	415b      	adcs	r3, r3
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031cc:	4641      	mov	r1, r8
 80031ce:	1851      	adds	r1, r2, r1
 80031d0:	6139      	str	r1, [r7, #16]
 80031d2:	4649      	mov	r1, r9
 80031d4:	414b      	adcs	r3, r1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031e4:	4659      	mov	r1, fp
 80031e6:	00cb      	lsls	r3, r1, #3
 80031e8:	4651      	mov	r1, sl
 80031ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ee:	4651      	mov	r1, sl
 80031f0:	00ca      	lsls	r2, r1, #3
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	4642      	mov	r2, r8
 80031fa:	189b      	adds	r3, r3, r2
 80031fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003200:	464b      	mov	r3, r9
 8003202:	460a      	mov	r2, r1
 8003204:	eb42 0303 	adc.w	r3, r2, r3
 8003208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	67bb      	str	r3, [r7, #120]	; 0x78
 8003216:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003224:	4649      	mov	r1, r9
 8003226:	008b      	lsls	r3, r1, #2
 8003228:	4641      	mov	r1, r8
 800322a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322e:	4641      	mov	r1, r8
 8003230:	008a      	lsls	r2, r1, #2
 8003232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003236:	f7fd f823 	bl	8000280 <__aeabi_uldivmod>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4611      	mov	r1, r2
 8003240:	4b38      	ldr	r3, [pc, #224]	; (8003324 <UART_SetConfig+0x4e4>)
 8003242:	fba3 2301 	umull	r2, r3, r3, r1
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2264      	movs	r2, #100	; 0x64
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	1acb      	subs	r3, r1, r3
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	3332      	adds	r3, #50	; 0x32
 8003254:	4a33      	ldr	r2, [pc, #204]	; (8003324 <UART_SetConfig+0x4e4>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003260:	441c      	add	r4, r3
 8003262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003266:	2200      	movs	r2, #0
 8003268:	673b      	str	r3, [r7, #112]	; 0x70
 800326a:	677a      	str	r2, [r7, #116]	; 0x74
 800326c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	1891      	adds	r1, r2, r2
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	415b      	adcs	r3, r3
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003280:	4641      	mov	r1, r8
 8003282:	1851      	adds	r1, r2, r1
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	4649      	mov	r1, r9
 8003288:	414b      	adcs	r3, r1
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003298:	4659      	mov	r1, fp
 800329a:	00cb      	lsls	r3, r1, #3
 800329c:	4651      	mov	r1, sl
 800329e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032a2:	4651      	mov	r1, sl
 80032a4:	00ca      	lsls	r2, r1, #3
 80032a6:	4610      	mov	r0, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	4642      	mov	r2, r8
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032b2:	464b      	mov	r3, r9
 80032b4:	460a      	mov	r2, r1
 80032b6:	eb42 0303 	adc.w	r3, r2, r3
 80032ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	663b      	str	r3, [r7, #96]	; 0x60
 80032c6:	667a      	str	r2, [r7, #100]	; 0x64
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032d4:	4649      	mov	r1, r9
 80032d6:	008b      	lsls	r3, r1, #2
 80032d8:	4641      	mov	r1, r8
 80032da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032de:	4641      	mov	r1, r8
 80032e0:	008a      	lsls	r2, r1, #2
 80032e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032e6:	f7fc ffcb 	bl	8000280 <__aeabi_uldivmod>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <UART_SetConfig+0x4e4>)
 80032f0:	fba3 1302 	umull	r1, r3, r3, r2
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	2164      	movs	r1, #100	; 0x64
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	3332      	adds	r3, #50	; 0x32
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <UART_SetConfig+0x4e4>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4422      	add	r2, r4
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800331e:	46bd      	mov	sp, r7
 8003320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003324:	51eb851f 	.word	0x51eb851f

08003328 <std>:
 8003328:	2300      	movs	r3, #0
 800332a:	b510      	push	{r4, lr}
 800332c:	4604      	mov	r4, r0
 800332e:	e9c0 3300 	strd	r3, r3, [r0]
 8003332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003336:	6083      	str	r3, [r0, #8]
 8003338:	8181      	strh	r1, [r0, #12]
 800333a:	6643      	str	r3, [r0, #100]	; 0x64
 800333c:	81c2      	strh	r2, [r0, #14]
 800333e:	6183      	str	r3, [r0, #24]
 8003340:	4619      	mov	r1, r3
 8003342:	2208      	movs	r2, #8
 8003344:	305c      	adds	r0, #92	; 0x5c
 8003346:	f000 fac5 	bl	80038d4 <memset>
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <std+0x58>)
 800334c:	6263      	str	r3, [r4, #36]	; 0x24
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <std+0x5c>)
 8003350:	62a3      	str	r3, [r4, #40]	; 0x28
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <std+0x60>)
 8003354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <std+0x64>)
 8003358:	6323      	str	r3, [r4, #48]	; 0x30
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <std+0x68>)
 800335c:	6224      	str	r4, [r4, #32]
 800335e:	429c      	cmp	r4, r3
 8003360:	d006      	beq.n	8003370 <std+0x48>
 8003362:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003366:	4294      	cmp	r4, r2
 8003368:	d002      	beq.n	8003370 <std+0x48>
 800336a:	33d0      	adds	r3, #208	; 0xd0
 800336c:	429c      	cmp	r4, r3
 800336e:	d105      	bne.n	800337c <std+0x54>
 8003370:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003378:	f000 bb24 	b.w	80039c4 <__retarget_lock_init_recursive>
 800337c:	bd10      	pop	{r4, pc}
 800337e:	bf00      	nop
 8003380:	08003725 	.word	0x08003725
 8003384:	08003747 	.word	0x08003747
 8003388:	0800377f 	.word	0x0800377f
 800338c:	080037a3 	.word	0x080037a3
 8003390:	2000011c 	.word	0x2000011c

08003394 <stdio_exit_handler>:
 8003394:	4a02      	ldr	r2, [pc, #8]	; (80033a0 <stdio_exit_handler+0xc>)
 8003396:	4903      	ldr	r1, [pc, #12]	; (80033a4 <stdio_exit_handler+0x10>)
 8003398:	4803      	ldr	r0, [pc, #12]	; (80033a8 <stdio_exit_handler+0x14>)
 800339a:	f000 b869 	b.w	8003470 <_fwalk_sglue>
 800339e:	bf00      	nop
 80033a0:	2000000c 	.word	0x2000000c
 80033a4:	08004531 	.word	0x08004531
 80033a8:	20000018 	.word	0x20000018

080033ac <cleanup_stdio>:
 80033ac:	6841      	ldr	r1, [r0, #4]
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <cleanup_stdio+0x34>)
 80033b0:	4299      	cmp	r1, r3
 80033b2:	b510      	push	{r4, lr}
 80033b4:	4604      	mov	r4, r0
 80033b6:	d001      	beq.n	80033bc <cleanup_stdio+0x10>
 80033b8:	f001 f8ba 	bl	8004530 <_fflush_r>
 80033bc:	68a1      	ldr	r1, [r4, #8]
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <cleanup_stdio+0x38>)
 80033c0:	4299      	cmp	r1, r3
 80033c2:	d002      	beq.n	80033ca <cleanup_stdio+0x1e>
 80033c4:	4620      	mov	r0, r4
 80033c6:	f001 f8b3 	bl	8004530 <_fflush_r>
 80033ca:	68e1      	ldr	r1, [r4, #12]
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <cleanup_stdio+0x3c>)
 80033ce:	4299      	cmp	r1, r3
 80033d0:	d004      	beq.n	80033dc <cleanup_stdio+0x30>
 80033d2:	4620      	mov	r0, r4
 80033d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d8:	f001 b8aa 	b.w	8004530 <_fflush_r>
 80033dc:	bd10      	pop	{r4, pc}
 80033de:	bf00      	nop
 80033e0:	2000011c 	.word	0x2000011c
 80033e4:	20000184 	.word	0x20000184
 80033e8:	200001ec 	.word	0x200001ec

080033ec <global_stdio_init.part.0>:
 80033ec:	b510      	push	{r4, lr}
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <global_stdio_init.part.0+0x30>)
 80033f0:	4c0b      	ldr	r4, [pc, #44]	; (8003420 <global_stdio_init.part.0+0x34>)
 80033f2:	4a0c      	ldr	r2, [pc, #48]	; (8003424 <global_stdio_init.part.0+0x38>)
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	4620      	mov	r0, r4
 80033f8:	2200      	movs	r2, #0
 80033fa:	2104      	movs	r1, #4
 80033fc:	f7ff ff94 	bl	8003328 <std>
 8003400:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003404:	2201      	movs	r2, #1
 8003406:	2109      	movs	r1, #9
 8003408:	f7ff ff8e 	bl	8003328 <std>
 800340c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003410:	2202      	movs	r2, #2
 8003412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003416:	2112      	movs	r1, #18
 8003418:	f7ff bf86 	b.w	8003328 <std>
 800341c:	20000254 	.word	0x20000254
 8003420:	2000011c 	.word	0x2000011c
 8003424:	08003395 	.word	0x08003395

08003428 <__sfp_lock_acquire>:
 8003428:	4801      	ldr	r0, [pc, #4]	; (8003430 <__sfp_lock_acquire+0x8>)
 800342a:	f000 bacc 	b.w	80039c6 <__retarget_lock_acquire_recursive>
 800342e:	bf00      	nop
 8003430:	2000025d 	.word	0x2000025d

08003434 <__sfp_lock_release>:
 8003434:	4801      	ldr	r0, [pc, #4]	; (800343c <__sfp_lock_release+0x8>)
 8003436:	f000 bac7 	b.w	80039c8 <__retarget_lock_release_recursive>
 800343a:	bf00      	nop
 800343c:	2000025d 	.word	0x2000025d

08003440 <__sinit>:
 8003440:	b510      	push	{r4, lr}
 8003442:	4604      	mov	r4, r0
 8003444:	f7ff fff0 	bl	8003428 <__sfp_lock_acquire>
 8003448:	6a23      	ldr	r3, [r4, #32]
 800344a:	b11b      	cbz	r3, 8003454 <__sinit+0x14>
 800344c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003450:	f7ff bff0 	b.w	8003434 <__sfp_lock_release>
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <__sinit+0x28>)
 8003456:	6223      	str	r3, [r4, #32]
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <__sinit+0x2c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f5      	bne.n	800344c <__sinit+0xc>
 8003460:	f7ff ffc4 	bl	80033ec <global_stdio_init.part.0>
 8003464:	e7f2      	b.n	800344c <__sinit+0xc>
 8003466:	bf00      	nop
 8003468:	080033ad 	.word	0x080033ad
 800346c:	20000254 	.word	0x20000254

08003470 <_fwalk_sglue>:
 8003470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003474:	4607      	mov	r7, r0
 8003476:	4688      	mov	r8, r1
 8003478:	4614      	mov	r4, r2
 800347a:	2600      	movs	r6, #0
 800347c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003480:	f1b9 0901 	subs.w	r9, r9, #1
 8003484:	d505      	bpl.n	8003492 <_fwalk_sglue+0x22>
 8003486:	6824      	ldr	r4, [r4, #0]
 8003488:	2c00      	cmp	r4, #0
 800348a:	d1f7      	bne.n	800347c <_fwalk_sglue+0xc>
 800348c:	4630      	mov	r0, r6
 800348e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003492:	89ab      	ldrh	r3, [r5, #12]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d907      	bls.n	80034a8 <_fwalk_sglue+0x38>
 8003498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800349c:	3301      	adds	r3, #1
 800349e:	d003      	beq.n	80034a8 <_fwalk_sglue+0x38>
 80034a0:	4629      	mov	r1, r5
 80034a2:	4638      	mov	r0, r7
 80034a4:	47c0      	blx	r8
 80034a6:	4306      	orrs	r6, r0
 80034a8:	3568      	adds	r5, #104	; 0x68
 80034aa:	e7e9      	b.n	8003480 <_fwalk_sglue+0x10>

080034ac <iprintf>:
 80034ac:	b40f      	push	{r0, r1, r2, r3}
 80034ae:	b507      	push	{r0, r1, r2, lr}
 80034b0:	4906      	ldr	r1, [pc, #24]	; (80034cc <iprintf+0x20>)
 80034b2:	ab04      	add	r3, sp, #16
 80034b4:	6808      	ldr	r0, [r1, #0]
 80034b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80034ba:	6881      	ldr	r1, [r0, #8]
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	f000 fd07 	bl	8003ed0 <_vfiprintf_r>
 80034c2:	b003      	add	sp, #12
 80034c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034c8:	b004      	add	sp, #16
 80034ca:	4770      	bx	lr
 80034cc:	20000064 	.word	0x20000064

080034d0 <_puts_r>:
 80034d0:	6a03      	ldr	r3, [r0, #32]
 80034d2:	b570      	push	{r4, r5, r6, lr}
 80034d4:	6884      	ldr	r4, [r0, #8]
 80034d6:	4605      	mov	r5, r0
 80034d8:	460e      	mov	r6, r1
 80034da:	b90b      	cbnz	r3, 80034e0 <_puts_r+0x10>
 80034dc:	f7ff ffb0 	bl	8003440 <__sinit>
 80034e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034e2:	07db      	lsls	r3, r3, #31
 80034e4:	d405      	bmi.n	80034f2 <_puts_r+0x22>
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	0598      	lsls	r0, r3, #22
 80034ea:	d402      	bmi.n	80034f2 <_puts_r+0x22>
 80034ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ee:	f000 fa6a 	bl	80039c6 <__retarget_lock_acquire_recursive>
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	0719      	lsls	r1, r3, #28
 80034f6:	d513      	bpl.n	8003520 <_puts_r+0x50>
 80034f8:	6923      	ldr	r3, [r4, #16]
 80034fa:	b18b      	cbz	r3, 8003520 <_puts_r+0x50>
 80034fc:	3e01      	subs	r6, #1
 80034fe:	68a3      	ldr	r3, [r4, #8]
 8003500:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003504:	3b01      	subs	r3, #1
 8003506:	60a3      	str	r3, [r4, #8]
 8003508:	b9e9      	cbnz	r1, 8003546 <_puts_r+0x76>
 800350a:	2b00      	cmp	r3, #0
 800350c:	da2e      	bge.n	800356c <_puts_r+0x9c>
 800350e:	4622      	mov	r2, r4
 8003510:	210a      	movs	r1, #10
 8003512:	4628      	mov	r0, r5
 8003514:	f000 f949 	bl	80037aa <__swbuf_r>
 8003518:	3001      	adds	r0, #1
 800351a:	d007      	beq.n	800352c <_puts_r+0x5c>
 800351c:	250a      	movs	r5, #10
 800351e:	e007      	b.n	8003530 <_puts_r+0x60>
 8003520:	4621      	mov	r1, r4
 8003522:	4628      	mov	r0, r5
 8003524:	f000 f97e 	bl	8003824 <__swsetup_r>
 8003528:	2800      	cmp	r0, #0
 800352a:	d0e7      	beq.n	80034fc <_puts_r+0x2c>
 800352c:	f04f 35ff 	mov.w	r5, #4294967295
 8003530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003532:	07da      	lsls	r2, r3, #31
 8003534:	d405      	bmi.n	8003542 <_puts_r+0x72>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	059b      	lsls	r3, r3, #22
 800353a:	d402      	bmi.n	8003542 <_puts_r+0x72>
 800353c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800353e:	f000 fa43 	bl	80039c8 <__retarget_lock_release_recursive>
 8003542:	4628      	mov	r0, r5
 8003544:	bd70      	pop	{r4, r5, r6, pc}
 8003546:	2b00      	cmp	r3, #0
 8003548:	da04      	bge.n	8003554 <_puts_r+0x84>
 800354a:	69a2      	ldr	r2, [r4, #24]
 800354c:	429a      	cmp	r2, r3
 800354e:	dc06      	bgt.n	800355e <_puts_r+0x8e>
 8003550:	290a      	cmp	r1, #10
 8003552:	d004      	beq.n	800355e <_puts_r+0x8e>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	6022      	str	r2, [r4, #0]
 800355a:	7019      	strb	r1, [r3, #0]
 800355c:	e7cf      	b.n	80034fe <_puts_r+0x2e>
 800355e:	4622      	mov	r2, r4
 8003560:	4628      	mov	r0, r5
 8003562:	f000 f922 	bl	80037aa <__swbuf_r>
 8003566:	3001      	adds	r0, #1
 8003568:	d1c9      	bne.n	80034fe <_puts_r+0x2e>
 800356a:	e7df      	b.n	800352c <_puts_r+0x5c>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	250a      	movs	r5, #10
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	6022      	str	r2, [r4, #0]
 8003574:	701d      	strb	r5, [r3, #0]
 8003576:	e7db      	b.n	8003530 <_puts_r+0x60>

08003578 <puts>:
 8003578:	4b02      	ldr	r3, [pc, #8]	; (8003584 <puts+0xc>)
 800357a:	4601      	mov	r1, r0
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	f7ff bfa7 	b.w	80034d0 <_puts_r>
 8003582:	bf00      	nop
 8003584:	20000064 	.word	0x20000064

08003588 <setvbuf>:
 8003588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800358c:	461d      	mov	r5, r3
 800358e:	4b54      	ldr	r3, [pc, #336]	; (80036e0 <setvbuf+0x158>)
 8003590:	681f      	ldr	r7, [r3, #0]
 8003592:	4604      	mov	r4, r0
 8003594:	460e      	mov	r6, r1
 8003596:	4690      	mov	r8, r2
 8003598:	b127      	cbz	r7, 80035a4 <setvbuf+0x1c>
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	b913      	cbnz	r3, 80035a4 <setvbuf+0x1c>
 800359e:	4638      	mov	r0, r7
 80035a0:	f7ff ff4e 	bl	8003440 <__sinit>
 80035a4:	f1b8 0f02 	cmp.w	r8, #2
 80035a8:	d006      	beq.n	80035b8 <setvbuf+0x30>
 80035aa:	f1b8 0f01 	cmp.w	r8, #1
 80035ae:	f200 8094 	bhi.w	80036da <setvbuf+0x152>
 80035b2:	2d00      	cmp	r5, #0
 80035b4:	f2c0 8091 	blt.w	80036da <setvbuf+0x152>
 80035b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035ba:	07da      	lsls	r2, r3, #31
 80035bc:	d405      	bmi.n	80035ca <setvbuf+0x42>
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	059b      	lsls	r3, r3, #22
 80035c2:	d402      	bmi.n	80035ca <setvbuf+0x42>
 80035c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035c6:	f000 f9fe 	bl	80039c6 <__retarget_lock_acquire_recursive>
 80035ca:	4621      	mov	r1, r4
 80035cc:	4638      	mov	r0, r7
 80035ce:	f000 ffaf 	bl	8004530 <_fflush_r>
 80035d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035d4:	b141      	cbz	r1, 80035e8 <setvbuf+0x60>
 80035d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035da:	4299      	cmp	r1, r3
 80035dc:	d002      	beq.n	80035e4 <setvbuf+0x5c>
 80035de:	4638      	mov	r0, r7
 80035e0:	f000 f9f4 	bl	80039cc <_free_r>
 80035e4:	2300      	movs	r3, #0
 80035e6:	6363      	str	r3, [r4, #52]	; 0x34
 80035e8:	2300      	movs	r3, #0
 80035ea:	61a3      	str	r3, [r4, #24]
 80035ec:	6063      	str	r3, [r4, #4]
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	0618      	lsls	r0, r3, #24
 80035f2:	d503      	bpl.n	80035fc <setvbuf+0x74>
 80035f4:	6921      	ldr	r1, [r4, #16]
 80035f6:	4638      	mov	r0, r7
 80035f8:	f000 f9e8 	bl	80039cc <_free_r>
 80035fc:	89a3      	ldrh	r3, [r4, #12]
 80035fe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	f1b8 0f02 	cmp.w	r8, #2
 800360a:	81a3      	strh	r3, [r4, #12]
 800360c:	d05f      	beq.n	80036ce <setvbuf+0x146>
 800360e:	ab01      	add	r3, sp, #4
 8003610:	466a      	mov	r2, sp
 8003612:	4621      	mov	r1, r4
 8003614:	4638      	mov	r0, r7
 8003616:	f000 ffb3 	bl	8004580 <__swhatbuf_r>
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	4318      	orrs	r0, r3
 800361e:	81a0      	strh	r0, [r4, #12]
 8003620:	bb2d      	cbnz	r5, 800366e <setvbuf+0xe6>
 8003622:	9d00      	ldr	r5, [sp, #0]
 8003624:	4628      	mov	r0, r5
 8003626:	f000 fa1d 	bl	8003a64 <malloc>
 800362a:	4606      	mov	r6, r0
 800362c:	2800      	cmp	r0, #0
 800362e:	d150      	bne.n	80036d2 <setvbuf+0x14a>
 8003630:	f8dd 9000 	ldr.w	r9, [sp]
 8003634:	45a9      	cmp	r9, r5
 8003636:	d13e      	bne.n	80036b6 <setvbuf+0x12e>
 8003638:	f04f 35ff 	mov.w	r5, #4294967295
 800363c:	2200      	movs	r2, #0
 800363e:	60a2      	str	r2, [r4, #8]
 8003640:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003644:	6022      	str	r2, [r4, #0]
 8003646:	6122      	str	r2, [r4, #16]
 8003648:	2201      	movs	r2, #1
 800364a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800364e:	6162      	str	r2, [r4, #20]
 8003650:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003652:	f043 0302 	orr.w	r3, r3, #2
 8003656:	07d1      	lsls	r1, r2, #31
 8003658:	81a3      	strh	r3, [r4, #12]
 800365a:	d404      	bmi.n	8003666 <setvbuf+0xde>
 800365c:	059b      	lsls	r3, r3, #22
 800365e:	d402      	bmi.n	8003666 <setvbuf+0xde>
 8003660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003662:	f000 f9b1 	bl	80039c8 <__retarget_lock_release_recursive>
 8003666:	4628      	mov	r0, r5
 8003668:	b003      	add	sp, #12
 800366a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800366e:	2e00      	cmp	r6, #0
 8003670:	d0d8      	beq.n	8003624 <setvbuf+0x9c>
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	b913      	cbnz	r3, 800367c <setvbuf+0xf4>
 8003676:	4638      	mov	r0, r7
 8003678:	f7ff fee2 	bl	8003440 <__sinit>
 800367c:	f1b8 0f01 	cmp.w	r8, #1
 8003680:	bf08      	it	eq
 8003682:	89a3      	ldrheq	r3, [r4, #12]
 8003684:	6026      	str	r6, [r4, #0]
 8003686:	bf04      	itt	eq
 8003688:	f043 0301 	orreq.w	r3, r3, #1
 800368c:	81a3      	strheq	r3, [r4, #12]
 800368e:	89a3      	ldrh	r3, [r4, #12]
 8003690:	f013 0208 	ands.w	r2, r3, #8
 8003694:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003698:	d01d      	beq.n	80036d6 <setvbuf+0x14e>
 800369a:	07da      	lsls	r2, r3, #31
 800369c:	bf41      	itttt	mi
 800369e:	2200      	movmi	r2, #0
 80036a0:	426d      	negmi	r5, r5
 80036a2:	60a2      	strmi	r2, [r4, #8]
 80036a4:	61a5      	strmi	r5, [r4, #24]
 80036a6:	bf58      	it	pl
 80036a8:	60a5      	strpl	r5, [r4, #8]
 80036aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80036ac:	f015 0501 	ands.w	r5, r5, #1
 80036b0:	d0d4      	beq.n	800365c <setvbuf+0xd4>
 80036b2:	2500      	movs	r5, #0
 80036b4:	e7d7      	b.n	8003666 <setvbuf+0xde>
 80036b6:	4648      	mov	r0, r9
 80036b8:	f000 f9d4 	bl	8003a64 <malloc>
 80036bc:	4606      	mov	r6, r0
 80036be:	2800      	cmp	r0, #0
 80036c0:	d0ba      	beq.n	8003638 <setvbuf+0xb0>
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c8:	81a3      	strh	r3, [r4, #12]
 80036ca:	464d      	mov	r5, r9
 80036cc:	e7d1      	b.n	8003672 <setvbuf+0xea>
 80036ce:	2500      	movs	r5, #0
 80036d0:	e7b4      	b.n	800363c <setvbuf+0xb4>
 80036d2:	46a9      	mov	r9, r5
 80036d4:	e7f5      	b.n	80036c2 <setvbuf+0x13a>
 80036d6:	60a2      	str	r2, [r4, #8]
 80036d8:	e7e7      	b.n	80036aa <setvbuf+0x122>
 80036da:	f04f 35ff 	mov.w	r5, #4294967295
 80036de:	e7c2      	b.n	8003666 <setvbuf+0xde>
 80036e0:	20000064 	.word	0x20000064

080036e4 <siprintf>:
 80036e4:	b40e      	push	{r1, r2, r3}
 80036e6:	b500      	push	{lr}
 80036e8:	b09c      	sub	sp, #112	; 0x70
 80036ea:	ab1d      	add	r3, sp, #116	; 0x74
 80036ec:	9002      	str	r0, [sp, #8]
 80036ee:	9006      	str	r0, [sp, #24]
 80036f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036f4:	4809      	ldr	r0, [pc, #36]	; (800371c <siprintf+0x38>)
 80036f6:	9107      	str	r1, [sp, #28]
 80036f8:	9104      	str	r1, [sp, #16]
 80036fa:	4909      	ldr	r1, [pc, #36]	; (8003720 <siprintf+0x3c>)
 80036fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003700:	9105      	str	r1, [sp, #20]
 8003702:	6800      	ldr	r0, [r0, #0]
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	a902      	add	r1, sp, #8
 8003708:	f000 faba 	bl	8003c80 <_svfiprintf_r>
 800370c:	9b02      	ldr	r3, [sp, #8]
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	b01c      	add	sp, #112	; 0x70
 8003714:	f85d eb04 	ldr.w	lr, [sp], #4
 8003718:	b003      	add	sp, #12
 800371a:	4770      	bx	lr
 800371c:	20000064 	.word	0x20000064
 8003720:	ffff0208 	.word	0xffff0208

08003724 <__sread>:
 8003724:	b510      	push	{r4, lr}
 8003726:	460c      	mov	r4, r1
 8003728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800372c:	f000 f8fc 	bl	8003928 <_read_r>
 8003730:	2800      	cmp	r0, #0
 8003732:	bfab      	itete	ge
 8003734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003736:	89a3      	ldrhlt	r3, [r4, #12]
 8003738:	181b      	addge	r3, r3, r0
 800373a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800373e:	bfac      	ite	ge
 8003740:	6563      	strge	r3, [r4, #84]	; 0x54
 8003742:	81a3      	strhlt	r3, [r4, #12]
 8003744:	bd10      	pop	{r4, pc}

08003746 <__swrite>:
 8003746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800374a:	461f      	mov	r7, r3
 800374c:	898b      	ldrh	r3, [r1, #12]
 800374e:	05db      	lsls	r3, r3, #23
 8003750:	4605      	mov	r5, r0
 8003752:	460c      	mov	r4, r1
 8003754:	4616      	mov	r6, r2
 8003756:	d505      	bpl.n	8003764 <__swrite+0x1e>
 8003758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800375c:	2302      	movs	r3, #2
 800375e:	2200      	movs	r2, #0
 8003760:	f000 f8d0 	bl	8003904 <_lseek_r>
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800376a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800376e:	81a3      	strh	r3, [r4, #12]
 8003770:	4632      	mov	r2, r6
 8003772:	463b      	mov	r3, r7
 8003774:	4628      	mov	r0, r5
 8003776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800377a:	f000 b8e7 	b.w	800394c <_write_r>

0800377e <__sseek>:
 800377e:	b510      	push	{r4, lr}
 8003780:	460c      	mov	r4, r1
 8003782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003786:	f000 f8bd 	bl	8003904 <_lseek_r>
 800378a:	1c43      	adds	r3, r0, #1
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	bf15      	itete	ne
 8003790:	6560      	strne	r0, [r4, #84]	; 0x54
 8003792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800379a:	81a3      	strheq	r3, [r4, #12]
 800379c:	bf18      	it	ne
 800379e:	81a3      	strhne	r3, [r4, #12]
 80037a0:	bd10      	pop	{r4, pc}

080037a2 <__sclose>:
 80037a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a6:	f000 b89d 	b.w	80038e4 <_close_r>

080037aa <__swbuf_r>:
 80037aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ac:	460e      	mov	r6, r1
 80037ae:	4614      	mov	r4, r2
 80037b0:	4605      	mov	r5, r0
 80037b2:	b118      	cbz	r0, 80037bc <__swbuf_r+0x12>
 80037b4:	6a03      	ldr	r3, [r0, #32]
 80037b6:	b90b      	cbnz	r3, 80037bc <__swbuf_r+0x12>
 80037b8:	f7ff fe42 	bl	8003440 <__sinit>
 80037bc:	69a3      	ldr	r3, [r4, #24]
 80037be:	60a3      	str	r3, [r4, #8]
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	071a      	lsls	r2, r3, #28
 80037c4:	d525      	bpl.n	8003812 <__swbuf_r+0x68>
 80037c6:	6923      	ldr	r3, [r4, #16]
 80037c8:	b31b      	cbz	r3, 8003812 <__swbuf_r+0x68>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	6922      	ldr	r2, [r4, #16]
 80037ce:	1a98      	subs	r0, r3, r2
 80037d0:	6963      	ldr	r3, [r4, #20]
 80037d2:	b2f6      	uxtb	r6, r6
 80037d4:	4283      	cmp	r3, r0
 80037d6:	4637      	mov	r7, r6
 80037d8:	dc04      	bgt.n	80037e4 <__swbuf_r+0x3a>
 80037da:	4621      	mov	r1, r4
 80037dc:	4628      	mov	r0, r5
 80037de:	f000 fea7 	bl	8004530 <_fflush_r>
 80037e2:	b9e0      	cbnz	r0, 800381e <__swbuf_r+0x74>
 80037e4:	68a3      	ldr	r3, [r4, #8]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	60a3      	str	r3, [r4, #8]
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	6022      	str	r2, [r4, #0]
 80037f0:	701e      	strb	r6, [r3, #0]
 80037f2:	6962      	ldr	r2, [r4, #20]
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d004      	beq.n	8003804 <__swbuf_r+0x5a>
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	07db      	lsls	r3, r3, #31
 80037fe:	d506      	bpl.n	800380e <__swbuf_r+0x64>
 8003800:	2e0a      	cmp	r6, #10
 8003802:	d104      	bne.n	800380e <__swbuf_r+0x64>
 8003804:	4621      	mov	r1, r4
 8003806:	4628      	mov	r0, r5
 8003808:	f000 fe92 	bl	8004530 <_fflush_r>
 800380c:	b938      	cbnz	r0, 800381e <__swbuf_r+0x74>
 800380e:	4638      	mov	r0, r7
 8003810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003812:	4621      	mov	r1, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f000 f805 	bl	8003824 <__swsetup_r>
 800381a:	2800      	cmp	r0, #0
 800381c:	d0d5      	beq.n	80037ca <__swbuf_r+0x20>
 800381e:	f04f 37ff 	mov.w	r7, #4294967295
 8003822:	e7f4      	b.n	800380e <__swbuf_r+0x64>

08003824 <__swsetup_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <__swsetup_r+0xac>)
 8003828:	4605      	mov	r5, r0
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	460c      	mov	r4, r1
 800382e:	b118      	cbz	r0, 8003838 <__swsetup_r+0x14>
 8003830:	6a03      	ldr	r3, [r0, #32]
 8003832:	b90b      	cbnz	r3, 8003838 <__swsetup_r+0x14>
 8003834:	f7ff fe04 	bl	8003440 <__sinit>
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800383e:	0718      	lsls	r0, r3, #28
 8003840:	d422      	bmi.n	8003888 <__swsetup_r+0x64>
 8003842:	06d9      	lsls	r1, r3, #27
 8003844:	d407      	bmi.n	8003856 <__swsetup_r+0x32>
 8003846:	2309      	movs	r3, #9
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	e034      	b.n	80038c0 <__swsetup_r+0x9c>
 8003856:	0758      	lsls	r0, r3, #29
 8003858:	d512      	bpl.n	8003880 <__swsetup_r+0x5c>
 800385a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800385c:	b141      	cbz	r1, 8003870 <__swsetup_r+0x4c>
 800385e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003862:	4299      	cmp	r1, r3
 8003864:	d002      	beq.n	800386c <__swsetup_r+0x48>
 8003866:	4628      	mov	r0, r5
 8003868:	f000 f8b0 	bl	80039cc <_free_r>
 800386c:	2300      	movs	r3, #0
 800386e:	6363      	str	r3, [r4, #52]	; 0x34
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003876:	81a3      	strh	r3, [r4, #12]
 8003878:	2300      	movs	r3, #0
 800387a:	6063      	str	r3, [r4, #4]
 800387c:	6923      	ldr	r3, [r4, #16]
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	f043 0308 	orr.w	r3, r3, #8
 8003886:	81a3      	strh	r3, [r4, #12]
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	b94b      	cbnz	r3, 80038a0 <__swsetup_r+0x7c>
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003896:	d003      	beq.n	80038a0 <__swsetup_r+0x7c>
 8003898:	4621      	mov	r1, r4
 800389a:	4628      	mov	r0, r5
 800389c:	f000 fe96 	bl	80045cc <__smakebuf_r>
 80038a0:	89a0      	ldrh	r0, [r4, #12]
 80038a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038a6:	f010 0301 	ands.w	r3, r0, #1
 80038aa:	d00a      	beq.n	80038c2 <__swsetup_r+0x9e>
 80038ac:	2300      	movs	r3, #0
 80038ae:	60a3      	str	r3, [r4, #8]
 80038b0:	6963      	ldr	r3, [r4, #20]
 80038b2:	425b      	negs	r3, r3
 80038b4:	61a3      	str	r3, [r4, #24]
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	b943      	cbnz	r3, 80038cc <__swsetup_r+0xa8>
 80038ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038be:	d1c4      	bne.n	800384a <__swsetup_r+0x26>
 80038c0:	bd38      	pop	{r3, r4, r5, pc}
 80038c2:	0781      	lsls	r1, r0, #30
 80038c4:	bf58      	it	pl
 80038c6:	6963      	ldrpl	r3, [r4, #20]
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	e7f4      	b.n	80038b6 <__swsetup_r+0x92>
 80038cc:	2000      	movs	r0, #0
 80038ce:	e7f7      	b.n	80038c0 <__swsetup_r+0x9c>
 80038d0:	20000064 	.word	0x20000064

080038d4 <memset>:
 80038d4:	4402      	add	r2, r0
 80038d6:	4603      	mov	r3, r0
 80038d8:	4293      	cmp	r3, r2
 80038da:	d100      	bne.n	80038de <memset+0xa>
 80038dc:	4770      	bx	lr
 80038de:	f803 1b01 	strb.w	r1, [r3], #1
 80038e2:	e7f9      	b.n	80038d8 <memset+0x4>

080038e4 <_close_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4d06      	ldr	r5, [pc, #24]	; (8003900 <_close_r+0x1c>)
 80038e8:	2300      	movs	r3, #0
 80038ea:	4604      	mov	r4, r0
 80038ec:	4608      	mov	r0, r1
 80038ee:	602b      	str	r3, [r5, #0]
 80038f0:	f7fd f9df 	bl	8000cb2 <_close>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_close_r+0x1a>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_close_r+0x1a>
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	20000258 	.word	0x20000258

08003904 <_lseek_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4d07      	ldr	r5, [pc, #28]	; (8003924 <_lseek_r+0x20>)
 8003908:	4604      	mov	r4, r0
 800390a:	4608      	mov	r0, r1
 800390c:	4611      	mov	r1, r2
 800390e:	2200      	movs	r2, #0
 8003910:	602a      	str	r2, [r5, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	f7fd f9f4 	bl	8000d00 <_lseek>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_lseek_r+0x1e>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	b103      	cbz	r3, 8003922 <_lseek_r+0x1e>
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	20000258 	.word	0x20000258

08003928 <_read_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4d07      	ldr	r5, [pc, #28]	; (8003948 <_read_r+0x20>)
 800392c:	4604      	mov	r4, r0
 800392e:	4608      	mov	r0, r1
 8003930:	4611      	mov	r1, r2
 8003932:	2200      	movs	r2, #0
 8003934:	602a      	str	r2, [r5, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	f7fd f982 	bl	8000c40 <_read>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_read_r+0x1e>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_read_r+0x1e>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	20000258 	.word	0x20000258

0800394c <_write_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4d07      	ldr	r5, [pc, #28]	; (800396c <_write_r+0x20>)
 8003950:	4604      	mov	r4, r0
 8003952:	4608      	mov	r0, r1
 8003954:	4611      	mov	r1, r2
 8003956:	2200      	movs	r2, #0
 8003958:	602a      	str	r2, [r5, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	f7fd f98d 	bl	8000c7a <_write>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d102      	bne.n	800396a <_write_r+0x1e>
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	b103      	cbz	r3, 800396a <_write_r+0x1e>
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	20000258 	.word	0x20000258

08003970 <__errno>:
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <__errno+0x8>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000064 	.word	0x20000064

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	4d0d      	ldr	r5, [pc, #52]	; (80039b4 <__libc_init_array+0x38>)
 8003980:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003982:	1b64      	subs	r4, r4, r5
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	2600      	movs	r6, #0
 8003988:	42a6      	cmp	r6, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	4d0b      	ldr	r5, [pc, #44]	; (80039bc <__libc_init_array+0x40>)
 800398e:	4c0c      	ldr	r4, [pc, #48]	; (80039c0 <__libc_init_array+0x44>)
 8003990:	f000 feea 	bl	8004768 <_init>
 8003994:	1b64      	subs	r4, r4, r5
 8003996:	10a4      	asrs	r4, r4, #2
 8003998:	2600      	movs	r6, #0
 800399a:	42a6      	cmp	r6, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a4:	4798      	blx	r3
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ae:	4798      	blx	r3
 80039b0:	3601      	adds	r6, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	08004874 	.word	0x08004874
 80039b8:	08004874 	.word	0x08004874
 80039bc:	08004874 	.word	0x08004874
 80039c0:	08004878 	.word	0x08004878

080039c4 <__retarget_lock_init_recursive>:
 80039c4:	4770      	bx	lr

080039c6 <__retarget_lock_acquire_recursive>:
 80039c6:	4770      	bx	lr

080039c8 <__retarget_lock_release_recursive>:
 80039c8:	4770      	bx	lr
	...

080039cc <_free_r>:
 80039cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039ce:	2900      	cmp	r1, #0
 80039d0:	d044      	beq.n	8003a5c <_free_r+0x90>
 80039d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d6:	9001      	str	r0, [sp, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f1a1 0404 	sub.w	r4, r1, #4
 80039de:	bfb8      	it	lt
 80039e0:	18e4      	addlt	r4, r4, r3
 80039e2:	f000 f8e7 	bl	8003bb4 <__malloc_lock>
 80039e6:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <_free_r+0x94>)
 80039e8:	9801      	ldr	r0, [sp, #4]
 80039ea:	6813      	ldr	r3, [r2, #0]
 80039ec:	b933      	cbnz	r3, 80039fc <_free_r+0x30>
 80039ee:	6063      	str	r3, [r4, #4]
 80039f0:	6014      	str	r4, [r2, #0]
 80039f2:	b003      	add	sp, #12
 80039f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039f8:	f000 b8e2 	b.w	8003bc0 <__malloc_unlock>
 80039fc:	42a3      	cmp	r3, r4
 80039fe:	d908      	bls.n	8003a12 <_free_r+0x46>
 8003a00:	6825      	ldr	r5, [r4, #0]
 8003a02:	1961      	adds	r1, r4, r5
 8003a04:	428b      	cmp	r3, r1
 8003a06:	bf01      	itttt	eq
 8003a08:	6819      	ldreq	r1, [r3, #0]
 8003a0a:	685b      	ldreq	r3, [r3, #4]
 8003a0c:	1949      	addeq	r1, r1, r5
 8003a0e:	6021      	streq	r1, [r4, #0]
 8003a10:	e7ed      	b.n	80039ee <_free_r+0x22>
 8003a12:	461a      	mov	r2, r3
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	b10b      	cbz	r3, 8003a1c <_free_r+0x50>
 8003a18:	42a3      	cmp	r3, r4
 8003a1a:	d9fa      	bls.n	8003a12 <_free_r+0x46>
 8003a1c:	6811      	ldr	r1, [r2, #0]
 8003a1e:	1855      	adds	r5, r2, r1
 8003a20:	42a5      	cmp	r5, r4
 8003a22:	d10b      	bne.n	8003a3c <_free_r+0x70>
 8003a24:	6824      	ldr	r4, [r4, #0]
 8003a26:	4421      	add	r1, r4
 8003a28:	1854      	adds	r4, r2, r1
 8003a2a:	42a3      	cmp	r3, r4
 8003a2c:	6011      	str	r1, [r2, #0]
 8003a2e:	d1e0      	bne.n	80039f2 <_free_r+0x26>
 8003a30:	681c      	ldr	r4, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	6053      	str	r3, [r2, #4]
 8003a36:	440c      	add	r4, r1
 8003a38:	6014      	str	r4, [r2, #0]
 8003a3a:	e7da      	b.n	80039f2 <_free_r+0x26>
 8003a3c:	d902      	bls.n	8003a44 <_free_r+0x78>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	6003      	str	r3, [r0, #0]
 8003a42:	e7d6      	b.n	80039f2 <_free_r+0x26>
 8003a44:	6825      	ldr	r5, [r4, #0]
 8003a46:	1961      	adds	r1, r4, r5
 8003a48:	428b      	cmp	r3, r1
 8003a4a:	bf04      	itt	eq
 8003a4c:	6819      	ldreq	r1, [r3, #0]
 8003a4e:	685b      	ldreq	r3, [r3, #4]
 8003a50:	6063      	str	r3, [r4, #4]
 8003a52:	bf04      	itt	eq
 8003a54:	1949      	addeq	r1, r1, r5
 8003a56:	6021      	streq	r1, [r4, #0]
 8003a58:	6054      	str	r4, [r2, #4]
 8003a5a:	e7ca      	b.n	80039f2 <_free_r+0x26>
 8003a5c:	b003      	add	sp, #12
 8003a5e:	bd30      	pop	{r4, r5, pc}
 8003a60:	20000260 	.word	0x20000260

08003a64 <malloc>:
 8003a64:	4b02      	ldr	r3, [pc, #8]	; (8003a70 <malloc+0xc>)
 8003a66:	4601      	mov	r1, r0
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	f000 b823 	b.w	8003ab4 <_malloc_r>
 8003a6e:	bf00      	nop
 8003a70:	20000064 	.word	0x20000064

08003a74 <sbrk_aligned>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	4e0e      	ldr	r6, [pc, #56]	; (8003ab0 <sbrk_aligned+0x3c>)
 8003a78:	460c      	mov	r4, r1
 8003a7a:	6831      	ldr	r1, [r6, #0]
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	b911      	cbnz	r1, 8003a86 <sbrk_aligned+0x12>
 8003a80:	f000 fe1c 	bl	80046bc <_sbrk_r>
 8003a84:	6030      	str	r0, [r6, #0]
 8003a86:	4621      	mov	r1, r4
 8003a88:	4628      	mov	r0, r5
 8003a8a:	f000 fe17 	bl	80046bc <_sbrk_r>
 8003a8e:	1c43      	adds	r3, r0, #1
 8003a90:	d00a      	beq.n	8003aa8 <sbrk_aligned+0x34>
 8003a92:	1cc4      	adds	r4, r0, #3
 8003a94:	f024 0403 	bic.w	r4, r4, #3
 8003a98:	42a0      	cmp	r0, r4
 8003a9a:	d007      	beq.n	8003aac <sbrk_aligned+0x38>
 8003a9c:	1a21      	subs	r1, r4, r0
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 fe0c 	bl	80046bc <_sbrk_r>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d101      	bne.n	8003aac <sbrk_aligned+0x38>
 8003aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8003aac:	4620      	mov	r0, r4
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
 8003ab0:	20000264 	.word	0x20000264

08003ab4 <_malloc_r>:
 8003ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ab8:	1ccd      	adds	r5, r1, #3
 8003aba:	f025 0503 	bic.w	r5, r5, #3
 8003abe:	3508      	adds	r5, #8
 8003ac0:	2d0c      	cmp	r5, #12
 8003ac2:	bf38      	it	cc
 8003ac4:	250c      	movcc	r5, #12
 8003ac6:	2d00      	cmp	r5, #0
 8003ac8:	4607      	mov	r7, r0
 8003aca:	db01      	blt.n	8003ad0 <_malloc_r+0x1c>
 8003acc:	42a9      	cmp	r1, r5
 8003ace:	d905      	bls.n	8003adc <_malloc_r+0x28>
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	2600      	movs	r6, #0
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003adc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003bb0 <_malloc_r+0xfc>
 8003ae0:	f000 f868 	bl	8003bb4 <__malloc_lock>
 8003ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ae8:	461c      	mov	r4, r3
 8003aea:	bb5c      	cbnz	r4, 8003b44 <_malloc_r+0x90>
 8003aec:	4629      	mov	r1, r5
 8003aee:	4638      	mov	r0, r7
 8003af0:	f7ff ffc0 	bl	8003a74 <sbrk_aligned>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	4604      	mov	r4, r0
 8003af8:	d155      	bne.n	8003ba6 <_malloc_r+0xf2>
 8003afa:	f8d8 4000 	ldr.w	r4, [r8]
 8003afe:	4626      	mov	r6, r4
 8003b00:	2e00      	cmp	r6, #0
 8003b02:	d145      	bne.n	8003b90 <_malloc_r+0xdc>
 8003b04:	2c00      	cmp	r4, #0
 8003b06:	d048      	beq.n	8003b9a <_malloc_r+0xe6>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	4631      	mov	r1, r6
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	eb04 0903 	add.w	r9, r4, r3
 8003b12:	f000 fdd3 	bl	80046bc <_sbrk_r>
 8003b16:	4581      	cmp	r9, r0
 8003b18:	d13f      	bne.n	8003b9a <_malloc_r+0xe6>
 8003b1a:	6821      	ldr	r1, [r4, #0]
 8003b1c:	1a6d      	subs	r5, r5, r1
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4638      	mov	r0, r7
 8003b22:	f7ff ffa7 	bl	8003a74 <sbrk_aligned>
 8003b26:	3001      	adds	r0, #1
 8003b28:	d037      	beq.n	8003b9a <_malloc_r+0xe6>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	442b      	add	r3, r5
 8003b2e:	6023      	str	r3, [r4, #0]
 8003b30:	f8d8 3000 	ldr.w	r3, [r8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d038      	beq.n	8003baa <_malloc_r+0xf6>
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	42a2      	cmp	r2, r4
 8003b3c:	d12b      	bne.n	8003b96 <_malloc_r+0xe2>
 8003b3e:	2200      	movs	r2, #0
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	e00f      	b.n	8003b64 <_malloc_r+0xb0>
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	1b52      	subs	r2, r2, r5
 8003b48:	d41f      	bmi.n	8003b8a <_malloc_r+0xd6>
 8003b4a:	2a0b      	cmp	r2, #11
 8003b4c:	d917      	bls.n	8003b7e <_malloc_r+0xca>
 8003b4e:	1961      	adds	r1, r4, r5
 8003b50:	42a3      	cmp	r3, r4
 8003b52:	6025      	str	r5, [r4, #0]
 8003b54:	bf18      	it	ne
 8003b56:	6059      	strne	r1, [r3, #4]
 8003b58:	6863      	ldr	r3, [r4, #4]
 8003b5a:	bf08      	it	eq
 8003b5c:	f8c8 1000 	streq.w	r1, [r8]
 8003b60:	5162      	str	r2, [r4, r5]
 8003b62:	604b      	str	r3, [r1, #4]
 8003b64:	4638      	mov	r0, r7
 8003b66:	f104 060b 	add.w	r6, r4, #11
 8003b6a:	f000 f829 	bl	8003bc0 <__malloc_unlock>
 8003b6e:	f026 0607 	bic.w	r6, r6, #7
 8003b72:	1d23      	adds	r3, r4, #4
 8003b74:	1af2      	subs	r2, r6, r3
 8003b76:	d0ae      	beq.n	8003ad6 <_malloc_r+0x22>
 8003b78:	1b9b      	subs	r3, r3, r6
 8003b7a:	50a3      	str	r3, [r4, r2]
 8003b7c:	e7ab      	b.n	8003ad6 <_malloc_r+0x22>
 8003b7e:	42a3      	cmp	r3, r4
 8003b80:	6862      	ldr	r2, [r4, #4]
 8003b82:	d1dd      	bne.n	8003b40 <_malloc_r+0x8c>
 8003b84:	f8c8 2000 	str.w	r2, [r8]
 8003b88:	e7ec      	b.n	8003b64 <_malloc_r+0xb0>
 8003b8a:	4623      	mov	r3, r4
 8003b8c:	6864      	ldr	r4, [r4, #4]
 8003b8e:	e7ac      	b.n	8003aea <_malloc_r+0x36>
 8003b90:	4634      	mov	r4, r6
 8003b92:	6876      	ldr	r6, [r6, #4]
 8003b94:	e7b4      	b.n	8003b00 <_malloc_r+0x4c>
 8003b96:	4613      	mov	r3, r2
 8003b98:	e7cc      	b.n	8003b34 <_malloc_r+0x80>
 8003b9a:	230c      	movs	r3, #12
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	f000 f80e 	bl	8003bc0 <__malloc_unlock>
 8003ba4:	e797      	b.n	8003ad6 <_malloc_r+0x22>
 8003ba6:	6025      	str	r5, [r4, #0]
 8003ba8:	e7dc      	b.n	8003b64 <_malloc_r+0xb0>
 8003baa:	605b      	str	r3, [r3, #4]
 8003bac:	deff      	udf	#255	; 0xff
 8003bae:	bf00      	nop
 8003bb0:	20000260 	.word	0x20000260

08003bb4 <__malloc_lock>:
 8003bb4:	4801      	ldr	r0, [pc, #4]	; (8003bbc <__malloc_lock+0x8>)
 8003bb6:	f7ff bf06 	b.w	80039c6 <__retarget_lock_acquire_recursive>
 8003bba:	bf00      	nop
 8003bbc:	2000025c 	.word	0x2000025c

08003bc0 <__malloc_unlock>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__malloc_unlock+0x8>)
 8003bc2:	f7ff bf01 	b.w	80039c8 <__retarget_lock_release_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	2000025c 	.word	0x2000025c

08003bcc <__ssputs_r>:
 8003bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd0:	688e      	ldr	r6, [r1, #8]
 8003bd2:	461f      	mov	r7, r3
 8003bd4:	42be      	cmp	r6, r7
 8003bd6:	680b      	ldr	r3, [r1, #0]
 8003bd8:	4682      	mov	sl, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	4690      	mov	r8, r2
 8003bde:	d82c      	bhi.n	8003c3a <__ssputs_r+0x6e>
 8003be0:	898a      	ldrh	r2, [r1, #12]
 8003be2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003be6:	d026      	beq.n	8003c36 <__ssputs_r+0x6a>
 8003be8:	6965      	ldr	r5, [r4, #20]
 8003bea:	6909      	ldr	r1, [r1, #16]
 8003bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bf0:	eba3 0901 	sub.w	r9, r3, r1
 8003bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bf8:	1c7b      	adds	r3, r7, #1
 8003bfa:	444b      	add	r3, r9
 8003bfc:	106d      	asrs	r5, r5, #1
 8003bfe:	429d      	cmp	r5, r3
 8003c00:	bf38      	it	cc
 8003c02:	461d      	movcc	r5, r3
 8003c04:	0553      	lsls	r3, r2, #21
 8003c06:	d527      	bpl.n	8003c58 <__ssputs_r+0x8c>
 8003c08:	4629      	mov	r1, r5
 8003c0a:	f7ff ff53 	bl	8003ab4 <_malloc_r>
 8003c0e:	4606      	mov	r6, r0
 8003c10:	b360      	cbz	r0, 8003c6c <__ssputs_r+0xa0>
 8003c12:	6921      	ldr	r1, [r4, #16]
 8003c14:	464a      	mov	r2, r9
 8003c16:	f000 fd61 	bl	80046dc <memcpy>
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c24:	81a3      	strh	r3, [r4, #12]
 8003c26:	6126      	str	r6, [r4, #16]
 8003c28:	6165      	str	r5, [r4, #20]
 8003c2a:	444e      	add	r6, r9
 8003c2c:	eba5 0509 	sub.w	r5, r5, r9
 8003c30:	6026      	str	r6, [r4, #0]
 8003c32:	60a5      	str	r5, [r4, #8]
 8003c34:	463e      	mov	r6, r7
 8003c36:	42be      	cmp	r6, r7
 8003c38:	d900      	bls.n	8003c3c <__ssputs_r+0x70>
 8003c3a:	463e      	mov	r6, r7
 8003c3c:	6820      	ldr	r0, [r4, #0]
 8003c3e:	4632      	mov	r2, r6
 8003c40:	4641      	mov	r1, r8
 8003c42:	f000 fcff 	bl	8004644 <memmove>
 8003c46:	68a3      	ldr	r3, [r4, #8]
 8003c48:	1b9b      	subs	r3, r3, r6
 8003c4a:	60a3      	str	r3, [r4, #8]
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	4433      	add	r3, r6
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	2000      	movs	r0, #0
 8003c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c58:	462a      	mov	r2, r5
 8003c5a:	f000 fd4d 	bl	80046f8 <_realloc_r>
 8003c5e:	4606      	mov	r6, r0
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d1e0      	bne.n	8003c26 <__ssputs_r+0x5a>
 8003c64:	6921      	ldr	r1, [r4, #16]
 8003c66:	4650      	mov	r0, sl
 8003c68:	f7ff feb0 	bl	80039cc <_free_r>
 8003c6c:	230c      	movs	r3, #12
 8003c6e:	f8ca 3000 	str.w	r3, [sl]
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c78:	81a3      	strh	r3, [r4, #12]
 8003c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7e:	e7e9      	b.n	8003c54 <__ssputs_r+0x88>

08003c80 <_svfiprintf_r>:
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	4698      	mov	r8, r3
 8003c86:	898b      	ldrh	r3, [r1, #12]
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	b09d      	sub	sp, #116	; 0x74
 8003c8c:	4607      	mov	r7, r0
 8003c8e:	460d      	mov	r5, r1
 8003c90:	4614      	mov	r4, r2
 8003c92:	d50e      	bpl.n	8003cb2 <_svfiprintf_r+0x32>
 8003c94:	690b      	ldr	r3, [r1, #16]
 8003c96:	b963      	cbnz	r3, 8003cb2 <_svfiprintf_r+0x32>
 8003c98:	2140      	movs	r1, #64	; 0x40
 8003c9a:	f7ff ff0b 	bl	8003ab4 <_malloc_r>
 8003c9e:	6028      	str	r0, [r5, #0]
 8003ca0:	6128      	str	r0, [r5, #16]
 8003ca2:	b920      	cbnz	r0, 8003cae <_svfiprintf_r+0x2e>
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	e0d0      	b.n	8003e50 <_svfiprintf_r+0x1d0>
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	616b      	str	r3, [r5, #20]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cc0:	2330      	movs	r3, #48	; 0x30
 8003cc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e68 <_svfiprintf_r+0x1e8>
 8003cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cca:	f04f 0901 	mov.w	r9, #1
 8003cce:	4623      	mov	r3, r4
 8003cd0:	469a      	mov	sl, r3
 8003cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cd6:	b10a      	cbz	r2, 8003cdc <_svfiprintf_r+0x5c>
 8003cd8:	2a25      	cmp	r2, #37	; 0x25
 8003cda:	d1f9      	bne.n	8003cd0 <_svfiprintf_r+0x50>
 8003cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8003ce0:	d00b      	beq.n	8003cfa <_svfiprintf_r+0x7a>
 8003ce2:	465b      	mov	r3, fp
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	4638      	mov	r0, r7
 8003cea:	f7ff ff6f 	bl	8003bcc <__ssputs_r>
 8003cee:	3001      	adds	r0, #1
 8003cf0:	f000 80a9 	beq.w	8003e46 <_svfiprintf_r+0x1c6>
 8003cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cf6:	445a      	add	r2, fp
 8003cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8003cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80a1 	beq.w	8003e46 <_svfiprintf_r+0x1c6>
 8003d04:	2300      	movs	r3, #0
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d0e:	f10a 0a01 	add.w	sl, sl, #1
 8003d12:	9304      	str	r3, [sp, #16]
 8003d14:	9307      	str	r3, [sp, #28]
 8003d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8003d1c:	4654      	mov	r4, sl
 8003d1e:	2205      	movs	r2, #5
 8003d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d24:	4850      	ldr	r0, [pc, #320]	; (8003e68 <_svfiprintf_r+0x1e8>)
 8003d26:	f7fc fa5b 	bl	80001e0 <memchr>
 8003d2a:	9a04      	ldr	r2, [sp, #16]
 8003d2c:	b9d8      	cbnz	r0, 8003d66 <_svfiprintf_r+0xe6>
 8003d2e:	06d0      	lsls	r0, r2, #27
 8003d30:	bf44      	itt	mi
 8003d32:	2320      	movmi	r3, #32
 8003d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d38:	0711      	lsls	r1, r2, #28
 8003d3a:	bf44      	itt	mi
 8003d3c:	232b      	movmi	r3, #43	; 0x2b
 8003d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d42:	f89a 3000 	ldrb.w	r3, [sl]
 8003d46:	2b2a      	cmp	r3, #42	; 0x2a
 8003d48:	d015      	beq.n	8003d76 <_svfiprintf_r+0xf6>
 8003d4a:	9a07      	ldr	r2, [sp, #28]
 8003d4c:	4654      	mov	r4, sl
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f04f 0c0a 	mov.w	ip, #10
 8003d54:	4621      	mov	r1, r4
 8003d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d5a:	3b30      	subs	r3, #48	; 0x30
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d94d      	bls.n	8003dfc <_svfiprintf_r+0x17c>
 8003d60:	b1b0      	cbz	r0, 8003d90 <_svfiprintf_r+0x110>
 8003d62:	9207      	str	r2, [sp, #28]
 8003d64:	e014      	b.n	8003d90 <_svfiprintf_r+0x110>
 8003d66:	eba0 0308 	sub.w	r3, r0, r8
 8003d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	9304      	str	r3, [sp, #16]
 8003d72:	46a2      	mov	sl, r4
 8003d74:	e7d2      	b.n	8003d1c <_svfiprintf_r+0x9c>
 8003d76:	9b03      	ldr	r3, [sp, #12]
 8003d78:	1d19      	adds	r1, r3, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	9103      	str	r1, [sp, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bfbb      	ittet	lt
 8003d82:	425b      	neglt	r3, r3
 8003d84:	f042 0202 	orrlt.w	r2, r2, #2
 8003d88:	9307      	strge	r3, [sp, #28]
 8003d8a:	9307      	strlt	r3, [sp, #28]
 8003d8c:	bfb8      	it	lt
 8003d8e:	9204      	strlt	r2, [sp, #16]
 8003d90:	7823      	ldrb	r3, [r4, #0]
 8003d92:	2b2e      	cmp	r3, #46	; 0x2e
 8003d94:	d10c      	bne.n	8003db0 <_svfiprintf_r+0x130>
 8003d96:	7863      	ldrb	r3, [r4, #1]
 8003d98:	2b2a      	cmp	r3, #42	; 0x2a
 8003d9a:	d134      	bne.n	8003e06 <_svfiprintf_r+0x186>
 8003d9c:	9b03      	ldr	r3, [sp, #12]
 8003d9e:	1d1a      	adds	r2, r3, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	9203      	str	r2, [sp, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bfb8      	it	lt
 8003da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dac:	3402      	adds	r4, #2
 8003dae:	9305      	str	r3, [sp, #20]
 8003db0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e78 <_svfiprintf_r+0x1f8>
 8003db4:	7821      	ldrb	r1, [r4, #0]
 8003db6:	2203      	movs	r2, #3
 8003db8:	4650      	mov	r0, sl
 8003dba:	f7fc fa11 	bl	80001e0 <memchr>
 8003dbe:	b138      	cbz	r0, 8003dd0 <_svfiprintf_r+0x150>
 8003dc0:	9b04      	ldr	r3, [sp, #16]
 8003dc2:	eba0 000a 	sub.w	r0, r0, sl
 8003dc6:	2240      	movs	r2, #64	; 0x40
 8003dc8:	4082      	lsls	r2, r0
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	3401      	adds	r4, #1
 8003dce:	9304      	str	r3, [sp, #16]
 8003dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd4:	4825      	ldr	r0, [pc, #148]	; (8003e6c <_svfiprintf_r+0x1ec>)
 8003dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dda:	2206      	movs	r2, #6
 8003ddc:	f7fc fa00 	bl	80001e0 <memchr>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d038      	beq.n	8003e56 <_svfiprintf_r+0x1d6>
 8003de4:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <_svfiprintf_r+0x1f0>)
 8003de6:	bb1b      	cbnz	r3, 8003e30 <_svfiprintf_r+0x1b0>
 8003de8:	9b03      	ldr	r3, [sp, #12]
 8003dea:	3307      	adds	r3, #7
 8003dec:	f023 0307 	bic.w	r3, r3, #7
 8003df0:	3308      	adds	r3, #8
 8003df2:	9303      	str	r3, [sp, #12]
 8003df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003df6:	4433      	add	r3, r6
 8003df8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dfa:	e768      	b.n	8003cce <_svfiprintf_r+0x4e>
 8003dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e00:	460c      	mov	r4, r1
 8003e02:	2001      	movs	r0, #1
 8003e04:	e7a6      	b.n	8003d54 <_svfiprintf_r+0xd4>
 8003e06:	2300      	movs	r3, #0
 8003e08:	3401      	adds	r4, #1
 8003e0a:	9305      	str	r3, [sp, #20]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f04f 0c0a 	mov.w	ip, #10
 8003e12:	4620      	mov	r0, r4
 8003e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e18:	3a30      	subs	r2, #48	; 0x30
 8003e1a:	2a09      	cmp	r2, #9
 8003e1c:	d903      	bls.n	8003e26 <_svfiprintf_r+0x1a6>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0c6      	beq.n	8003db0 <_svfiprintf_r+0x130>
 8003e22:	9105      	str	r1, [sp, #20]
 8003e24:	e7c4      	b.n	8003db0 <_svfiprintf_r+0x130>
 8003e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e7f0      	b.n	8003e12 <_svfiprintf_r+0x192>
 8003e30:	ab03      	add	r3, sp, #12
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	462a      	mov	r2, r5
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <_svfiprintf_r+0x1f4>)
 8003e38:	a904      	add	r1, sp, #16
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	f3af 8000 	nop.w
 8003e40:	1c42      	adds	r2, r0, #1
 8003e42:	4606      	mov	r6, r0
 8003e44:	d1d6      	bne.n	8003df4 <_svfiprintf_r+0x174>
 8003e46:	89ab      	ldrh	r3, [r5, #12]
 8003e48:	065b      	lsls	r3, r3, #25
 8003e4a:	f53f af2d 	bmi.w	8003ca8 <_svfiprintf_r+0x28>
 8003e4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e50:	b01d      	add	sp, #116	; 0x74
 8003e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e56:	ab03      	add	r3, sp, #12
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	462a      	mov	r2, r5
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <_svfiprintf_r+0x1f4>)
 8003e5e:	a904      	add	r1, sp, #16
 8003e60:	4638      	mov	r0, r7
 8003e62:	f000 f9bd 	bl	80041e0 <_printf_i>
 8003e66:	e7eb      	b.n	8003e40 <_svfiprintf_r+0x1c0>
 8003e68:	08004838 	.word	0x08004838
 8003e6c:	08004842 	.word	0x08004842
 8003e70:	00000000 	.word	0x00000000
 8003e74:	08003bcd 	.word	0x08003bcd
 8003e78:	0800483e 	.word	0x0800483e

08003e7c <__sfputc_r>:
 8003e7c:	6893      	ldr	r3, [r2, #8]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	b410      	push	{r4}
 8003e84:	6093      	str	r3, [r2, #8]
 8003e86:	da08      	bge.n	8003e9a <__sfputc_r+0x1e>
 8003e88:	6994      	ldr	r4, [r2, #24]
 8003e8a:	42a3      	cmp	r3, r4
 8003e8c:	db01      	blt.n	8003e92 <__sfputc_r+0x16>
 8003e8e:	290a      	cmp	r1, #10
 8003e90:	d103      	bne.n	8003e9a <__sfputc_r+0x1e>
 8003e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e96:	f7ff bc88 	b.w	80037aa <__swbuf_r>
 8003e9a:	6813      	ldr	r3, [r2, #0]
 8003e9c:	1c58      	adds	r0, r3, #1
 8003e9e:	6010      	str	r0, [r2, #0]
 8003ea0:	7019      	strb	r1, [r3, #0]
 8003ea2:	4608      	mov	r0, r1
 8003ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <__sfputs_r>:
 8003eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eac:	4606      	mov	r6, r0
 8003eae:	460f      	mov	r7, r1
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	18d5      	adds	r5, r2, r3
 8003eb4:	42ac      	cmp	r4, r5
 8003eb6:	d101      	bne.n	8003ebc <__sfputs_r+0x12>
 8003eb8:	2000      	movs	r0, #0
 8003eba:	e007      	b.n	8003ecc <__sfputs_r+0x22>
 8003ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec0:	463a      	mov	r2, r7
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	f7ff ffda 	bl	8003e7c <__sfputc_r>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d1f3      	bne.n	8003eb4 <__sfputs_r+0xa>
 8003ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ed0 <_vfiprintf_r>:
 8003ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed4:	460d      	mov	r5, r1
 8003ed6:	b09d      	sub	sp, #116	; 0x74
 8003ed8:	4614      	mov	r4, r2
 8003eda:	4698      	mov	r8, r3
 8003edc:	4606      	mov	r6, r0
 8003ede:	b118      	cbz	r0, 8003ee8 <_vfiprintf_r+0x18>
 8003ee0:	6a03      	ldr	r3, [r0, #32]
 8003ee2:	b90b      	cbnz	r3, 8003ee8 <_vfiprintf_r+0x18>
 8003ee4:	f7ff faac 	bl	8003440 <__sinit>
 8003ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eea:	07d9      	lsls	r1, r3, #31
 8003eec:	d405      	bmi.n	8003efa <_vfiprintf_r+0x2a>
 8003eee:	89ab      	ldrh	r3, [r5, #12]
 8003ef0:	059a      	lsls	r2, r3, #22
 8003ef2:	d402      	bmi.n	8003efa <_vfiprintf_r+0x2a>
 8003ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ef6:	f7ff fd66 	bl	80039c6 <__retarget_lock_acquire_recursive>
 8003efa:	89ab      	ldrh	r3, [r5, #12]
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	d501      	bpl.n	8003f04 <_vfiprintf_r+0x34>
 8003f00:	692b      	ldr	r3, [r5, #16]
 8003f02:	b99b      	cbnz	r3, 8003f2c <_vfiprintf_r+0x5c>
 8003f04:	4629      	mov	r1, r5
 8003f06:	4630      	mov	r0, r6
 8003f08:	f7ff fc8c 	bl	8003824 <__swsetup_r>
 8003f0c:	b170      	cbz	r0, 8003f2c <_vfiprintf_r+0x5c>
 8003f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f10:	07dc      	lsls	r4, r3, #31
 8003f12:	d504      	bpl.n	8003f1e <_vfiprintf_r+0x4e>
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	b01d      	add	sp, #116	; 0x74
 8003f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1e:	89ab      	ldrh	r3, [r5, #12]
 8003f20:	0598      	lsls	r0, r3, #22
 8003f22:	d4f7      	bmi.n	8003f14 <_vfiprintf_r+0x44>
 8003f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f26:	f7ff fd4f 	bl	80039c8 <__retarget_lock_release_recursive>
 8003f2a:	e7f3      	b.n	8003f14 <_vfiprintf_r+0x44>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f30:	2320      	movs	r3, #32
 8003f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f3a:	2330      	movs	r3, #48	; 0x30
 8003f3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80040f0 <_vfiprintf_r+0x220>
 8003f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f44:	f04f 0901 	mov.w	r9, #1
 8003f48:	4623      	mov	r3, r4
 8003f4a:	469a      	mov	sl, r3
 8003f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f50:	b10a      	cbz	r2, 8003f56 <_vfiprintf_r+0x86>
 8003f52:	2a25      	cmp	r2, #37	; 0x25
 8003f54:	d1f9      	bne.n	8003f4a <_vfiprintf_r+0x7a>
 8003f56:	ebba 0b04 	subs.w	fp, sl, r4
 8003f5a:	d00b      	beq.n	8003f74 <_vfiprintf_r+0xa4>
 8003f5c:	465b      	mov	r3, fp
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4629      	mov	r1, r5
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7ff ffa1 	bl	8003eaa <__sfputs_r>
 8003f68:	3001      	adds	r0, #1
 8003f6a:	f000 80a9 	beq.w	80040c0 <_vfiprintf_r+0x1f0>
 8003f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f70:	445a      	add	r2, fp
 8003f72:	9209      	str	r2, [sp, #36]	; 0x24
 8003f74:	f89a 3000 	ldrb.w	r3, [sl]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80a1 	beq.w	80040c0 <_vfiprintf_r+0x1f0>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295
 8003f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f88:	f10a 0a01 	add.w	sl, sl, #1
 8003f8c:	9304      	str	r3, [sp, #16]
 8003f8e:	9307      	str	r3, [sp, #28]
 8003f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f94:	931a      	str	r3, [sp, #104]	; 0x68
 8003f96:	4654      	mov	r4, sl
 8003f98:	2205      	movs	r2, #5
 8003f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9e:	4854      	ldr	r0, [pc, #336]	; (80040f0 <_vfiprintf_r+0x220>)
 8003fa0:	f7fc f91e 	bl	80001e0 <memchr>
 8003fa4:	9a04      	ldr	r2, [sp, #16]
 8003fa6:	b9d8      	cbnz	r0, 8003fe0 <_vfiprintf_r+0x110>
 8003fa8:	06d1      	lsls	r1, r2, #27
 8003faa:	bf44      	itt	mi
 8003fac:	2320      	movmi	r3, #32
 8003fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb2:	0713      	lsls	r3, r2, #28
 8003fb4:	bf44      	itt	mi
 8003fb6:	232b      	movmi	r3, #43	; 0x2b
 8003fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc2:	d015      	beq.n	8003ff0 <_vfiprintf_r+0x120>
 8003fc4:	9a07      	ldr	r2, [sp, #28]
 8003fc6:	4654      	mov	r4, sl
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f04f 0c0a 	mov.w	ip, #10
 8003fce:	4621      	mov	r1, r4
 8003fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fd4:	3b30      	subs	r3, #48	; 0x30
 8003fd6:	2b09      	cmp	r3, #9
 8003fd8:	d94d      	bls.n	8004076 <_vfiprintf_r+0x1a6>
 8003fda:	b1b0      	cbz	r0, 800400a <_vfiprintf_r+0x13a>
 8003fdc:	9207      	str	r2, [sp, #28]
 8003fde:	e014      	b.n	800400a <_vfiprintf_r+0x13a>
 8003fe0:	eba0 0308 	sub.w	r3, r0, r8
 8003fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	9304      	str	r3, [sp, #16]
 8003fec:	46a2      	mov	sl, r4
 8003fee:	e7d2      	b.n	8003f96 <_vfiprintf_r+0xc6>
 8003ff0:	9b03      	ldr	r3, [sp, #12]
 8003ff2:	1d19      	adds	r1, r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	9103      	str	r1, [sp, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bfbb      	ittet	lt
 8003ffc:	425b      	neglt	r3, r3
 8003ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8004002:	9307      	strge	r3, [sp, #28]
 8004004:	9307      	strlt	r3, [sp, #28]
 8004006:	bfb8      	it	lt
 8004008:	9204      	strlt	r2, [sp, #16]
 800400a:	7823      	ldrb	r3, [r4, #0]
 800400c:	2b2e      	cmp	r3, #46	; 0x2e
 800400e:	d10c      	bne.n	800402a <_vfiprintf_r+0x15a>
 8004010:	7863      	ldrb	r3, [r4, #1]
 8004012:	2b2a      	cmp	r3, #42	; 0x2a
 8004014:	d134      	bne.n	8004080 <_vfiprintf_r+0x1b0>
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	1d1a      	adds	r2, r3, #4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	9203      	str	r2, [sp, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	bfb8      	it	lt
 8004022:	f04f 33ff 	movlt.w	r3, #4294967295
 8004026:	3402      	adds	r4, #2
 8004028:	9305      	str	r3, [sp, #20]
 800402a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004100 <_vfiprintf_r+0x230>
 800402e:	7821      	ldrb	r1, [r4, #0]
 8004030:	2203      	movs	r2, #3
 8004032:	4650      	mov	r0, sl
 8004034:	f7fc f8d4 	bl	80001e0 <memchr>
 8004038:	b138      	cbz	r0, 800404a <_vfiprintf_r+0x17a>
 800403a:	9b04      	ldr	r3, [sp, #16]
 800403c:	eba0 000a 	sub.w	r0, r0, sl
 8004040:	2240      	movs	r2, #64	; 0x40
 8004042:	4082      	lsls	r2, r0
 8004044:	4313      	orrs	r3, r2
 8004046:	3401      	adds	r4, #1
 8004048:	9304      	str	r3, [sp, #16]
 800404a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800404e:	4829      	ldr	r0, [pc, #164]	; (80040f4 <_vfiprintf_r+0x224>)
 8004050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004054:	2206      	movs	r2, #6
 8004056:	f7fc f8c3 	bl	80001e0 <memchr>
 800405a:	2800      	cmp	r0, #0
 800405c:	d03f      	beq.n	80040de <_vfiprintf_r+0x20e>
 800405e:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <_vfiprintf_r+0x228>)
 8004060:	bb1b      	cbnz	r3, 80040aa <_vfiprintf_r+0x1da>
 8004062:	9b03      	ldr	r3, [sp, #12]
 8004064:	3307      	adds	r3, #7
 8004066:	f023 0307 	bic.w	r3, r3, #7
 800406a:	3308      	adds	r3, #8
 800406c:	9303      	str	r3, [sp, #12]
 800406e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004070:	443b      	add	r3, r7
 8004072:	9309      	str	r3, [sp, #36]	; 0x24
 8004074:	e768      	b.n	8003f48 <_vfiprintf_r+0x78>
 8004076:	fb0c 3202 	mla	r2, ip, r2, r3
 800407a:	460c      	mov	r4, r1
 800407c:	2001      	movs	r0, #1
 800407e:	e7a6      	b.n	8003fce <_vfiprintf_r+0xfe>
 8004080:	2300      	movs	r3, #0
 8004082:	3401      	adds	r4, #1
 8004084:	9305      	str	r3, [sp, #20]
 8004086:	4619      	mov	r1, r3
 8004088:	f04f 0c0a 	mov.w	ip, #10
 800408c:	4620      	mov	r0, r4
 800408e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004092:	3a30      	subs	r2, #48	; 0x30
 8004094:	2a09      	cmp	r2, #9
 8004096:	d903      	bls.n	80040a0 <_vfiprintf_r+0x1d0>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0c6      	beq.n	800402a <_vfiprintf_r+0x15a>
 800409c:	9105      	str	r1, [sp, #20]
 800409e:	e7c4      	b.n	800402a <_vfiprintf_r+0x15a>
 80040a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80040a4:	4604      	mov	r4, r0
 80040a6:	2301      	movs	r3, #1
 80040a8:	e7f0      	b.n	800408c <_vfiprintf_r+0x1bc>
 80040aa:	ab03      	add	r3, sp, #12
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	462a      	mov	r2, r5
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <_vfiprintf_r+0x22c>)
 80040b2:	a904      	add	r1, sp, #16
 80040b4:	4630      	mov	r0, r6
 80040b6:	f3af 8000 	nop.w
 80040ba:	4607      	mov	r7, r0
 80040bc:	1c78      	adds	r0, r7, #1
 80040be:	d1d6      	bne.n	800406e <_vfiprintf_r+0x19e>
 80040c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040c2:	07d9      	lsls	r1, r3, #31
 80040c4:	d405      	bmi.n	80040d2 <_vfiprintf_r+0x202>
 80040c6:	89ab      	ldrh	r3, [r5, #12]
 80040c8:	059a      	lsls	r2, r3, #22
 80040ca:	d402      	bmi.n	80040d2 <_vfiprintf_r+0x202>
 80040cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040ce:	f7ff fc7b 	bl	80039c8 <__retarget_lock_release_recursive>
 80040d2:	89ab      	ldrh	r3, [r5, #12]
 80040d4:	065b      	lsls	r3, r3, #25
 80040d6:	f53f af1d 	bmi.w	8003f14 <_vfiprintf_r+0x44>
 80040da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040dc:	e71c      	b.n	8003f18 <_vfiprintf_r+0x48>
 80040de:	ab03      	add	r3, sp, #12
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	462a      	mov	r2, r5
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <_vfiprintf_r+0x22c>)
 80040e6:	a904      	add	r1, sp, #16
 80040e8:	4630      	mov	r0, r6
 80040ea:	f000 f879 	bl	80041e0 <_printf_i>
 80040ee:	e7e4      	b.n	80040ba <_vfiprintf_r+0x1ea>
 80040f0:	08004838 	.word	0x08004838
 80040f4:	08004842 	.word	0x08004842
 80040f8:	00000000 	.word	0x00000000
 80040fc:	08003eab 	.word	0x08003eab
 8004100:	0800483e 	.word	0x0800483e

08004104 <_printf_common>:
 8004104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004108:	4616      	mov	r6, r2
 800410a:	4699      	mov	r9, r3
 800410c:	688a      	ldr	r2, [r1, #8]
 800410e:	690b      	ldr	r3, [r1, #16]
 8004110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004114:	4293      	cmp	r3, r2
 8004116:	bfb8      	it	lt
 8004118:	4613      	movlt	r3, r2
 800411a:	6033      	str	r3, [r6, #0]
 800411c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004120:	4607      	mov	r7, r0
 8004122:	460c      	mov	r4, r1
 8004124:	b10a      	cbz	r2, 800412a <_printf_common+0x26>
 8004126:	3301      	adds	r3, #1
 8004128:	6033      	str	r3, [r6, #0]
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	0699      	lsls	r1, r3, #26
 800412e:	bf42      	ittt	mi
 8004130:	6833      	ldrmi	r3, [r6, #0]
 8004132:	3302      	addmi	r3, #2
 8004134:	6033      	strmi	r3, [r6, #0]
 8004136:	6825      	ldr	r5, [r4, #0]
 8004138:	f015 0506 	ands.w	r5, r5, #6
 800413c:	d106      	bne.n	800414c <_printf_common+0x48>
 800413e:	f104 0a19 	add.w	sl, r4, #25
 8004142:	68e3      	ldr	r3, [r4, #12]
 8004144:	6832      	ldr	r2, [r6, #0]
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	42ab      	cmp	r3, r5
 800414a:	dc26      	bgt.n	800419a <_printf_common+0x96>
 800414c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004150:	1e13      	subs	r3, r2, #0
 8004152:	6822      	ldr	r2, [r4, #0]
 8004154:	bf18      	it	ne
 8004156:	2301      	movne	r3, #1
 8004158:	0692      	lsls	r2, r2, #26
 800415a:	d42b      	bmi.n	80041b4 <_printf_common+0xb0>
 800415c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004160:	4649      	mov	r1, r9
 8004162:	4638      	mov	r0, r7
 8004164:	47c0      	blx	r8
 8004166:	3001      	adds	r0, #1
 8004168:	d01e      	beq.n	80041a8 <_printf_common+0xa4>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	6922      	ldr	r2, [r4, #16]
 800416e:	f003 0306 	and.w	r3, r3, #6
 8004172:	2b04      	cmp	r3, #4
 8004174:	bf02      	ittt	eq
 8004176:	68e5      	ldreq	r5, [r4, #12]
 8004178:	6833      	ldreq	r3, [r6, #0]
 800417a:	1aed      	subeq	r5, r5, r3
 800417c:	68a3      	ldr	r3, [r4, #8]
 800417e:	bf0c      	ite	eq
 8004180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004184:	2500      	movne	r5, #0
 8004186:	4293      	cmp	r3, r2
 8004188:	bfc4      	itt	gt
 800418a:	1a9b      	subgt	r3, r3, r2
 800418c:	18ed      	addgt	r5, r5, r3
 800418e:	2600      	movs	r6, #0
 8004190:	341a      	adds	r4, #26
 8004192:	42b5      	cmp	r5, r6
 8004194:	d11a      	bne.n	80041cc <_printf_common+0xc8>
 8004196:	2000      	movs	r0, #0
 8004198:	e008      	b.n	80041ac <_printf_common+0xa8>
 800419a:	2301      	movs	r3, #1
 800419c:	4652      	mov	r2, sl
 800419e:	4649      	mov	r1, r9
 80041a0:	4638      	mov	r0, r7
 80041a2:	47c0      	blx	r8
 80041a4:	3001      	adds	r0, #1
 80041a6:	d103      	bne.n	80041b0 <_printf_common+0xac>
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b0:	3501      	adds	r5, #1
 80041b2:	e7c6      	b.n	8004142 <_printf_common+0x3e>
 80041b4:	18e1      	adds	r1, r4, r3
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	2030      	movs	r0, #48	; 0x30
 80041ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041be:	4422      	add	r2, r4
 80041c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041c8:	3302      	adds	r3, #2
 80041ca:	e7c7      	b.n	800415c <_printf_common+0x58>
 80041cc:	2301      	movs	r3, #1
 80041ce:	4622      	mov	r2, r4
 80041d0:	4649      	mov	r1, r9
 80041d2:	4638      	mov	r0, r7
 80041d4:	47c0      	blx	r8
 80041d6:	3001      	adds	r0, #1
 80041d8:	d0e6      	beq.n	80041a8 <_printf_common+0xa4>
 80041da:	3601      	adds	r6, #1
 80041dc:	e7d9      	b.n	8004192 <_printf_common+0x8e>
	...

080041e0 <_printf_i>:
 80041e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	7e0f      	ldrb	r7, [r1, #24]
 80041e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041e8:	2f78      	cmp	r7, #120	; 0x78
 80041ea:	4691      	mov	r9, r2
 80041ec:	4680      	mov	r8, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	469a      	mov	sl, r3
 80041f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041f6:	d807      	bhi.n	8004208 <_printf_i+0x28>
 80041f8:	2f62      	cmp	r7, #98	; 0x62
 80041fa:	d80a      	bhi.n	8004212 <_printf_i+0x32>
 80041fc:	2f00      	cmp	r7, #0
 80041fe:	f000 80d4 	beq.w	80043aa <_printf_i+0x1ca>
 8004202:	2f58      	cmp	r7, #88	; 0x58
 8004204:	f000 80c0 	beq.w	8004388 <_printf_i+0x1a8>
 8004208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800420c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004210:	e03a      	b.n	8004288 <_printf_i+0xa8>
 8004212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004216:	2b15      	cmp	r3, #21
 8004218:	d8f6      	bhi.n	8004208 <_printf_i+0x28>
 800421a:	a101      	add	r1, pc, #4	; (adr r1, 8004220 <_printf_i+0x40>)
 800421c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004220:	08004279 	.word	0x08004279
 8004224:	0800428d 	.word	0x0800428d
 8004228:	08004209 	.word	0x08004209
 800422c:	08004209 	.word	0x08004209
 8004230:	08004209 	.word	0x08004209
 8004234:	08004209 	.word	0x08004209
 8004238:	0800428d 	.word	0x0800428d
 800423c:	08004209 	.word	0x08004209
 8004240:	08004209 	.word	0x08004209
 8004244:	08004209 	.word	0x08004209
 8004248:	08004209 	.word	0x08004209
 800424c:	08004391 	.word	0x08004391
 8004250:	080042b9 	.word	0x080042b9
 8004254:	0800434b 	.word	0x0800434b
 8004258:	08004209 	.word	0x08004209
 800425c:	08004209 	.word	0x08004209
 8004260:	080043b3 	.word	0x080043b3
 8004264:	08004209 	.word	0x08004209
 8004268:	080042b9 	.word	0x080042b9
 800426c:	08004209 	.word	0x08004209
 8004270:	08004209 	.word	0x08004209
 8004274:	08004353 	.word	0x08004353
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	1d1a      	adds	r2, r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	602a      	str	r2, [r5, #0]
 8004280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004288:	2301      	movs	r3, #1
 800428a:	e09f      	b.n	80043cc <_printf_i+0x1ec>
 800428c:	6820      	ldr	r0, [r4, #0]
 800428e:	682b      	ldr	r3, [r5, #0]
 8004290:	0607      	lsls	r7, r0, #24
 8004292:	f103 0104 	add.w	r1, r3, #4
 8004296:	6029      	str	r1, [r5, #0]
 8004298:	d501      	bpl.n	800429e <_printf_i+0xbe>
 800429a:	681e      	ldr	r6, [r3, #0]
 800429c:	e003      	b.n	80042a6 <_printf_i+0xc6>
 800429e:	0646      	lsls	r6, r0, #25
 80042a0:	d5fb      	bpl.n	800429a <_printf_i+0xba>
 80042a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042a6:	2e00      	cmp	r6, #0
 80042a8:	da03      	bge.n	80042b2 <_printf_i+0xd2>
 80042aa:	232d      	movs	r3, #45	; 0x2d
 80042ac:	4276      	negs	r6, r6
 80042ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b2:	485a      	ldr	r0, [pc, #360]	; (800441c <_printf_i+0x23c>)
 80042b4:	230a      	movs	r3, #10
 80042b6:	e012      	b.n	80042de <_printf_i+0xfe>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	1d19      	adds	r1, r3, #4
 80042be:	6029      	str	r1, [r5, #0]
 80042c0:	0605      	lsls	r5, r0, #24
 80042c2:	d501      	bpl.n	80042c8 <_printf_i+0xe8>
 80042c4:	681e      	ldr	r6, [r3, #0]
 80042c6:	e002      	b.n	80042ce <_printf_i+0xee>
 80042c8:	0641      	lsls	r1, r0, #25
 80042ca:	d5fb      	bpl.n	80042c4 <_printf_i+0xe4>
 80042cc:	881e      	ldrh	r6, [r3, #0]
 80042ce:	4853      	ldr	r0, [pc, #332]	; (800441c <_printf_i+0x23c>)
 80042d0:	2f6f      	cmp	r7, #111	; 0x6f
 80042d2:	bf0c      	ite	eq
 80042d4:	2308      	moveq	r3, #8
 80042d6:	230a      	movne	r3, #10
 80042d8:	2100      	movs	r1, #0
 80042da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042de:	6865      	ldr	r5, [r4, #4]
 80042e0:	60a5      	str	r5, [r4, #8]
 80042e2:	2d00      	cmp	r5, #0
 80042e4:	bfa2      	ittt	ge
 80042e6:	6821      	ldrge	r1, [r4, #0]
 80042e8:	f021 0104 	bicge.w	r1, r1, #4
 80042ec:	6021      	strge	r1, [r4, #0]
 80042ee:	b90e      	cbnz	r6, 80042f4 <_printf_i+0x114>
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	d04b      	beq.n	800438c <_printf_i+0x1ac>
 80042f4:	4615      	mov	r5, r2
 80042f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80042fa:	fb03 6711 	mls	r7, r3, r1, r6
 80042fe:	5dc7      	ldrb	r7, [r0, r7]
 8004300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004304:	4637      	mov	r7, r6
 8004306:	42bb      	cmp	r3, r7
 8004308:	460e      	mov	r6, r1
 800430a:	d9f4      	bls.n	80042f6 <_printf_i+0x116>
 800430c:	2b08      	cmp	r3, #8
 800430e:	d10b      	bne.n	8004328 <_printf_i+0x148>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	07de      	lsls	r6, r3, #31
 8004314:	d508      	bpl.n	8004328 <_printf_i+0x148>
 8004316:	6923      	ldr	r3, [r4, #16]
 8004318:	6861      	ldr	r1, [r4, #4]
 800431a:	4299      	cmp	r1, r3
 800431c:	bfde      	ittt	le
 800431e:	2330      	movle	r3, #48	; 0x30
 8004320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004324:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004328:	1b52      	subs	r2, r2, r5
 800432a:	6122      	str	r2, [r4, #16]
 800432c:	f8cd a000 	str.w	sl, [sp]
 8004330:	464b      	mov	r3, r9
 8004332:	aa03      	add	r2, sp, #12
 8004334:	4621      	mov	r1, r4
 8004336:	4640      	mov	r0, r8
 8004338:	f7ff fee4 	bl	8004104 <_printf_common>
 800433c:	3001      	adds	r0, #1
 800433e:	d14a      	bne.n	80043d6 <_printf_i+0x1f6>
 8004340:	f04f 30ff 	mov.w	r0, #4294967295
 8004344:	b004      	add	sp, #16
 8004346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	f043 0320 	orr.w	r3, r3, #32
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	4833      	ldr	r0, [pc, #204]	; (8004420 <_printf_i+0x240>)
 8004354:	2778      	movs	r7, #120	; 0x78
 8004356:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	6829      	ldr	r1, [r5, #0]
 800435e:	061f      	lsls	r7, r3, #24
 8004360:	f851 6b04 	ldr.w	r6, [r1], #4
 8004364:	d402      	bmi.n	800436c <_printf_i+0x18c>
 8004366:	065f      	lsls	r7, r3, #25
 8004368:	bf48      	it	mi
 800436a:	b2b6      	uxthmi	r6, r6
 800436c:	07df      	lsls	r7, r3, #31
 800436e:	bf48      	it	mi
 8004370:	f043 0320 	orrmi.w	r3, r3, #32
 8004374:	6029      	str	r1, [r5, #0]
 8004376:	bf48      	it	mi
 8004378:	6023      	strmi	r3, [r4, #0]
 800437a:	b91e      	cbnz	r6, 8004384 <_printf_i+0x1a4>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	f023 0320 	bic.w	r3, r3, #32
 8004382:	6023      	str	r3, [r4, #0]
 8004384:	2310      	movs	r3, #16
 8004386:	e7a7      	b.n	80042d8 <_printf_i+0xf8>
 8004388:	4824      	ldr	r0, [pc, #144]	; (800441c <_printf_i+0x23c>)
 800438a:	e7e4      	b.n	8004356 <_printf_i+0x176>
 800438c:	4615      	mov	r5, r2
 800438e:	e7bd      	b.n	800430c <_printf_i+0x12c>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	6826      	ldr	r6, [r4, #0]
 8004394:	6961      	ldr	r1, [r4, #20]
 8004396:	1d18      	adds	r0, r3, #4
 8004398:	6028      	str	r0, [r5, #0]
 800439a:	0635      	lsls	r5, r6, #24
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	d501      	bpl.n	80043a4 <_printf_i+0x1c4>
 80043a0:	6019      	str	r1, [r3, #0]
 80043a2:	e002      	b.n	80043aa <_printf_i+0x1ca>
 80043a4:	0670      	lsls	r0, r6, #25
 80043a6:	d5fb      	bpl.n	80043a0 <_printf_i+0x1c0>
 80043a8:	8019      	strh	r1, [r3, #0]
 80043aa:	2300      	movs	r3, #0
 80043ac:	6123      	str	r3, [r4, #16]
 80043ae:	4615      	mov	r5, r2
 80043b0:	e7bc      	b.n	800432c <_printf_i+0x14c>
 80043b2:	682b      	ldr	r3, [r5, #0]
 80043b4:	1d1a      	adds	r2, r3, #4
 80043b6:	602a      	str	r2, [r5, #0]
 80043b8:	681d      	ldr	r5, [r3, #0]
 80043ba:	6862      	ldr	r2, [r4, #4]
 80043bc:	2100      	movs	r1, #0
 80043be:	4628      	mov	r0, r5
 80043c0:	f7fb ff0e 	bl	80001e0 <memchr>
 80043c4:	b108      	cbz	r0, 80043ca <_printf_i+0x1ea>
 80043c6:	1b40      	subs	r0, r0, r5
 80043c8:	6060      	str	r0, [r4, #4]
 80043ca:	6863      	ldr	r3, [r4, #4]
 80043cc:	6123      	str	r3, [r4, #16]
 80043ce:	2300      	movs	r3, #0
 80043d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d4:	e7aa      	b.n	800432c <_printf_i+0x14c>
 80043d6:	6923      	ldr	r3, [r4, #16]
 80043d8:	462a      	mov	r2, r5
 80043da:	4649      	mov	r1, r9
 80043dc:	4640      	mov	r0, r8
 80043de:	47d0      	blx	sl
 80043e0:	3001      	adds	r0, #1
 80043e2:	d0ad      	beq.n	8004340 <_printf_i+0x160>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	079b      	lsls	r3, r3, #30
 80043e8:	d413      	bmi.n	8004412 <_printf_i+0x232>
 80043ea:	68e0      	ldr	r0, [r4, #12]
 80043ec:	9b03      	ldr	r3, [sp, #12]
 80043ee:	4298      	cmp	r0, r3
 80043f0:	bfb8      	it	lt
 80043f2:	4618      	movlt	r0, r3
 80043f4:	e7a6      	b.n	8004344 <_printf_i+0x164>
 80043f6:	2301      	movs	r3, #1
 80043f8:	4632      	mov	r2, r6
 80043fa:	4649      	mov	r1, r9
 80043fc:	4640      	mov	r0, r8
 80043fe:	47d0      	blx	sl
 8004400:	3001      	adds	r0, #1
 8004402:	d09d      	beq.n	8004340 <_printf_i+0x160>
 8004404:	3501      	adds	r5, #1
 8004406:	68e3      	ldr	r3, [r4, #12]
 8004408:	9903      	ldr	r1, [sp, #12]
 800440a:	1a5b      	subs	r3, r3, r1
 800440c:	42ab      	cmp	r3, r5
 800440e:	dcf2      	bgt.n	80043f6 <_printf_i+0x216>
 8004410:	e7eb      	b.n	80043ea <_printf_i+0x20a>
 8004412:	2500      	movs	r5, #0
 8004414:	f104 0619 	add.w	r6, r4, #25
 8004418:	e7f5      	b.n	8004406 <_printf_i+0x226>
 800441a:	bf00      	nop
 800441c:	08004849 	.word	0x08004849
 8004420:	0800485a 	.word	0x0800485a

08004424 <__sflush_r>:
 8004424:	898a      	ldrh	r2, [r1, #12]
 8004426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800442a:	4605      	mov	r5, r0
 800442c:	0710      	lsls	r0, r2, #28
 800442e:	460c      	mov	r4, r1
 8004430:	d458      	bmi.n	80044e4 <__sflush_r+0xc0>
 8004432:	684b      	ldr	r3, [r1, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	dc05      	bgt.n	8004444 <__sflush_r+0x20>
 8004438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	dc02      	bgt.n	8004444 <__sflush_r+0x20>
 800443e:	2000      	movs	r0, #0
 8004440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004446:	2e00      	cmp	r6, #0
 8004448:	d0f9      	beq.n	800443e <__sflush_r+0x1a>
 800444a:	2300      	movs	r3, #0
 800444c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004450:	682f      	ldr	r7, [r5, #0]
 8004452:	6a21      	ldr	r1, [r4, #32]
 8004454:	602b      	str	r3, [r5, #0]
 8004456:	d032      	beq.n	80044be <__sflush_r+0x9a>
 8004458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	075a      	lsls	r2, r3, #29
 800445e:	d505      	bpl.n	800446c <__sflush_r+0x48>
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	1ac0      	subs	r0, r0, r3
 8004464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004466:	b10b      	cbz	r3, 800446c <__sflush_r+0x48>
 8004468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800446a:	1ac0      	subs	r0, r0, r3
 800446c:	2300      	movs	r3, #0
 800446e:	4602      	mov	r2, r0
 8004470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004472:	6a21      	ldr	r1, [r4, #32]
 8004474:	4628      	mov	r0, r5
 8004476:	47b0      	blx	r6
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	89a3      	ldrh	r3, [r4, #12]
 800447c:	d106      	bne.n	800448c <__sflush_r+0x68>
 800447e:	6829      	ldr	r1, [r5, #0]
 8004480:	291d      	cmp	r1, #29
 8004482:	d82b      	bhi.n	80044dc <__sflush_r+0xb8>
 8004484:	4a29      	ldr	r2, [pc, #164]	; (800452c <__sflush_r+0x108>)
 8004486:	410a      	asrs	r2, r1
 8004488:	07d6      	lsls	r6, r2, #31
 800448a:	d427      	bmi.n	80044dc <__sflush_r+0xb8>
 800448c:	2200      	movs	r2, #0
 800448e:	6062      	str	r2, [r4, #4]
 8004490:	04d9      	lsls	r1, r3, #19
 8004492:	6922      	ldr	r2, [r4, #16]
 8004494:	6022      	str	r2, [r4, #0]
 8004496:	d504      	bpl.n	80044a2 <__sflush_r+0x7e>
 8004498:	1c42      	adds	r2, r0, #1
 800449a:	d101      	bne.n	80044a0 <__sflush_r+0x7c>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b903      	cbnz	r3, 80044a2 <__sflush_r+0x7e>
 80044a0:	6560      	str	r0, [r4, #84]	; 0x54
 80044a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a4:	602f      	str	r7, [r5, #0]
 80044a6:	2900      	cmp	r1, #0
 80044a8:	d0c9      	beq.n	800443e <__sflush_r+0x1a>
 80044aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044ae:	4299      	cmp	r1, r3
 80044b0:	d002      	beq.n	80044b8 <__sflush_r+0x94>
 80044b2:	4628      	mov	r0, r5
 80044b4:	f7ff fa8a 	bl	80039cc <_free_r>
 80044b8:	2000      	movs	r0, #0
 80044ba:	6360      	str	r0, [r4, #52]	; 0x34
 80044bc:	e7c0      	b.n	8004440 <__sflush_r+0x1c>
 80044be:	2301      	movs	r3, #1
 80044c0:	4628      	mov	r0, r5
 80044c2:	47b0      	blx	r6
 80044c4:	1c41      	adds	r1, r0, #1
 80044c6:	d1c8      	bne.n	800445a <__sflush_r+0x36>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0c5      	beq.n	800445a <__sflush_r+0x36>
 80044ce:	2b1d      	cmp	r3, #29
 80044d0:	d001      	beq.n	80044d6 <__sflush_r+0xb2>
 80044d2:	2b16      	cmp	r3, #22
 80044d4:	d101      	bne.n	80044da <__sflush_r+0xb6>
 80044d6:	602f      	str	r7, [r5, #0]
 80044d8:	e7b1      	b.n	800443e <__sflush_r+0x1a>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e0:	81a3      	strh	r3, [r4, #12]
 80044e2:	e7ad      	b.n	8004440 <__sflush_r+0x1c>
 80044e4:	690f      	ldr	r7, [r1, #16]
 80044e6:	2f00      	cmp	r7, #0
 80044e8:	d0a9      	beq.n	800443e <__sflush_r+0x1a>
 80044ea:	0793      	lsls	r3, r2, #30
 80044ec:	680e      	ldr	r6, [r1, #0]
 80044ee:	bf08      	it	eq
 80044f0:	694b      	ldreq	r3, [r1, #20]
 80044f2:	600f      	str	r7, [r1, #0]
 80044f4:	bf18      	it	ne
 80044f6:	2300      	movne	r3, #0
 80044f8:	eba6 0807 	sub.w	r8, r6, r7
 80044fc:	608b      	str	r3, [r1, #8]
 80044fe:	f1b8 0f00 	cmp.w	r8, #0
 8004502:	dd9c      	ble.n	800443e <__sflush_r+0x1a>
 8004504:	6a21      	ldr	r1, [r4, #32]
 8004506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004508:	4643      	mov	r3, r8
 800450a:	463a      	mov	r2, r7
 800450c:	4628      	mov	r0, r5
 800450e:	47b0      	blx	r6
 8004510:	2800      	cmp	r0, #0
 8004512:	dc06      	bgt.n	8004522 <__sflush_r+0xfe>
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451a:	81a3      	strh	r3, [r4, #12]
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	e78e      	b.n	8004440 <__sflush_r+0x1c>
 8004522:	4407      	add	r7, r0
 8004524:	eba8 0800 	sub.w	r8, r8, r0
 8004528:	e7e9      	b.n	80044fe <__sflush_r+0xda>
 800452a:	bf00      	nop
 800452c:	dfbffffe 	.word	0xdfbffffe

08004530 <_fflush_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	690b      	ldr	r3, [r1, #16]
 8004534:	4605      	mov	r5, r0
 8004536:	460c      	mov	r4, r1
 8004538:	b913      	cbnz	r3, 8004540 <_fflush_r+0x10>
 800453a:	2500      	movs	r5, #0
 800453c:	4628      	mov	r0, r5
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	b118      	cbz	r0, 800454a <_fflush_r+0x1a>
 8004542:	6a03      	ldr	r3, [r0, #32]
 8004544:	b90b      	cbnz	r3, 800454a <_fflush_r+0x1a>
 8004546:	f7fe ff7b 	bl	8003440 <__sinit>
 800454a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f3      	beq.n	800453a <_fflush_r+0xa>
 8004552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004554:	07d0      	lsls	r0, r2, #31
 8004556:	d404      	bmi.n	8004562 <_fflush_r+0x32>
 8004558:	0599      	lsls	r1, r3, #22
 800455a:	d402      	bmi.n	8004562 <_fflush_r+0x32>
 800455c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800455e:	f7ff fa32 	bl	80039c6 <__retarget_lock_acquire_recursive>
 8004562:	4628      	mov	r0, r5
 8004564:	4621      	mov	r1, r4
 8004566:	f7ff ff5d 	bl	8004424 <__sflush_r>
 800456a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800456c:	07da      	lsls	r2, r3, #31
 800456e:	4605      	mov	r5, r0
 8004570:	d4e4      	bmi.n	800453c <_fflush_r+0xc>
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	059b      	lsls	r3, r3, #22
 8004576:	d4e1      	bmi.n	800453c <_fflush_r+0xc>
 8004578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800457a:	f7ff fa25 	bl	80039c8 <__retarget_lock_release_recursive>
 800457e:	e7dd      	b.n	800453c <_fflush_r+0xc>

08004580 <__swhatbuf_r>:
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	460c      	mov	r4, r1
 8004584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004588:	2900      	cmp	r1, #0
 800458a:	b096      	sub	sp, #88	; 0x58
 800458c:	4615      	mov	r5, r2
 800458e:	461e      	mov	r6, r3
 8004590:	da0d      	bge.n	80045ae <__swhatbuf_r+0x2e>
 8004592:	89a3      	ldrh	r3, [r4, #12]
 8004594:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	bf0c      	ite	eq
 800459e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80045a2:	2340      	movne	r3, #64	; 0x40
 80045a4:	2000      	movs	r0, #0
 80045a6:	6031      	str	r1, [r6, #0]
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	b016      	add	sp, #88	; 0x58
 80045ac:	bd70      	pop	{r4, r5, r6, pc}
 80045ae:	466a      	mov	r2, sp
 80045b0:	f000 f862 	bl	8004678 <_fstat_r>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	dbec      	blt.n	8004592 <__swhatbuf_r+0x12>
 80045b8:	9901      	ldr	r1, [sp, #4]
 80045ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80045be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80045c2:	4259      	negs	r1, r3
 80045c4:	4159      	adcs	r1, r3
 80045c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ca:	e7eb      	b.n	80045a4 <__swhatbuf_r+0x24>

080045cc <__smakebuf_r>:
 80045cc:	898b      	ldrh	r3, [r1, #12]
 80045ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045d0:	079d      	lsls	r5, r3, #30
 80045d2:	4606      	mov	r6, r0
 80045d4:	460c      	mov	r4, r1
 80045d6:	d507      	bpl.n	80045e8 <__smakebuf_r+0x1c>
 80045d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	2301      	movs	r3, #1
 80045e2:	6163      	str	r3, [r4, #20]
 80045e4:	b002      	add	sp, #8
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	ab01      	add	r3, sp, #4
 80045ea:	466a      	mov	r2, sp
 80045ec:	f7ff ffc8 	bl	8004580 <__swhatbuf_r>
 80045f0:	9900      	ldr	r1, [sp, #0]
 80045f2:	4605      	mov	r5, r0
 80045f4:	4630      	mov	r0, r6
 80045f6:	f7ff fa5d 	bl	8003ab4 <_malloc_r>
 80045fa:	b948      	cbnz	r0, 8004610 <__smakebuf_r+0x44>
 80045fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004600:	059a      	lsls	r2, r3, #22
 8004602:	d4ef      	bmi.n	80045e4 <__smakebuf_r+0x18>
 8004604:	f023 0303 	bic.w	r3, r3, #3
 8004608:	f043 0302 	orr.w	r3, r3, #2
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	e7e3      	b.n	80045d8 <__smakebuf_r+0xc>
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	6020      	str	r0, [r4, #0]
 8004614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	9b00      	ldr	r3, [sp, #0]
 800461c:	6163      	str	r3, [r4, #20]
 800461e:	9b01      	ldr	r3, [sp, #4]
 8004620:	6120      	str	r0, [r4, #16]
 8004622:	b15b      	cbz	r3, 800463c <__smakebuf_r+0x70>
 8004624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004628:	4630      	mov	r0, r6
 800462a:	f000 f837 	bl	800469c <_isatty_r>
 800462e:	b128      	cbz	r0, 800463c <__smakebuf_r+0x70>
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	f023 0303 	bic.w	r3, r3, #3
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	81a3      	strh	r3, [r4, #12]
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	431d      	orrs	r5, r3
 8004640:	81a5      	strh	r5, [r4, #12]
 8004642:	e7cf      	b.n	80045e4 <__smakebuf_r+0x18>

08004644 <memmove>:
 8004644:	4288      	cmp	r0, r1
 8004646:	b510      	push	{r4, lr}
 8004648:	eb01 0402 	add.w	r4, r1, r2
 800464c:	d902      	bls.n	8004654 <memmove+0x10>
 800464e:	4284      	cmp	r4, r0
 8004650:	4623      	mov	r3, r4
 8004652:	d807      	bhi.n	8004664 <memmove+0x20>
 8004654:	1e43      	subs	r3, r0, #1
 8004656:	42a1      	cmp	r1, r4
 8004658:	d008      	beq.n	800466c <memmove+0x28>
 800465a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800465e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004662:	e7f8      	b.n	8004656 <memmove+0x12>
 8004664:	4402      	add	r2, r0
 8004666:	4601      	mov	r1, r0
 8004668:	428a      	cmp	r2, r1
 800466a:	d100      	bne.n	800466e <memmove+0x2a>
 800466c:	bd10      	pop	{r4, pc}
 800466e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004676:	e7f7      	b.n	8004668 <memmove+0x24>

08004678 <_fstat_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4d07      	ldr	r5, [pc, #28]	; (8004698 <_fstat_r+0x20>)
 800467c:	2300      	movs	r3, #0
 800467e:	4604      	mov	r4, r0
 8004680:	4608      	mov	r0, r1
 8004682:	4611      	mov	r1, r2
 8004684:	602b      	str	r3, [r5, #0]
 8004686:	f7fc fb20 	bl	8000cca <_fstat>
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	d102      	bne.n	8004694 <_fstat_r+0x1c>
 800468e:	682b      	ldr	r3, [r5, #0]
 8004690:	b103      	cbz	r3, 8004694 <_fstat_r+0x1c>
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	bd38      	pop	{r3, r4, r5, pc}
 8004696:	bf00      	nop
 8004698:	20000258 	.word	0x20000258

0800469c <_isatty_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4d06      	ldr	r5, [pc, #24]	; (80046b8 <_isatty_r+0x1c>)
 80046a0:	2300      	movs	r3, #0
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	f7fc fb1f 	bl	8000cea <_isatty>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_isatty_r+0x1a>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_isatty_r+0x1a>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	20000258 	.word	0x20000258

080046bc <_sbrk_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4d06      	ldr	r5, [pc, #24]	; (80046d8 <_sbrk_r+0x1c>)
 80046c0:	2300      	movs	r3, #0
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	602b      	str	r3, [r5, #0]
 80046c8:	f7fc fb28 	bl	8000d1c <_sbrk>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_sbrk_r+0x1a>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_sbrk_r+0x1a>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	20000258 	.word	0x20000258

080046dc <memcpy>:
 80046dc:	440a      	add	r2, r1
 80046de:	4291      	cmp	r1, r2
 80046e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046e4:	d100      	bne.n	80046e8 <memcpy+0xc>
 80046e6:	4770      	bx	lr
 80046e8:	b510      	push	{r4, lr}
 80046ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046f2:	4291      	cmp	r1, r2
 80046f4:	d1f9      	bne.n	80046ea <memcpy+0xe>
 80046f6:	bd10      	pop	{r4, pc}

080046f8 <_realloc_r>:
 80046f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fc:	4680      	mov	r8, r0
 80046fe:	4614      	mov	r4, r2
 8004700:	460e      	mov	r6, r1
 8004702:	b921      	cbnz	r1, 800470e <_realloc_r+0x16>
 8004704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004708:	4611      	mov	r1, r2
 800470a:	f7ff b9d3 	b.w	8003ab4 <_malloc_r>
 800470e:	b92a      	cbnz	r2, 800471c <_realloc_r+0x24>
 8004710:	f7ff f95c 	bl	80039cc <_free_r>
 8004714:	4625      	mov	r5, r4
 8004716:	4628      	mov	r0, r5
 8004718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800471c:	f000 f81b 	bl	8004756 <_malloc_usable_size_r>
 8004720:	4284      	cmp	r4, r0
 8004722:	4607      	mov	r7, r0
 8004724:	d802      	bhi.n	800472c <_realloc_r+0x34>
 8004726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800472a:	d812      	bhi.n	8004752 <_realloc_r+0x5a>
 800472c:	4621      	mov	r1, r4
 800472e:	4640      	mov	r0, r8
 8004730:	f7ff f9c0 	bl	8003ab4 <_malloc_r>
 8004734:	4605      	mov	r5, r0
 8004736:	2800      	cmp	r0, #0
 8004738:	d0ed      	beq.n	8004716 <_realloc_r+0x1e>
 800473a:	42bc      	cmp	r4, r7
 800473c:	4622      	mov	r2, r4
 800473e:	4631      	mov	r1, r6
 8004740:	bf28      	it	cs
 8004742:	463a      	movcs	r2, r7
 8004744:	f7ff ffca 	bl	80046dc <memcpy>
 8004748:	4631      	mov	r1, r6
 800474a:	4640      	mov	r0, r8
 800474c:	f7ff f93e 	bl	80039cc <_free_r>
 8004750:	e7e1      	b.n	8004716 <_realloc_r+0x1e>
 8004752:	4635      	mov	r5, r6
 8004754:	e7df      	b.n	8004716 <_realloc_r+0x1e>

08004756 <_malloc_usable_size_r>:
 8004756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475a:	1f18      	subs	r0, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	bfbc      	itt	lt
 8004760:	580b      	ldrlt	r3, [r1, r0]
 8004762:	18c0      	addlt	r0, r0, r3
 8004764:	4770      	bx	lr
	...

08004768 <_init>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr

08004774 <_fini>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr
