
test004_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004338  08004338  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004340  08004340  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004340  08004340  00014340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004344  08004344  00014344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  080043b0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080043b0  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa01  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d6f  00000000  00000000  0002aadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0002c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b8  00000000  00000000  0002d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b1b  00000000  00000000  0002d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b3d2  00000000  00000000  000452fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009527e  00000000  00000000  000506cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c60  00000000  00000000  000e594c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000e85ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004238 	.word	0x08004238

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004238 	.word	0x08004238

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fbf7 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f84f 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f941 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f915 	bl	80007bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000592:	f000 f8b3 	bl	80006fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("ADC - Polling");
 8000596:	481d      	ldr	r0, [pc, #116]	; (800060c <main+0x90>)
 8000598:	f000 f9de 	bl	8000958 <ProgramStart>
  HAL_ADC_Start(&hadc1);			//continuous
 800059c:	481c      	ldr	r0, [pc, #112]	; (8000610 <main+0x94>)
 800059e:	f000 fcc3 	bl	8000f28 <HAL_ADC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_ADC_Start(&hadc1); //discontinuous
	  HAL_ADC_PollForConversion(&hadc1,  10 /*ms*/);
 80005a2:	210a      	movs	r1, #10
 80005a4:	481a      	ldr	r0, [pc, #104]	; (8000610 <main+0x94>)
 80005a6:	f000 fd73 	bl	8001090 <HAL_ADC_PollForConversion>
	  int val1 = HAL_ADC_GetValue(&hadc1) / 51;
 80005aa:	4819      	ldr	r0, [pc, #100]	; (8000610 <main+0x94>)
 80005ac:	f000 ff0b 	bl	80013c6 <HAL_ADC_GetValue>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a18      	ldr	r2, [pc, #96]	; (8000614 <main+0x98>)
 80005b4:	fba2 2303 	umull	r2, r3, r2, r3
 80005b8:	095b      	lsrs	r3, r3, #5
 80005ba:	607b      	str	r3, [r7, #4]

	  //HAL_ADC_Start(&hadc1); //discontinuous
	  HAL_ADC_PollForConversion(&hadc1,  10 /*ms*/);
 80005bc:	210a      	movs	r1, #10
 80005be:	4814      	ldr	r0, [pc, #80]	; (8000610 <main+0x94>)
 80005c0:	f000 fd66 	bl	8001090 <HAL_ADC_PollForConversion>
	  int val2 = HAL_ADC_GetValue(&hadc1) / 171;
 80005c4:	4812      	ldr	r0, [pc, #72]	; (8000610 <main+0x94>)
 80005c6:	f000 fefe 	bl	80013c6 <HAL_ADC_GetValue>
 80005ca:	4602      	mov	r2, r0
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <main+0x9c>)
 80005ce:	fba3 1302 	umull	r1, r3, r3, r2
 80005d2:	1ad2      	subs	r2, r2, r3
 80005d4:	0852      	lsrs	r2, r2, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	09db      	lsrs	r3, r3, #7
 80005da:	603b      	str	r3, [r7, #0]

	  if(HAL_GPIO_ReadPin(z_axis_GPIO_Port, z_axis_Pin))
 80005dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <main+0xa0>)
 80005e2:	f001 fbe9 	bl	8001db8 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d005      	beq.n	80005f8 <main+0x7c>
		  printf("Value (%d, %d)\r\n", val1, val2);
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <main+0xa4>)
 80005f2:	f002 fd79 	bl	80030e8 <iprintf>
 80005f6:	e004      	b.n	8000602 <main+0x86>
	  else
		  printf("Value (%d, %d)Pushed\r\n", val1, val2);
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <main+0xa8>)
 80005fe:	f002 fd73 	bl	80030e8 <iprintf>
//	  Cursor(val1, val2);
	  HAL_Delay(100);
 8000602:	2064      	movs	r0, #100	; 0x64
 8000604:	f000 fc28 	bl	8000e58 <HAL_Delay>
  {
 8000608:	e7cb      	b.n	80005a2 <main+0x26>
 800060a:	bf00      	nop
 800060c:	08004250 	.word	0x08004250
 8000610:	20000084 	.word	0x20000084
 8000614:	a0a0a0a1 	.word	0xa0a0a0a1
 8000618:	7f405fd1 	.word	0x7f405fd1
 800061c:	40020000 	.word	0x40020000
 8000620:	08004260 	.word	0x08004260
 8000624:	08004274 	.word	0x08004274

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 febc 	bl	80033b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800069c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fbb4 	bl	8001e1c <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ba:	f000 f925 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fe16 	bl	800230c <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f90f 	bl	8000908 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000710:	4a28      	ldr	r2, [pc, #160]	; (80007b4 <MX_ADC1_Init+0xb8>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800071a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000724:	2201      	movs	r2, #1
 8000726:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000728:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800072a:	2201      	movs	r2, #1
 800072c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000738:	2200      	movs	r2, #0
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <MX_ADC1_Init+0xbc>)
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800074a:	2202      	movs	r2, #2
 800074c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075c:	4814      	ldr	r0, [pc, #80]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800075e:	f000 fb9f 	bl	8000ea0 <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f8ce 	bl	8000908 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800076c:	2300      	movs	r3, #0
 800076e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800077e:	f000 fe4d 	bl	800141c <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000788:	f000 f8be 	bl	8000908 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800078c:	2301      	movs	r3, #1
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800079a:	f000 fe3f 	bl	800141c <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007a4:	f000 f8b0 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000084 	.word	0x20000084
 80007b4:	40012000 	.word	0x40012000
 80007b8:	0f000001 	.word	0x0f000001

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f001 ffaa 	bl	800274c <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f883 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000cc 	.word	0x200000cc
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b34      	ldr	r3, [pc, #208]	; (80008fc <MX_GPIO_Init+0xec>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a33      	ldr	r2, [pc, #204]	; (80008fc <MX_GPIO_Init+0xec>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b31      	ldr	r3, [pc, #196]	; (80008fc <MX_GPIO_Init+0xec>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_GPIO_Init+0xec>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a2c      	ldr	r2, [pc, #176]	; (80008fc <MX_GPIO_Init+0xec>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_GPIO_Init+0xec>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_GPIO_Init+0xec>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a25      	ldr	r2, [pc, #148]	; (80008fc <MX_GPIO_Init+0xec>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_GPIO_Init+0xec>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_GPIO_Init+0xec>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <MX_GPIO_Init+0xec>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_GPIO_Init+0xec>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	4819      	ldr	r0, [pc, #100]	; (8000900 <MX_GPIO_Init+0xf0>)
 800089c:	f001 faa4 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_GPIO_Init+0xf4>)
 80008b8:	f001 f8fa 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	480b      	ldr	r0, [pc, #44]	; (8000900 <MX_GPIO_Init+0xf0>)
 80008d4:	f001 f8ec 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : z_axis_Pin */
  GPIO_InitStruct.Pin = z_axis_Pin;
 80008d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(z_axis_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_GPIO_Init+0xf0>)
 80008ee:	f001 f8df 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020800 	.word	0x40020800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <__io_putchar>:
#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c.h"
extern UART_HandleTypeDef huart2;
int *hi2c = NULL;
//I2C_HandleTypeDef *hi2c = NULL;
int __io_putchar(int ch)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 800091c:	1d39      	adds	r1, r7, #4
 800091e:	230a      	movs	r3, #10
 8000920:	2201      	movs	r2, #1
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <__io_putchar+0x20>)
 8000924:	f001 ff62 	bl	80027ec <HAL_UART_Transmit>
	return ch;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000cc 	.word	0x200000cc

08000938 <StandBy>:

void StandBy()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 800093c:	bf00      	nop
 800093e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <StandBy+0x1c>)
 8000944:	f001 fa38 	bl	8001db8 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1f7      	bne.n	800093e <StandBy+0x6>
}
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40020800 	.word	0x40020800

08000958 <ProgramStart>:

void ProgramStart(char * str)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	//printf("\033[2J\033[0;0H");
	cls();
 8000960:	f000 f816 	bl	8000990 <cls>
	Cursor(0, 0);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f000 f81c 	bl	80009a4 <Cursor>
	printf("Program Name - %s\r\n", str);
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <ProgramStart+0x30>)
 8000970:	f002 fbba 	bl	80030e8 <iprintf>
	printf("Press Blue-Button(B1) to Start...\r\n");
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <ProgramStart+0x34>)
 8000976:	f002 fc1d 	bl	80031b4 <puts>
	StandBy();
 800097a:	f7ff ffdd 	bl	8000938 <StandBy>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	0800428c 	.word	0x0800428c
 800098c:	080042a0 	.word	0x080042a0

08000990 <cls>:

void cls()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <cls+0x10>)
 8000996:	f002 fba7 	bl	80030e8 <iprintf>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	080042c4 	.word	0x080042c4

080009a4 <Cursor>:

void Cursor(int x, int y)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 80009ae:	f107 000c 	add.w	r0, r7, #12
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	4906      	ldr	r1, [pc, #24]	; (80009d0 <Cursor+0x2c>)
 80009b8:	f002 fc04 	bl	80031c4 <siprintf>
	puts(buf);   		//or printf("%s", buf);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fbf7 	bl	80031b4 <puts>
}
 80009c6:	bf00      	nop
 80009c8:	3720      	adds	r7, #32
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	080042cc 	.word	0x080042cc

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a12:	2007      	movs	r0, #7
 8000a14:	f001 f80a 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800

08000a24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <HAL_ADC_MspInit+0x8c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d12f      	bne.n	8000aa6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_ADC_MspInit+0x90>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = x_axis_Pin|y_axis_Pin;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a82:	2303      	movs	r3, #3
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <HAL_ADC_MspInit+0x94>)
 8000a92:	f001 f80d 	bl	8001ab0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2012      	movs	r0, #18
 8000a9c:	f000 ffd1 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000aa0:	2012      	movs	r0, #18
 8000aa2:	f000 ffea 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40012000 	.word	0x40012000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_UART_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12b      	bne.n	8000b36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_UART_MspInit+0x8c>)
 8000b32:	f000 ffbd 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f93e 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <ADC_IRQHandler+0x10>)
 8000ba6:	f000 fafe 	bl	80011a6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000084 	.word	0x20000084

08000bb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bc6:	f3af 8000 	nop.w
 8000bca:	4601      	mov	r1, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf0      	blt.n	8000bc6 <_read+0x12>
  }

  return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e009      	b.n	8000c14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fe83 	bl	8000914 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf1      	blt.n	8000c00 <_write+0x12>
  }
  return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f002 fbc6 	bl	8003450 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20020000 	.word	0x20020000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000114 	.word	0x20000114
 8000cf8:	20000268 	.word	0x20000268

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d24:	f7ff ffea 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f002 fb85 	bl	800345c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc13 	bl	800057c <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d64:	08004348 	.word	0x08004348
  ldr r2, =_sbss
 8000d68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d6c:	20000268 	.word	0x20000268

08000d70 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <DMA1_Stream0_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 fe45 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fe14 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fe5d 	bl	8001a96 <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 fe25 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000118 	.word	0x20000118

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000118 	.word	0x20000118

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e033      	b.n	8000f1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d109      	bne.n	8000ed2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fdb0 	bl	8000a24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d118      	bne.n	8000f10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ee6:	f023 0302 	bic.w	r3, r3, #2
 8000eea:	f043 0202 	orr.w	r2, r3, #2
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 fbc4 	bl	8001680 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f023 0303 	bic.w	r3, r3, #3
 8000f06:	f043 0201 	orr.w	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f0e:	e001      	b.n	8000f14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Start+0x1a>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e097      	b.n	8001072 <HAL_ADC_Start+0x14a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d018      	beq.n	8000f8a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f68:	4b45      	ldr	r3, [pc, #276]	; (8001080 <HAL_ADC_Start+0x158>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a45      	ldr	r2, [pc, #276]	; (8001084 <HAL_ADC_Start+0x15c>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0c9a      	lsrs	r2, r3, #18
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f7c:	e002      	b.n	8000f84 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f9      	bne.n	8000f7e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d15f      	bne.n	8001058 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fd6:	d106      	bne.n	8000fe6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	f023 0206 	bic.w	r2, r3, #6
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	645a      	str	r2, [r3, #68]	; 0x44
 8000fe4:	e002      	b.n	8000fec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_ADC_Start+0x160>)
 8000ff6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001000:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 031f 	and.w	r3, r3, #31
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10f      	bne.n	800102e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d129      	bne.n	8001070 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	e020      	b.n	8001070 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <HAL_ADC_Start+0x164>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d11b      	bne.n	8001070 <HAL_ADC_Start+0x148>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d114      	bne.n	8001070 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	e00b      	b.n	8001070 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f043 0210 	orr.w	r2, r3, #16
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	f043 0201 	orr.w	r2, r3, #1
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000000 	.word	0x20000000
 8001084:	431bde83 	.word	0x431bde83
 8001088:	40012300 	.word	0x40012300
 800108c:	40012000 	.word	0x40012000

08001090 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ac:	d113      	bne.n	80010d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010bc:	d10b      	bne.n	80010d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f043 0220 	orr.w	r2, r3, #32
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e063      	b.n	800119e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d6:	f7ff feb3 	bl	8000e40 <HAL_GetTick>
 80010da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010dc:	e021      	b.n	8001122 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d01d      	beq.n	8001122 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <HAL_ADC_PollForConversion+0x6c>
 80010ec:	f7ff fea8 	bl	8000e40 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d212      	bcs.n	8001122 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b02      	cmp	r3, #2
 8001108:	d00b      	beq.n	8001122 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f043 0204 	orr.w	r2, r3, #4
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e03d      	b.n	800119e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b02      	cmp	r3, #2
 800112e:	d1d6      	bne.n	80010de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f06f 0212 	mvn.w	r2, #18
 8001138:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d123      	bne.n	800119c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001158:	2b00      	cmp	r3, #0
 800115a:	d11f      	bne.n	800119c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001174:	2b00      	cmp	r3, #0
 8001176:	d111      	bne.n	800119c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d105      	bne.n	800119c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f003 0320 	and.w	r3, r3, #32
 80011d4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d049      	beq.n	8001270 <HAL_ADC_IRQHandler+0xca>
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d046      	beq.n	8001270 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d105      	bne.n	80011fa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d12b      	bne.n	8001260 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800120c:	2b00      	cmp	r3, #0
 800120e:	d127      	bne.n	8001260 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001228:	2b00      	cmp	r3, #0
 800122a:	d119      	bne.n	8001260 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0220 	bic.w	r2, r2, #32
 800123a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d105      	bne.n	8001260 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f8bd 	bl	80013e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f06f 0212 	mvn.w	r2, #18
 800126e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d057      	beq.n	8001336 <HAL_ADC_IRQHandler+0x190>
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d054      	beq.n	8001336 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d139      	bne.n	8001326 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d12b      	bne.n	8001326 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d124      	bne.n	8001326 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d11d      	bne.n	8001326 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d119      	bne.n	8001326 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001300:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f043 0201 	orr.w	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 faa6 	bl	8001878 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f06f 020c 	mvn.w	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001344:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d017      	beq.n	800137c <HAL_ADC_IRQHandler+0x1d6>
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d014      	beq.n	800137c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10d      	bne.n	800137c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f841 	bl	80013f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f06f 0201 	mvn.w	r2, #1
 800137a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800138a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d015      	beq.n	80013be <HAL_ADC_IRQHandler+0x218>
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d012      	beq.n	80013be <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	f043 0202 	orr.w	r2, r3, #2
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f06f 0220 	mvn.w	r2, #32
 80013ac:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f82a 	bl	8001408 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f06f 0220 	mvn.w	r2, #32
 80013bc:	601a      	str	r2, [r3, #0]
  }
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x1c>
 8001434:	2302      	movs	r3, #2
 8001436:	e113      	b.n	8001660 <HAL_ADC_ConfigChannel+0x244>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b09      	cmp	r3, #9
 8001446:	d925      	bls.n	8001494 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68d9      	ldr	r1, [r3, #12]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	3b1e      	subs	r3, #30
 800145e:	2207      	movs	r2, #7
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43da      	mvns	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	400a      	ands	r2, r1
 800146c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68d9      	ldr	r1, [r3, #12]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	4603      	mov	r3, r0
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4403      	add	r3, r0
 8001486:	3b1e      	subs	r3, #30
 8001488:	409a      	lsls	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	e022      	b.n	80014da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	2207      	movs	r2, #7
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	400a      	ands	r2, r1
 80014b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6919      	ldr	r1, [r3, #16]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4403      	add	r3, r0
 80014d0:	409a      	lsls	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d824      	bhi.n	800152c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3b05      	subs	r3, #5
 80014f4:	221f      	movs	r2, #31
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	400a      	ands	r2, r1
 8001502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3b05      	subs	r3, #5
 800151e:	fa00 f203 	lsl.w	r2, r0, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
 800152a:	e04c      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d824      	bhi.n	800157e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b23      	subs	r3, #35	; 0x23
 8001546:	221f      	movs	r2, #31
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43da      	mvns	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	400a      	ands	r2, r1
 8001554:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	3b23      	subs	r3, #35	; 0x23
 8001570:	fa00 f203 	lsl.w	r2, r0, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
 800157c:	e023      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	3b41      	subs	r3, #65	; 0x41
 8001590:	221f      	movs	r2, #31
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	400a      	ands	r2, r1
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	3b41      	subs	r3, #65	; 0x41
 80015ba:	fa00 f203 	lsl.w	r2, r0, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c6:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_ADC_ConfigChannel+0x250>)
 80015c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a28      	ldr	r2, [pc, #160]	; (8001670 <HAL_ADC_ConfigChannel+0x254>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d10f      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1d8>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b12      	cmp	r3, #18
 80015da:	d10b      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <HAL_ADC_ConfigChannel+0x254>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d12b      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x23a>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_ADC_ConfigChannel+0x258>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d003      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x1f4>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b11      	cmp	r3, #17
 800160e:	d122      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_ADC_ConfigChannel+0x258>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d111      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_ADC_ConfigChannel+0x25c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a11      	ldr	r2, [pc, #68]	; (800167c <HAL_ADC_ConfigChannel+0x260>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	0c9a      	lsrs	r2, r3, #18
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001648:	e002      	b.n	8001650 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3b01      	subs	r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f9      	bne.n	800164a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40012300 	.word	0x40012300
 8001670:	40012000 	.word	0x40012000
 8001674:	10000012 	.word	0x10000012
 8001678:	20000000 	.word	0x20000000
 800167c:	431bde83 	.word	0x431bde83

08001680 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001688:	4b79      	ldr	r3, [pc, #484]	; (8001870 <ADC_Init+0x1f0>)
 800168a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	021a      	lsls	r2, r3, #8
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6899      	ldr	r1, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	4a58      	ldr	r2, [pc, #352]	; (8001874 <ADC_Init+0x1f4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d022      	beq.n	800175e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001726:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6899      	ldr	r1, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6899      	ldr	r1, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	e00f      	b.n	800177e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800176c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800177c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0202 	bic.w	r2, r2, #2
 800178c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6899      	ldr	r1, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7e1b      	ldrb	r3, [r3, #24]
 8001798:	005a      	lsls	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d01b      	beq.n	80017e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6859      	ldr	r1, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	3b01      	subs	r3, #1
 80017d8:	035a      	lsls	r2, r3, #13
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	e007      	b.n	80017f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	3b01      	subs	r3, #1
 8001810:	051a      	lsls	r2, r3, #20
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001828:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6899      	ldr	r1, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001836:	025a      	lsls	r2, r3, #9
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6899      	ldr	r1, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	029a      	lsls	r2, r3, #10
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	609a      	str	r2, [r3, #8]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40012300 	.word	0x40012300
 8001874:	0f000001 	.word	0x0f000001

08001878 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff29 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff3e 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff8e 	bl	8001980 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5d 	bl	800192c <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff31 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa2 	bl	80019e8 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e159      	b.n	8001d80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f040 8148 	bne.w	8001d7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d005      	beq.n	8001b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d130      	bne.n	8001b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 0201 	and.w	r2, r3, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d017      	beq.n	8001ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d123      	bne.n	8001bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	08da      	lsrs	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3208      	adds	r2, #8
 8001bee:	69b9      	ldr	r1, [r7, #24]
 8001bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a2 	beq.w	8001d7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b57      	ldr	r3, [pc, #348]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c52:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a49      	ldr	r2, [pc, #292]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x202>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_GPIO_Init+0x2f4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x1fe>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <HAL_GPIO_Init+0x2f8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x1fa>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a46      	ldr	r2, [pc, #280]	; (8001dac <HAL_GPIO_Init+0x2fc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x1f6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a45      	ldr	r2, [pc, #276]	; (8001db0 <HAL_GPIO_Init+0x300>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x1f2>
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x204>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a24      	ldr	r2, [pc, #144]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <HAL_GPIO_Init+0x304>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f aea2 	bls.w	8001acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40013c00 	.word	0x40013c00

08001db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e001      	b.n	8001dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e04:	e003      	b.n	8001e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e267      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d075      	beq.n	8001f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e3a:	4b88      	ldr	r3, [pc, #544]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d00c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d112      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e52:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e5e:	d10b      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	4b7e      	ldr	r3, [pc, #504]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d05b      	beq.n	8001f24 <HAL_RCC_OscConfig+0x108>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d157      	bne.n	8001f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e242      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d106      	bne.n	8001e90 <HAL_RCC_OscConfig+0x74>
 8001e82:	4b76      	ldr	r3, [pc, #472]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a75      	ldr	r2, [pc, #468]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xb0>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x98>
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6f      	ldr	r2, [pc, #444]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b6d      	ldr	r3, [pc, #436]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6c      	ldr	r2, [pc, #432]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xb0>
 8001eb4:	4b69      	ldr	r3, [pc, #420]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a68      	ldr	r2, [pc, #416]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b66      	ldr	r3, [pc, #408]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a65      	ldr	r2, [pc, #404]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe ffb4 	bl	8000e40 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7fe ffb0 	bl	8000e40 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e207      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xc0>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe ffa0 	bl	8000e40 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7fe ff9c 	bl	8000e40 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1f3      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b51      	ldr	r3, [pc, #324]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0xe8>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f32:	4b4a      	ldr	r3, [pc, #296]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b44      	ldr	r3, [pc, #272]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x152>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1c7      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4937      	ldr	r1, [pc, #220]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e03a      	b.n	8001ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_OscConfig+0x244>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7fe ff55 	bl	8000e40 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7fe ff51 	bl	8000e40 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1a8      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4925      	ldr	r1, [pc, #148]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x244>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7fe ff34 	bl	8000e40 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7fe ff30 	bl	8000e40 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e187      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d036      	beq.n	8002074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d016      	beq.n	800203c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_RCC_OscConfig+0x248>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7fe ff14 	bl	8000e40 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7fe ff10 	bl	8000e40 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e167      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8002030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x200>
 800203a:	e01b      	b.n	8002074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_OscConfig+0x248>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7fe fefd 	bl	8000e40 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	e00e      	b.n	8002068 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204a:	f7fe fef9 	bl	8000e40 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d907      	bls.n	8002068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e150      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
 800205c:	40023800 	.word	0x40023800
 8002060:	42470000 	.word	0x42470000
 8002064:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800206a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ea      	bne.n	800204a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8097 	beq.w	80021b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10f      	bne.n	80020b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	4b7d      	ldr	r3, [pc, #500]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a7c      	ldr	r2, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b7a      	ldr	r3, [pc, #488]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	4b77      	ldr	r3, [pc, #476]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d118      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020be:	4b74      	ldr	r3, [pc, #464]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a73      	ldr	r2, [pc, #460]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ca:	f7fe feb9 	bl	8000e40 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7fe feb5 	bl	8000e40 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e10c      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x2ea>
 80020f8:	4b64      	ldr	r3, [pc, #400]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a63      	ldr	r2, [pc, #396]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	e01c      	b.n	8002140 <HAL_RCC_OscConfig+0x324>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b05      	cmp	r3, #5
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x30c>
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a5e      	ldr	r2, [pc, #376]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	4b5c      	ldr	r3, [pc, #368]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a5b      	ldr	r2, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0x324>
 8002128:	4b58      	ldr	r3, [pc, #352]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	4b55      	ldr	r3, [pc, #340]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a54      	ldr	r2, [pc, #336]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800213a:	f023 0304 	bic.w	r3, r3, #4
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d015      	beq.n	8002174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7fe fe7a 	bl	8000e40 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7fe fe76 	bl	8000e40 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0cb      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0ee      	beq.n	8002150 <HAL_RCC_OscConfig+0x334>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7fe fe64 	bl	8000e40 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7fe fe60 	bl	8000e40 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e0b5      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1ee      	bne.n	800217c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4a38      	ldr	r2, [pc, #224]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a1 	beq.w	80022fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ba:	4b34      	ldr	r3, [pc, #208]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d05c      	beq.n	8002280 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d141      	bne.n	8002252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe fe34 	bl	8000e40 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7fe fe30 	bl	8000e40 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e087      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	019b      	lsls	r3, r3, #6
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	3b01      	subs	r3, #1
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	491b      	ldr	r1, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fe09 	bl	8000e40 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe fe05 	bl	8000e40 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e05c      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x416>
 8002250:	e054      	b.n	80022fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fdf2 	bl	8000e40 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fdee 	bl	8000e40 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e045      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x444>
 800227e:	e03d      	b.n	80022fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e038      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000
 8002294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x4ec>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d028      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d121      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d11a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d111      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	3b01      	subs	r3, #1
 80022e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0cc      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d90c      	bls.n	8002348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800236a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	494d      	ldr	r1, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d044      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d119      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e067      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4934      	ldr	r1, [pc, #208]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7fe fd20 	bl	8000e40 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7fe fd1c 	bl	8000e40 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e04f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d20c      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002492:	f000 f821 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002496:	4602      	mov	r2, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	490a      	ldr	r1, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	5ccb      	ldrb	r3, [r1, r3]
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fc80 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00
 80024c8:	40023800 	.word	0x40023800
 80024cc:	080042ec 	.word	0x080042ec
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024dc:	b094      	sub	sp, #80	; 0x50
 80024de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f0:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d00d      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x40>
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	f200 80e1 	bhi.w	80026c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x34>
 8002506:	2b04      	cmp	r3, #4
 8002508:	d003      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x3a>
 800250a:	e0db      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800250c:	4b73      	ldr	r3, [pc, #460]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002510:	e0db      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002512:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002514:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002516:	e0d8      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002520:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002522:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252e:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	2200      	movs	r2, #0
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
 8002538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
 8002546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255c:	0150      	lsls	r0, r2, #5
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4621      	mov	r1, r4
 8002564:	1a51      	subs	r1, r2, r1
 8002566:	6139      	str	r1, [r7, #16]
 8002568:	4629      	mov	r1, r5
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800257c:	4659      	mov	r1, fp
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	4651      	mov	r1, sl
 8002582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002586:	4651      	mov	r1, sl
 8002588:	018a      	lsls	r2, r1, #6
 800258a:	4651      	mov	r1, sl
 800258c:	ebb2 0801 	subs.w	r8, r2, r1
 8002590:	4659      	mov	r1, fp
 8002592:	eb63 0901 	sbc.w	r9, r3, r1
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025aa:	4690      	mov	r8, r2
 80025ac:	4699      	mov	r9, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	eb18 0303 	adds.w	r3, r8, r3
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	462b      	mov	r3, r5
 80025b8:	eb49 0303 	adc.w	r3, r9, r3
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ca:	4629      	mov	r1, r5
 80025cc:	024b      	lsls	r3, r1, #9
 80025ce:	4621      	mov	r1, r4
 80025d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025d4:	4621      	mov	r1, r4
 80025d6:	024a      	lsls	r2, r1, #9
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025de:	2200      	movs	r2, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025e8:	f7fd fe4a 	bl	8000280 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f4:	e058      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	2200      	movs	r2, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	4611      	mov	r1, r2
 8002602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	f04f 0000 	mov.w	r0, #0
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	0159      	lsls	r1, r3, #5
 800261e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002622:	0150      	lsls	r0, r2, #5
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4641      	mov	r1, r8
 800262a:	ebb2 0a01 	subs.w	sl, r2, r1
 800262e:	4649      	mov	r1, r9
 8002630:	eb63 0b01 	sbc.w	fp, r3, r1
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002648:	ebb2 040a 	subs.w	r4, r2, sl
 800264c:	eb63 050b 	sbc.w	r5, r3, fp
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	00eb      	lsls	r3, r5, #3
 800265a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265e:	00e2      	lsls	r2, r4, #3
 8002660:	4614      	mov	r4, r2
 8002662:	461d      	mov	r5, r3
 8002664:	4643      	mov	r3, r8
 8002666:	18e3      	adds	r3, r4, r3
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	464b      	mov	r3, r9
 800266c:	eb45 0303 	adc.w	r3, r5, r3
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800267e:	4629      	mov	r1, r5
 8002680:	028b      	lsls	r3, r1, #10
 8002682:	4621      	mov	r1, r4
 8002684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002688:	4621      	mov	r1, r4
 800268a:	028a      	lsls	r2, r1, #10
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002692:	2200      	movs	r2, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	61fa      	str	r2, [r7, #28]
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	f7fd fdf0 	bl	8000280 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4613      	mov	r3, r2
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80026b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3750      	adds	r7, #80	; 0x50
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	007a1200 	.word	0x007a1200

080026e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000000 	.word	0x20000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002700:	f7ff fff0 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	080042fc 	.word	0x080042fc

08002724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002728:	f7ff ffdc 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0b5b      	lsrs	r3, r3, #13
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	080042fc 	.word	0x080042fc

0800274c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e042      	b.n	80027e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe f9a2 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800278e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f973 	bl	8002a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b20      	cmp	r3, #32
 800280a:	d175      	bne.n	80028f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_UART_Transmit+0x2c>
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e06e      	b.n	80028fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282a:	f7fe fb09 	bl	8000e40 <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	88fa      	ldrh	r2, [r7, #6]
 800283a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002844:	d108      	bne.n	8002858 <HAL_UART_Transmit+0x6c>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002860:	e02e      	b.n	80028c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f848 	bl	8002902 <UART_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e03a      	b.n	80028fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	3302      	adds	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e007      	b.n	80028b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1cb      	bne.n	8002862 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f814 	bl	8002902 <UART_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e006      	b.n	80028fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002912:	e03b      	b.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d037      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291c:	f7fe fa90 	bl	8000e40 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	6a3a      	ldr	r2, [r7, #32]
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <UART_WaitOnFlagUntilTimeout+0x30>
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e03a      	b.n	80029ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b80      	cmp	r3, #128	; 0x80
 8002948:	d020      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d01d      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b08      	cmp	r3, #8
 800295c:	d116      	bne.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f81d 	bl	80029b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2208      	movs	r2, #8
 800297e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e00f      	b.n	80029ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d0b4      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b095      	sub	sp, #84	; 0x54
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029dc:	643a      	str	r2, [r7, #64]	; 0x40
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e5      	bne.n	80029bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3314      	adds	r3, #20
 80029f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d119      	bne.n	8002a60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	e853 3f00 	ldrex	r3, [r3]
 8002a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f023 0310 	bic.w	r3, r3, #16
 8002a42:	647b      	str	r3, [r7, #68]	; 0x44
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	330c      	adds	r3, #12
 8002a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a4c:	61ba      	str	r2, [r7, #24]
 8002a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a50:	6979      	ldr	r1, [r7, #20]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	e841 2300 	strex	r3, r2, [r1]
 8002a58:	613b      	str	r3, [r7, #16]
   return(result);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e5      	bne.n	8002a2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a6e:	bf00      	nop
 8002a70:	3754      	adds	r7, #84	; 0x54
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a80:	b0c0      	sub	sp, #256	; 0x100
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a98:	68d9      	ldr	r1, [r3, #12]
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	ea40 0301 	orr.w	r3, r0, r1
 8002aa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ad4:	f021 010c 	bic.w	r1, r1, #12
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af6:	6999      	ldr	r1, [r3, #24]
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	ea40 0301 	orr.w	r3, r0, r1
 8002b02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b8f      	ldr	r3, [pc, #572]	; (8002d48 <UART_SetConfig+0x2cc>)
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d005      	beq.n	8002b1c <UART_SetConfig+0xa0>
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b8d      	ldr	r3, [pc, #564]	; (8002d4c <UART_SetConfig+0x2d0>)
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d104      	bne.n	8002b26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b1c:	f7ff fe02 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 8002b20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b24:	e003      	b.n	8002b2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b26:	f7ff fde9 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8002b2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b38:	f040 810c 	bne.w	8002d54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b4e:	4622      	mov	r2, r4
 8002b50:	462b      	mov	r3, r5
 8002b52:	1891      	adds	r1, r2, r2
 8002b54:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b56:	415b      	adcs	r3, r3
 8002b58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b5e:	4621      	mov	r1, r4
 8002b60:	eb12 0801 	adds.w	r8, r2, r1
 8002b64:	4629      	mov	r1, r5
 8002b66:	eb43 0901 	adc.w	r9, r3, r1
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b7e:	4690      	mov	r8, r2
 8002b80:	4699      	mov	r9, r3
 8002b82:	4623      	mov	r3, r4
 8002b84:	eb18 0303 	adds.w	r3, r8, r3
 8002b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b8c:	462b      	mov	r3, r5
 8002b8e:	eb49 0303 	adc.w	r3, r9, r3
 8002b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ba2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ba6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002baa:	460b      	mov	r3, r1
 8002bac:	18db      	adds	r3, r3, r3
 8002bae:	653b      	str	r3, [r7, #80]	; 0x50
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	eb42 0303 	adc.w	r3, r2, r3
 8002bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8002bb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bc0:	f7fd fb5e 	bl	8000280 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4b61      	ldr	r3, [pc, #388]	; (8002d50 <UART_SetConfig+0x2d4>)
 8002bca:	fba3 2302 	umull	r2, r3, r3, r2
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	011c      	lsls	r4, r3, #4
 8002bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002be0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	1891      	adds	r1, r2, r2
 8002bea:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bec:	415b      	adcs	r3, r3
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	eb12 0a01 	adds.w	sl, r2, r1
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	eb43 0b01 	adc.w	fp, r3, r1
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c14:	4692      	mov	sl, r2
 8002c16:	469b      	mov	fp, r3
 8002c18:	4643      	mov	r3, r8
 8002c1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c22:	464b      	mov	r3, r9
 8002c24:	eb4b 0303 	adc.w	r3, fp, r3
 8002c28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c40:	460b      	mov	r3, r1
 8002c42:	18db      	adds	r3, r3, r3
 8002c44:	643b      	str	r3, [r7, #64]	; 0x40
 8002c46:	4613      	mov	r3, r2
 8002c48:	eb42 0303 	adc.w	r3, r2, r3
 8002c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c56:	f7fd fb13 	bl	8000280 <__aeabi_uldivmod>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <UART_SetConfig+0x2d4>)
 8002c62:	fba3 2301 	umull	r2, r3, r3, r1
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2264      	movs	r2, #100	; 0x64
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	1acb      	subs	r3, r1, r3
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c76:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <UART_SetConfig+0x2d4>)
 8002c78:	fba3 2302 	umull	r2, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c84:	441c      	add	r4, r3
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ca8:	4641      	mov	r1, r8
 8002caa:	1851      	adds	r1, r2, r1
 8002cac:	6339      	str	r1, [r7, #48]	; 0x30
 8002cae:	4649      	mov	r1, r9
 8002cb0:	414b      	adcs	r3, r1
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	00cb      	lsls	r3, r1, #3
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cca:	4651      	mov	r1, sl
 8002ccc:	00ca      	lsls	r2, r1, #3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cdc:	464b      	mov	r3, r9
 8002cde:	460a      	mov	r2, r1
 8002ce0:	eb42 0303 	adc.w	r3, r2, r3
 8002ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	18db      	adds	r3, r3, r3
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d02:	4613      	mov	r3, r2
 8002d04:	eb42 0303 	adc.w	r3, r2, r3
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d12:	f7fd fab5 	bl	8000280 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <UART_SetConfig+0x2d4>)
 8002d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	2164      	movs	r1, #100	; 0x64
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	3332      	adds	r3, #50	; 0x32
 8002d2e:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <UART_SetConfig+0x2d4>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	f003 0207 	and.w	r2, r3, #7
 8002d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4422      	add	r2, r4
 8002d42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d44:	e106      	b.n	8002f54 <UART_SetConfig+0x4d8>
 8002d46:	bf00      	nop
 8002d48:	40011000 	.word	0x40011000
 8002d4c:	40011400 	.word	0x40011400
 8002d50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d66:	4642      	mov	r2, r8
 8002d68:	464b      	mov	r3, r9
 8002d6a:	1891      	adds	r1, r2, r2
 8002d6c:	6239      	str	r1, [r7, #32]
 8002d6e:	415b      	adcs	r3, r3
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d76:	4641      	mov	r1, r8
 8002d78:	1854      	adds	r4, r2, r1
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	eb43 0501 	adc.w	r5, r3, r1
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	00eb      	lsls	r3, r5, #3
 8002d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8e:	00e2      	lsls	r2, r4, #3
 8002d90:	4614      	mov	r4, r2
 8002d92:	461d      	mov	r5, r3
 8002d94:	4643      	mov	r3, r8
 8002d96:	18e3      	adds	r3, r4, r3
 8002d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	eb45 0303 	adc.w	r3, r5, r3
 8002da2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002db2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	008b      	lsls	r3, r1, #2
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dcc:	4621      	mov	r1, r4
 8002dce:	008a      	lsls	r2, r1, #2
 8002dd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002dd4:	f7fd fa54 	bl	8000280 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4b60      	ldr	r3, [pc, #384]	; (8002f60 <UART_SetConfig+0x4e4>)
 8002dde:	fba3 2302 	umull	r2, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	011c      	lsls	r4, r3, #4
 8002de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002df0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002df4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	1891      	adds	r1, r2, r2
 8002dfe:	61b9      	str	r1, [r7, #24]
 8002e00:	415b      	adcs	r3, r3
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e08:	4641      	mov	r1, r8
 8002e0a:	1851      	adds	r1, r2, r1
 8002e0c:	6139      	str	r1, [r7, #16]
 8002e0e:	4649      	mov	r1, r9
 8002e10:	414b      	adcs	r3, r1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e20:	4659      	mov	r1, fp
 8002e22:	00cb      	lsls	r3, r1, #3
 8002e24:	4651      	mov	r1, sl
 8002e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e2a:	4651      	mov	r1, sl
 8002e2c:	00ca      	lsls	r2, r1, #3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	4642      	mov	r2, r8
 8002e36:	189b      	adds	r3, r3, r2
 8002e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e3c:	464b      	mov	r3, r9
 8002e3e:	460a      	mov	r2, r1
 8002e40:	eb42 0303 	adc.w	r3, r2, r3
 8002e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e60:	4649      	mov	r1, r9
 8002e62:	008b      	lsls	r3, r1, #2
 8002e64:	4641      	mov	r1, r8
 8002e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	008a      	lsls	r2, r1, #2
 8002e6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e72:	f7fd fa05 	bl	8000280 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <UART_SetConfig+0x4e4>)
 8002e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2264      	movs	r2, #100	; 0x64
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	1acb      	subs	r3, r1, r3
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	3332      	adds	r3, #50	; 0x32
 8002e90:	4a33      	ldr	r2, [pc, #204]	; (8002f60 <UART_SetConfig+0x4e4>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9c:	441c      	add	r4, r3
 8002e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	673b      	str	r3, [r7, #112]	; 0x70
 8002ea6:	677a      	str	r2, [r7, #116]	; 0x74
 8002ea8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	1891      	adds	r1, r2, r2
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	1851      	adds	r1, r2, r1
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	414b      	adcs	r3, r1
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	00cb      	lsls	r3, r1, #3
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ede:	4651      	mov	r1, sl
 8002ee0:	00ca      	lsls	r2, r1, #3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4642      	mov	r2, r8
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eee:	464b      	mov	r3, r9
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	eb42 0303 	adc.w	r3, r2, r3
 8002ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	663b      	str	r3, [r7, #96]	; 0x60
 8002f02:	667a      	str	r2, [r7, #100]	; 0x64
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f10:	4649      	mov	r1, r9
 8002f12:	008b      	lsls	r3, r1, #2
 8002f14:	4641      	mov	r1, r8
 8002f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f1a:	4641      	mov	r1, r8
 8002f1c:	008a      	lsls	r2, r1, #2
 8002f1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f22:	f7fd f9ad 	bl	8000280 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <UART_SetConfig+0x4e4>)
 8002f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2164      	movs	r1, #100	; 0x64
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	3332      	adds	r3, #50	; 0x32
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <UART_SetConfig+0x4e4>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4422      	add	r2, r4
 8002f52:	609a      	str	r2, [r3, #8]
}
 8002f54:	bf00      	nop
 8002f56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f60:	51eb851f 	.word	0x51eb851f

08002f64 <std>:
 8002f64:	2300      	movs	r3, #0
 8002f66:	b510      	push	{r4, lr}
 8002f68:	4604      	mov	r4, r0
 8002f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f72:	6083      	str	r3, [r0, #8]
 8002f74:	8181      	strh	r1, [r0, #12]
 8002f76:	6643      	str	r3, [r0, #100]	; 0x64
 8002f78:	81c2      	strh	r2, [r0, #14]
 8002f7a:	6183      	str	r3, [r0, #24]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	2208      	movs	r2, #8
 8002f80:	305c      	adds	r0, #92	; 0x5c
 8002f82:	f000 fa17 	bl	80033b4 <memset>
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <std+0x58>)
 8002f88:	6263      	str	r3, [r4, #36]	; 0x24
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <std+0x5c>)
 8002f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <std+0x60>)
 8002f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f92:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <std+0x64>)
 8002f94:	6323      	str	r3, [r4, #48]	; 0x30
 8002f96:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <std+0x68>)
 8002f98:	6224      	str	r4, [r4, #32]
 8002f9a:	429c      	cmp	r4, r3
 8002f9c:	d006      	beq.n	8002fac <std+0x48>
 8002f9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002fa2:	4294      	cmp	r4, r2
 8002fa4:	d002      	beq.n	8002fac <std+0x48>
 8002fa6:	33d0      	adds	r3, #208	; 0xd0
 8002fa8:	429c      	cmp	r4, r3
 8002faa:	d105      	bne.n	8002fb8 <std+0x54>
 8002fac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb4:	f000 ba76 	b.w	80034a4 <__retarget_lock_init_recursive>
 8002fb8:	bd10      	pop	{r4, pc}
 8002fba:	bf00      	nop
 8002fbc:	08003205 	.word	0x08003205
 8002fc0:	08003227 	.word	0x08003227
 8002fc4:	0800325f 	.word	0x0800325f
 8002fc8:	08003283 	.word	0x08003283
 8002fcc:	2000011c 	.word	0x2000011c

08002fd0 <stdio_exit_handler>:
 8002fd0:	4a02      	ldr	r2, [pc, #8]	; (8002fdc <stdio_exit_handler+0xc>)
 8002fd2:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <stdio_exit_handler+0x10>)
 8002fd4:	4803      	ldr	r0, [pc, #12]	; (8002fe4 <stdio_exit_handler+0x14>)
 8002fd6:	f000 b869 	b.w	80030ac <_fwalk_sglue>
 8002fda:	bf00      	nop
 8002fdc:	2000000c 	.word	0x2000000c
 8002fe0:	08004001 	.word	0x08004001
 8002fe4:	20000018 	.word	0x20000018

08002fe8 <cleanup_stdio>:
 8002fe8:	6841      	ldr	r1, [r0, #4]
 8002fea:	4b0c      	ldr	r3, [pc, #48]	; (800301c <cleanup_stdio+0x34>)
 8002fec:	4299      	cmp	r1, r3
 8002fee:	b510      	push	{r4, lr}
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	d001      	beq.n	8002ff8 <cleanup_stdio+0x10>
 8002ff4:	f001 f804 	bl	8004000 <_fflush_r>
 8002ff8:	68a1      	ldr	r1, [r4, #8]
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <cleanup_stdio+0x38>)
 8002ffc:	4299      	cmp	r1, r3
 8002ffe:	d002      	beq.n	8003006 <cleanup_stdio+0x1e>
 8003000:	4620      	mov	r0, r4
 8003002:	f000 fffd 	bl	8004000 <_fflush_r>
 8003006:	68e1      	ldr	r1, [r4, #12]
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <cleanup_stdio+0x3c>)
 800300a:	4299      	cmp	r1, r3
 800300c:	d004      	beq.n	8003018 <cleanup_stdio+0x30>
 800300e:	4620      	mov	r0, r4
 8003010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003014:	f000 bff4 	b.w	8004000 <_fflush_r>
 8003018:	bd10      	pop	{r4, pc}
 800301a:	bf00      	nop
 800301c:	2000011c 	.word	0x2000011c
 8003020:	20000184 	.word	0x20000184
 8003024:	200001ec 	.word	0x200001ec

08003028 <global_stdio_init.part.0>:
 8003028:	b510      	push	{r4, lr}
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <global_stdio_init.part.0+0x30>)
 800302c:	4c0b      	ldr	r4, [pc, #44]	; (800305c <global_stdio_init.part.0+0x34>)
 800302e:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <global_stdio_init.part.0+0x38>)
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4620      	mov	r0, r4
 8003034:	2200      	movs	r2, #0
 8003036:	2104      	movs	r1, #4
 8003038:	f7ff ff94 	bl	8002f64 <std>
 800303c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003040:	2201      	movs	r2, #1
 8003042:	2109      	movs	r1, #9
 8003044:	f7ff ff8e 	bl	8002f64 <std>
 8003048:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800304c:	2202      	movs	r2, #2
 800304e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003052:	2112      	movs	r1, #18
 8003054:	f7ff bf86 	b.w	8002f64 <std>
 8003058:	20000254 	.word	0x20000254
 800305c:	2000011c 	.word	0x2000011c
 8003060:	08002fd1 	.word	0x08002fd1

08003064 <__sfp_lock_acquire>:
 8003064:	4801      	ldr	r0, [pc, #4]	; (800306c <__sfp_lock_acquire+0x8>)
 8003066:	f000 ba1e 	b.w	80034a6 <__retarget_lock_acquire_recursive>
 800306a:	bf00      	nop
 800306c:	2000025d 	.word	0x2000025d

08003070 <__sfp_lock_release>:
 8003070:	4801      	ldr	r0, [pc, #4]	; (8003078 <__sfp_lock_release+0x8>)
 8003072:	f000 ba19 	b.w	80034a8 <__retarget_lock_release_recursive>
 8003076:	bf00      	nop
 8003078:	2000025d 	.word	0x2000025d

0800307c <__sinit>:
 800307c:	b510      	push	{r4, lr}
 800307e:	4604      	mov	r4, r0
 8003080:	f7ff fff0 	bl	8003064 <__sfp_lock_acquire>
 8003084:	6a23      	ldr	r3, [r4, #32]
 8003086:	b11b      	cbz	r3, 8003090 <__sinit+0x14>
 8003088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800308c:	f7ff bff0 	b.w	8003070 <__sfp_lock_release>
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <__sinit+0x28>)
 8003092:	6223      	str	r3, [r4, #32]
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <__sinit+0x2c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f5      	bne.n	8003088 <__sinit+0xc>
 800309c:	f7ff ffc4 	bl	8003028 <global_stdio_init.part.0>
 80030a0:	e7f2      	b.n	8003088 <__sinit+0xc>
 80030a2:	bf00      	nop
 80030a4:	08002fe9 	.word	0x08002fe9
 80030a8:	20000254 	.word	0x20000254

080030ac <_fwalk_sglue>:
 80030ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030b0:	4607      	mov	r7, r0
 80030b2:	4688      	mov	r8, r1
 80030b4:	4614      	mov	r4, r2
 80030b6:	2600      	movs	r6, #0
 80030b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030bc:	f1b9 0901 	subs.w	r9, r9, #1
 80030c0:	d505      	bpl.n	80030ce <_fwalk_sglue+0x22>
 80030c2:	6824      	ldr	r4, [r4, #0]
 80030c4:	2c00      	cmp	r4, #0
 80030c6:	d1f7      	bne.n	80030b8 <_fwalk_sglue+0xc>
 80030c8:	4630      	mov	r0, r6
 80030ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ce:	89ab      	ldrh	r3, [r5, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d907      	bls.n	80030e4 <_fwalk_sglue+0x38>
 80030d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030d8:	3301      	adds	r3, #1
 80030da:	d003      	beq.n	80030e4 <_fwalk_sglue+0x38>
 80030dc:	4629      	mov	r1, r5
 80030de:	4638      	mov	r0, r7
 80030e0:	47c0      	blx	r8
 80030e2:	4306      	orrs	r6, r0
 80030e4:	3568      	adds	r5, #104	; 0x68
 80030e6:	e7e9      	b.n	80030bc <_fwalk_sglue+0x10>

080030e8 <iprintf>:
 80030e8:	b40f      	push	{r0, r1, r2, r3}
 80030ea:	b507      	push	{r0, r1, r2, lr}
 80030ec:	4906      	ldr	r1, [pc, #24]	; (8003108 <iprintf+0x20>)
 80030ee:	ab04      	add	r3, sp, #16
 80030f0:	6808      	ldr	r0, [r1, #0]
 80030f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80030f6:	6881      	ldr	r1, [r0, #8]
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	f000 fc51 	bl	80039a0 <_vfiprintf_r>
 80030fe:	b003      	add	sp, #12
 8003100:	f85d eb04 	ldr.w	lr, [sp], #4
 8003104:	b004      	add	sp, #16
 8003106:	4770      	bx	lr
 8003108:	20000064 	.word	0x20000064

0800310c <_puts_r>:
 800310c:	6a03      	ldr	r3, [r0, #32]
 800310e:	b570      	push	{r4, r5, r6, lr}
 8003110:	6884      	ldr	r4, [r0, #8]
 8003112:	4605      	mov	r5, r0
 8003114:	460e      	mov	r6, r1
 8003116:	b90b      	cbnz	r3, 800311c <_puts_r+0x10>
 8003118:	f7ff ffb0 	bl	800307c <__sinit>
 800311c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800311e:	07db      	lsls	r3, r3, #31
 8003120:	d405      	bmi.n	800312e <_puts_r+0x22>
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	0598      	lsls	r0, r3, #22
 8003126:	d402      	bmi.n	800312e <_puts_r+0x22>
 8003128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800312a:	f000 f9bc 	bl	80034a6 <__retarget_lock_acquire_recursive>
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	0719      	lsls	r1, r3, #28
 8003132:	d513      	bpl.n	800315c <_puts_r+0x50>
 8003134:	6923      	ldr	r3, [r4, #16]
 8003136:	b18b      	cbz	r3, 800315c <_puts_r+0x50>
 8003138:	3e01      	subs	r6, #1
 800313a:	68a3      	ldr	r3, [r4, #8]
 800313c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003140:	3b01      	subs	r3, #1
 8003142:	60a3      	str	r3, [r4, #8]
 8003144:	b9e9      	cbnz	r1, 8003182 <_puts_r+0x76>
 8003146:	2b00      	cmp	r3, #0
 8003148:	da2e      	bge.n	80031a8 <_puts_r+0x9c>
 800314a:	4622      	mov	r2, r4
 800314c:	210a      	movs	r1, #10
 800314e:	4628      	mov	r0, r5
 8003150:	f000 f89b 	bl	800328a <__swbuf_r>
 8003154:	3001      	adds	r0, #1
 8003156:	d007      	beq.n	8003168 <_puts_r+0x5c>
 8003158:	250a      	movs	r5, #10
 800315a:	e007      	b.n	800316c <_puts_r+0x60>
 800315c:	4621      	mov	r1, r4
 800315e:	4628      	mov	r0, r5
 8003160:	f000 f8d0 	bl	8003304 <__swsetup_r>
 8003164:	2800      	cmp	r0, #0
 8003166:	d0e7      	beq.n	8003138 <_puts_r+0x2c>
 8003168:	f04f 35ff 	mov.w	r5, #4294967295
 800316c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316e:	07da      	lsls	r2, r3, #31
 8003170:	d405      	bmi.n	800317e <_puts_r+0x72>
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	059b      	lsls	r3, r3, #22
 8003176:	d402      	bmi.n	800317e <_puts_r+0x72>
 8003178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800317a:	f000 f995 	bl	80034a8 <__retarget_lock_release_recursive>
 800317e:	4628      	mov	r0, r5
 8003180:	bd70      	pop	{r4, r5, r6, pc}
 8003182:	2b00      	cmp	r3, #0
 8003184:	da04      	bge.n	8003190 <_puts_r+0x84>
 8003186:	69a2      	ldr	r2, [r4, #24]
 8003188:	429a      	cmp	r2, r3
 800318a:	dc06      	bgt.n	800319a <_puts_r+0x8e>
 800318c:	290a      	cmp	r1, #10
 800318e:	d004      	beq.n	800319a <_puts_r+0x8e>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	6022      	str	r2, [r4, #0]
 8003196:	7019      	strb	r1, [r3, #0]
 8003198:	e7cf      	b.n	800313a <_puts_r+0x2e>
 800319a:	4622      	mov	r2, r4
 800319c:	4628      	mov	r0, r5
 800319e:	f000 f874 	bl	800328a <__swbuf_r>
 80031a2:	3001      	adds	r0, #1
 80031a4:	d1c9      	bne.n	800313a <_puts_r+0x2e>
 80031a6:	e7df      	b.n	8003168 <_puts_r+0x5c>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	250a      	movs	r5, #10
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	6022      	str	r2, [r4, #0]
 80031b0:	701d      	strb	r5, [r3, #0]
 80031b2:	e7db      	b.n	800316c <_puts_r+0x60>

080031b4 <puts>:
 80031b4:	4b02      	ldr	r3, [pc, #8]	; (80031c0 <puts+0xc>)
 80031b6:	4601      	mov	r1, r0
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	f7ff bfa7 	b.w	800310c <_puts_r>
 80031be:	bf00      	nop
 80031c0:	20000064 	.word	0x20000064

080031c4 <siprintf>:
 80031c4:	b40e      	push	{r1, r2, r3}
 80031c6:	b500      	push	{lr}
 80031c8:	b09c      	sub	sp, #112	; 0x70
 80031ca:	ab1d      	add	r3, sp, #116	; 0x74
 80031cc:	9002      	str	r0, [sp, #8]
 80031ce:	9006      	str	r0, [sp, #24]
 80031d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031d4:	4809      	ldr	r0, [pc, #36]	; (80031fc <siprintf+0x38>)
 80031d6:	9107      	str	r1, [sp, #28]
 80031d8:	9104      	str	r1, [sp, #16]
 80031da:	4909      	ldr	r1, [pc, #36]	; (8003200 <siprintf+0x3c>)
 80031dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80031e0:	9105      	str	r1, [sp, #20]
 80031e2:	6800      	ldr	r0, [r0, #0]
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	a902      	add	r1, sp, #8
 80031e8:	f000 fab2 	bl	8003750 <_svfiprintf_r>
 80031ec:	9b02      	ldr	r3, [sp, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	b01c      	add	sp, #112	; 0x70
 80031f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031f8:	b003      	add	sp, #12
 80031fa:	4770      	bx	lr
 80031fc:	20000064 	.word	0x20000064
 8003200:	ffff0208 	.word	0xffff0208

08003204 <__sread>:
 8003204:	b510      	push	{r4, lr}
 8003206:	460c      	mov	r4, r1
 8003208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800320c:	f000 f8fc 	bl	8003408 <_read_r>
 8003210:	2800      	cmp	r0, #0
 8003212:	bfab      	itete	ge
 8003214:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003216:	89a3      	ldrhlt	r3, [r4, #12]
 8003218:	181b      	addge	r3, r3, r0
 800321a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800321e:	bfac      	ite	ge
 8003220:	6563      	strge	r3, [r4, #84]	; 0x54
 8003222:	81a3      	strhlt	r3, [r4, #12]
 8003224:	bd10      	pop	{r4, pc}

08003226 <__swrite>:
 8003226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800322a:	461f      	mov	r7, r3
 800322c:	898b      	ldrh	r3, [r1, #12]
 800322e:	05db      	lsls	r3, r3, #23
 8003230:	4605      	mov	r5, r0
 8003232:	460c      	mov	r4, r1
 8003234:	4616      	mov	r6, r2
 8003236:	d505      	bpl.n	8003244 <__swrite+0x1e>
 8003238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800323c:	2302      	movs	r3, #2
 800323e:	2200      	movs	r2, #0
 8003240:	f000 f8d0 	bl	80033e4 <_lseek_r>
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800324a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	4632      	mov	r2, r6
 8003252:	463b      	mov	r3, r7
 8003254:	4628      	mov	r0, r5
 8003256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800325a:	f000 b8e7 	b.w	800342c <_write_r>

0800325e <__sseek>:
 800325e:	b510      	push	{r4, lr}
 8003260:	460c      	mov	r4, r1
 8003262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003266:	f000 f8bd 	bl	80033e4 <_lseek_r>
 800326a:	1c43      	adds	r3, r0, #1
 800326c:	89a3      	ldrh	r3, [r4, #12]
 800326e:	bf15      	itete	ne
 8003270:	6560      	strne	r0, [r4, #84]	; 0x54
 8003272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800327a:	81a3      	strheq	r3, [r4, #12]
 800327c:	bf18      	it	ne
 800327e:	81a3      	strhne	r3, [r4, #12]
 8003280:	bd10      	pop	{r4, pc}

08003282 <__sclose>:
 8003282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003286:	f000 b89d 	b.w	80033c4 <_close_r>

0800328a <__swbuf_r>:
 800328a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328c:	460e      	mov	r6, r1
 800328e:	4614      	mov	r4, r2
 8003290:	4605      	mov	r5, r0
 8003292:	b118      	cbz	r0, 800329c <__swbuf_r+0x12>
 8003294:	6a03      	ldr	r3, [r0, #32]
 8003296:	b90b      	cbnz	r3, 800329c <__swbuf_r+0x12>
 8003298:	f7ff fef0 	bl	800307c <__sinit>
 800329c:	69a3      	ldr	r3, [r4, #24]
 800329e:	60a3      	str	r3, [r4, #8]
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	071a      	lsls	r2, r3, #28
 80032a4:	d525      	bpl.n	80032f2 <__swbuf_r+0x68>
 80032a6:	6923      	ldr	r3, [r4, #16]
 80032a8:	b31b      	cbz	r3, 80032f2 <__swbuf_r+0x68>
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	6922      	ldr	r2, [r4, #16]
 80032ae:	1a98      	subs	r0, r3, r2
 80032b0:	6963      	ldr	r3, [r4, #20]
 80032b2:	b2f6      	uxtb	r6, r6
 80032b4:	4283      	cmp	r3, r0
 80032b6:	4637      	mov	r7, r6
 80032b8:	dc04      	bgt.n	80032c4 <__swbuf_r+0x3a>
 80032ba:	4621      	mov	r1, r4
 80032bc:	4628      	mov	r0, r5
 80032be:	f000 fe9f 	bl	8004000 <_fflush_r>
 80032c2:	b9e0      	cbnz	r0, 80032fe <__swbuf_r+0x74>
 80032c4:	68a3      	ldr	r3, [r4, #8]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60a3      	str	r3, [r4, #8]
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	6022      	str	r2, [r4, #0]
 80032d0:	701e      	strb	r6, [r3, #0]
 80032d2:	6962      	ldr	r2, [r4, #20]
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d004      	beq.n	80032e4 <__swbuf_r+0x5a>
 80032da:	89a3      	ldrh	r3, [r4, #12]
 80032dc:	07db      	lsls	r3, r3, #31
 80032de:	d506      	bpl.n	80032ee <__swbuf_r+0x64>
 80032e0:	2e0a      	cmp	r6, #10
 80032e2:	d104      	bne.n	80032ee <__swbuf_r+0x64>
 80032e4:	4621      	mov	r1, r4
 80032e6:	4628      	mov	r0, r5
 80032e8:	f000 fe8a 	bl	8004000 <_fflush_r>
 80032ec:	b938      	cbnz	r0, 80032fe <__swbuf_r+0x74>
 80032ee:	4638      	mov	r0, r7
 80032f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032f2:	4621      	mov	r1, r4
 80032f4:	4628      	mov	r0, r5
 80032f6:	f000 f805 	bl	8003304 <__swsetup_r>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d0d5      	beq.n	80032aa <__swbuf_r+0x20>
 80032fe:	f04f 37ff 	mov.w	r7, #4294967295
 8003302:	e7f4      	b.n	80032ee <__swbuf_r+0x64>

08003304 <__swsetup_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <__swsetup_r+0xac>)
 8003308:	4605      	mov	r5, r0
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	460c      	mov	r4, r1
 800330e:	b118      	cbz	r0, 8003318 <__swsetup_r+0x14>
 8003310:	6a03      	ldr	r3, [r0, #32]
 8003312:	b90b      	cbnz	r3, 8003318 <__swsetup_r+0x14>
 8003314:	f7ff feb2 	bl	800307c <__sinit>
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800331e:	0718      	lsls	r0, r3, #28
 8003320:	d422      	bmi.n	8003368 <__swsetup_r+0x64>
 8003322:	06d9      	lsls	r1, r3, #27
 8003324:	d407      	bmi.n	8003336 <__swsetup_r+0x32>
 8003326:	2309      	movs	r3, #9
 8003328:	602b      	str	r3, [r5, #0]
 800332a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800332e:	81a3      	strh	r3, [r4, #12]
 8003330:	f04f 30ff 	mov.w	r0, #4294967295
 8003334:	e034      	b.n	80033a0 <__swsetup_r+0x9c>
 8003336:	0758      	lsls	r0, r3, #29
 8003338:	d512      	bpl.n	8003360 <__swsetup_r+0x5c>
 800333a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800333c:	b141      	cbz	r1, 8003350 <__swsetup_r+0x4c>
 800333e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003342:	4299      	cmp	r1, r3
 8003344:	d002      	beq.n	800334c <__swsetup_r+0x48>
 8003346:	4628      	mov	r0, r5
 8003348:	f000 f8b0 	bl	80034ac <_free_r>
 800334c:	2300      	movs	r3, #0
 800334e:	6363      	str	r3, [r4, #52]	; 0x34
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003356:	81a3      	strh	r3, [r4, #12]
 8003358:	2300      	movs	r3, #0
 800335a:	6063      	str	r3, [r4, #4]
 800335c:	6923      	ldr	r3, [r4, #16]
 800335e:	6023      	str	r3, [r4, #0]
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	f043 0308 	orr.w	r3, r3, #8
 8003366:	81a3      	strh	r3, [r4, #12]
 8003368:	6923      	ldr	r3, [r4, #16]
 800336a:	b94b      	cbnz	r3, 8003380 <__swsetup_r+0x7c>
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003376:	d003      	beq.n	8003380 <__swsetup_r+0x7c>
 8003378:	4621      	mov	r1, r4
 800337a:	4628      	mov	r0, r5
 800337c:	f000 fe8e 	bl	800409c <__smakebuf_r>
 8003380:	89a0      	ldrh	r0, [r4, #12]
 8003382:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003386:	f010 0301 	ands.w	r3, r0, #1
 800338a:	d00a      	beq.n	80033a2 <__swsetup_r+0x9e>
 800338c:	2300      	movs	r3, #0
 800338e:	60a3      	str	r3, [r4, #8]
 8003390:	6963      	ldr	r3, [r4, #20]
 8003392:	425b      	negs	r3, r3
 8003394:	61a3      	str	r3, [r4, #24]
 8003396:	6923      	ldr	r3, [r4, #16]
 8003398:	b943      	cbnz	r3, 80033ac <__swsetup_r+0xa8>
 800339a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800339e:	d1c4      	bne.n	800332a <__swsetup_r+0x26>
 80033a0:	bd38      	pop	{r3, r4, r5, pc}
 80033a2:	0781      	lsls	r1, r0, #30
 80033a4:	bf58      	it	pl
 80033a6:	6963      	ldrpl	r3, [r4, #20]
 80033a8:	60a3      	str	r3, [r4, #8]
 80033aa:	e7f4      	b.n	8003396 <__swsetup_r+0x92>
 80033ac:	2000      	movs	r0, #0
 80033ae:	e7f7      	b.n	80033a0 <__swsetup_r+0x9c>
 80033b0:	20000064 	.word	0x20000064

080033b4 <memset>:
 80033b4:	4402      	add	r2, r0
 80033b6:	4603      	mov	r3, r0
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d100      	bne.n	80033be <memset+0xa>
 80033bc:	4770      	bx	lr
 80033be:	f803 1b01 	strb.w	r1, [r3], #1
 80033c2:	e7f9      	b.n	80033b8 <memset+0x4>

080033c4 <_close_r>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
 80033c6:	4d06      	ldr	r5, [pc, #24]	; (80033e0 <_close_r+0x1c>)
 80033c8:	2300      	movs	r3, #0
 80033ca:	4604      	mov	r4, r0
 80033cc:	4608      	mov	r0, r1
 80033ce:	602b      	str	r3, [r5, #0]
 80033d0:	f7fd fc29 	bl	8000c26 <_close>
 80033d4:	1c43      	adds	r3, r0, #1
 80033d6:	d102      	bne.n	80033de <_close_r+0x1a>
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	b103      	cbz	r3, 80033de <_close_r+0x1a>
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	bd38      	pop	{r3, r4, r5, pc}
 80033e0:	20000258 	.word	0x20000258

080033e4 <_lseek_r>:
 80033e4:	b538      	push	{r3, r4, r5, lr}
 80033e6:	4d07      	ldr	r5, [pc, #28]	; (8003404 <_lseek_r+0x20>)
 80033e8:	4604      	mov	r4, r0
 80033ea:	4608      	mov	r0, r1
 80033ec:	4611      	mov	r1, r2
 80033ee:	2200      	movs	r2, #0
 80033f0:	602a      	str	r2, [r5, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7fd fc3e 	bl	8000c74 <_lseek>
 80033f8:	1c43      	adds	r3, r0, #1
 80033fa:	d102      	bne.n	8003402 <_lseek_r+0x1e>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	b103      	cbz	r3, 8003402 <_lseek_r+0x1e>
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	bd38      	pop	{r3, r4, r5, pc}
 8003404:	20000258 	.word	0x20000258

08003408 <_read_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	4d07      	ldr	r5, [pc, #28]	; (8003428 <_read_r+0x20>)
 800340c:	4604      	mov	r4, r0
 800340e:	4608      	mov	r0, r1
 8003410:	4611      	mov	r1, r2
 8003412:	2200      	movs	r2, #0
 8003414:	602a      	str	r2, [r5, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	f7fd fbcc 	bl	8000bb4 <_read>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d102      	bne.n	8003426 <_read_r+0x1e>
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	b103      	cbz	r3, 8003426 <_read_r+0x1e>
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	20000258 	.word	0x20000258

0800342c <_write_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4d07      	ldr	r5, [pc, #28]	; (800344c <_write_r+0x20>)
 8003430:	4604      	mov	r4, r0
 8003432:	4608      	mov	r0, r1
 8003434:	4611      	mov	r1, r2
 8003436:	2200      	movs	r2, #0
 8003438:	602a      	str	r2, [r5, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	f7fd fbd7 	bl	8000bee <_write>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d102      	bne.n	800344a <_write_r+0x1e>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	b103      	cbz	r3, 800344a <_write_r+0x1e>
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	bd38      	pop	{r3, r4, r5, pc}
 800344c:	20000258 	.word	0x20000258

08003450 <__errno>:
 8003450:	4b01      	ldr	r3, [pc, #4]	; (8003458 <__errno+0x8>)
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000064 	.word	0x20000064

0800345c <__libc_init_array>:
 800345c:	b570      	push	{r4, r5, r6, lr}
 800345e:	4d0d      	ldr	r5, [pc, #52]	; (8003494 <__libc_init_array+0x38>)
 8003460:	4c0d      	ldr	r4, [pc, #52]	; (8003498 <__libc_init_array+0x3c>)
 8003462:	1b64      	subs	r4, r4, r5
 8003464:	10a4      	asrs	r4, r4, #2
 8003466:	2600      	movs	r6, #0
 8003468:	42a6      	cmp	r6, r4
 800346a:	d109      	bne.n	8003480 <__libc_init_array+0x24>
 800346c:	4d0b      	ldr	r5, [pc, #44]	; (800349c <__libc_init_array+0x40>)
 800346e:	4c0c      	ldr	r4, [pc, #48]	; (80034a0 <__libc_init_array+0x44>)
 8003470:	f000 fee2 	bl	8004238 <_init>
 8003474:	1b64      	subs	r4, r4, r5
 8003476:	10a4      	asrs	r4, r4, #2
 8003478:	2600      	movs	r6, #0
 800347a:	42a6      	cmp	r6, r4
 800347c:	d105      	bne.n	800348a <__libc_init_array+0x2e>
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	f855 3b04 	ldr.w	r3, [r5], #4
 8003484:	4798      	blx	r3
 8003486:	3601      	adds	r6, #1
 8003488:	e7ee      	b.n	8003468 <__libc_init_array+0xc>
 800348a:	f855 3b04 	ldr.w	r3, [r5], #4
 800348e:	4798      	blx	r3
 8003490:	3601      	adds	r6, #1
 8003492:	e7f2      	b.n	800347a <__libc_init_array+0x1e>
 8003494:	08004340 	.word	0x08004340
 8003498:	08004340 	.word	0x08004340
 800349c:	08004340 	.word	0x08004340
 80034a0:	08004344 	.word	0x08004344

080034a4 <__retarget_lock_init_recursive>:
 80034a4:	4770      	bx	lr

080034a6 <__retarget_lock_acquire_recursive>:
 80034a6:	4770      	bx	lr

080034a8 <__retarget_lock_release_recursive>:
 80034a8:	4770      	bx	lr
	...

080034ac <_free_r>:
 80034ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034ae:	2900      	cmp	r1, #0
 80034b0:	d044      	beq.n	800353c <_free_r+0x90>
 80034b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b6:	9001      	str	r0, [sp, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f1a1 0404 	sub.w	r4, r1, #4
 80034be:	bfb8      	it	lt
 80034c0:	18e4      	addlt	r4, r4, r3
 80034c2:	f000 f8df 	bl	8003684 <__malloc_lock>
 80034c6:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <_free_r+0x94>)
 80034c8:	9801      	ldr	r0, [sp, #4]
 80034ca:	6813      	ldr	r3, [r2, #0]
 80034cc:	b933      	cbnz	r3, 80034dc <_free_r+0x30>
 80034ce:	6063      	str	r3, [r4, #4]
 80034d0:	6014      	str	r4, [r2, #0]
 80034d2:	b003      	add	sp, #12
 80034d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034d8:	f000 b8da 	b.w	8003690 <__malloc_unlock>
 80034dc:	42a3      	cmp	r3, r4
 80034de:	d908      	bls.n	80034f2 <_free_r+0x46>
 80034e0:	6825      	ldr	r5, [r4, #0]
 80034e2:	1961      	adds	r1, r4, r5
 80034e4:	428b      	cmp	r3, r1
 80034e6:	bf01      	itttt	eq
 80034e8:	6819      	ldreq	r1, [r3, #0]
 80034ea:	685b      	ldreq	r3, [r3, #4]
 80034ec:	1949      	addeq	r1, r1, r5
 80034ee:	6021      	streq	r1, [r4, #0]
 80034f0:	e7ed      	b.n	80034ce <_free_r+0x22>
 80034f2:	461a      	mov	r2, r3
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	b10b      	cbz	r3, 80034fc <_free_r+0x50>
 80034f8:	42a3      	cmp	r3, r4
 80034fa:	d9fa      	bls.n	80034f2 <_free_r+0x46>
 80034fc:	6811      	ldr	r1, [r2, #0]
 80034fe:	1855      	adds	r5, r2, r1
 8003500:	42a5      	cmp	r5, r4
 8003502:	d10b      	bne.n	800351c <_free_r+0x70>
 8003504:	6824      	ldr	r4, [r4, #0]
 8003506:	4421      	add	r1, r4
 8003508:	1854      	adds	r4, r2, r1
 800350a:	42a3      	cmp	r3, r4
 800350c:	6011      	str	r1, [r2, #0]
 800350e:	d1e0      	bne.n	80034d2 <_free_r+0x26>
 8003510:	681c      	ldr	r4, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	6053      	str	r3, [r2, #4]
 8003516:	440c      	add	r4, r1
 8003518:	6014      	str	r4, [r2, #0]
 800351a:	e7da      	b.n	80034d2 <_free_r+0x26>
 800351c:	d902      	bls.n	8003524 <_free_r+0x78>
 800351e:	230c      	movs	r3, #12
 8003520:	6003      	str	r3, [r0, #0]
 8003522:	e7d6      	b.n	80034d2 <_free_r+0x26>
 8003524:	6825      	ldr	r5, [r4, #0]
 8003526:	1961      	adds	r1, r4, r5
 8003528:	428b      	cmp	r3, r1
 800352a:	bf04      	itt	eq
 800352c:	6819      	ldreq	r1, [r3, #0]
 800352e:	685b      	ldreq	r3, [r3, #4]
 8003530:	6063      	str	r3, [r4, #4]
 8003532:	bf04      	itt	eq
 8003534:	1949      	addeq	r1, r1, r5
 8003536:	6021      	streq	r1, [r4, #0]
 8003538:	6054      	str	r4, [r2, #4]
 800353a:	e7ca      	b.n	80034d2 <_free_r+0x26>
 800353c:	b003      	add	sp, #12
 800353e:	bd30      	pop	{r4, r5, pc}
 8003540:	20000260 	.word	0x20000260

08003544 <sbrk_aligned>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	4e0e      	ldr	r6, [pc, #56]	; (8003580 <sbrk_aligned+0x3c>)
 8003548:	460c      	mov	r4, r1
 800354a:	6831      	ldr	r1, [r6, #0]
 800354c:	4605      	mov	r5, r0
 800354e:	b911      	cbnz	r1, 8003556 <sbrk_aligned+0x12>
 8003550:	f000 fe1c 	bl	800418c <_sbrk_r>
 8003554:	6030      	str	r0, [r6, #0]
 8003556:	4621      	mov	r1, r4
 8003558:	4628      	mov	r0, r5
 800355a:	f000 fe17 	bl	800418c <_sbrk_r>
 800355e:	1c43      	adds	r3, r0, #1
 8003560:	d00a      	beq.n	8003578 <sbrk_aligned+0x34>
 8003562:	1cc4      	adds	r4, r0, #3
 8003564:	f024 0403 	bic.w	r4, r4, #3
 8003568:	42a0      	cmp	r0, r4
 800356a:	d007      	beq.n	800357c <sbrk_aligned+0x38>
 800356c:	1a21      	subs	r1, r4, r0
 800356e:	4628      	mov	r0, r5
 8003570:	f000 fe0c 	bl	800418c <_sbrk_r>
 8003574:	3001      	adds	r0, #1
 8003576:	d101      	bne.n	800357c <sbrk_aligned+0x38>
 8003578:	f04f 34ff 	mov.w	r4, #4294967295
 800357c:	4620      	mov	r0, r4
 800357e:	bd70      	pop	{r4, r5, r6, pc}
 8003580:	20000264 	.word	0x20000264

08003584 <_malloc_r>:
 8003584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003588:	1ccd      	adds	r5, r1, #3
 800358a:	f025 0503 	bic.w	r5, r5, #3
 800358e:	3508      	adds	r5, #8
 8003590:	2d0c      	cmp	r5, #12
 8003592:	bf38      	it	cc
 8003594:	250c      	movcc	r5, #12
 8003596:	2d00      	cmp	r5, #0
 8003598:	4607      	mov	r7, r0
 800359a:	db01      	blt.n	80035a0 <_malloc_r+0x1c>
 800359c:	42a9      	cmp	r1, r5
 800359e:	d905      	bls.n	80035ac <_malloc_r+0x28>
 80035a0:	230c      	movs	r3, #12
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	2600      	movs	r6, #0
 80035a6:	4630      	mov	r0, r6
 80035a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003680 <_malloc_r+0xfc>
 80035b0:	f000 f868 	bl	8003684 <__malloc_lock>
 80035b4:	f8d8 3000 	ldr.w	r3, [r8]
 80035b8:	461c      	mov	r4, r3
 80035ba:	bb5c      	cbnz	r4, 8003614 <_malloc_r+0x90>
 80035bc:	4629      	mov	r1, r5
 80035be:	4638      	mov	r0, r7
 80035c0:	f7ff ffc0 	bl	8003544 <sbrk_aligned>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	4604      	mov	r4, r0
 80035c8:	d155      	bne.n	8003676 <_malloc_r+0xf2>
 80035ca:	f8d8 4000 	ldr.w	r4, [r8]
 80035ce:	4626      	mov	r6, r4
 80035d0:	2e00      	cmp	r6, #0
 80035d2:	d145      	bne.n	8003660 <_malloc_r+0xdc>
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	d048      	beq.n	800366a <_malloc_r+0xe6>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	4631      	mov	r1, r6
 80035dc:	4638      	mov	r0, r7
 80035de:	eb04 0903 	add.w	r9, r4, r3
 80035e2:	f000 fdd3 	bl	800418c <_sbrk_r>
 80035e6:	4581      	cmp	r9, r0
 80035e8:	d13f      	bne.n	800366a <_malloc_r+0xe6>
 80035ea:	6821      	ldr	r1, [r4, #0]
 80035ec:	1a6d      	subs	r5, r5, r1
 80035ee:	4629      	mov	r1, r5
 80035f0:	4638      	mov	r0, r7
 80035f2:	f7ff ffa7 	bl	8003544 <sbrk_aligned>
 80035f6:	3001      	adds	r0, #1
 80035f8:	d037      	beq.n	800366a <_malloc_r+0xe6>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	442b      	add	r3, r5
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	f8d8 3000 	ldr.w	r3, [r8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d038      	beq.n	800367a <_malloc_r+0xf6>
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	42a2      	cmp	r2, r4
 800360c:	d12b      	bne.n	8003666 <_malloc_r+0xe2>
 800360e:	2200      	movs	r2, #0
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e00f      	b.n	8003634 <_malloc_r+0xb0>
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	1b52      	subs	r2, r2, r5
 8003618:	d41f      	bmi.n	800365a <_malloc_r+0xd6>
 800361a:	2a0b      	cmp	r2, #11
 800361c:	d917      	bls.n	800364e <_malloc_r+0xca>
 800361e:	1961      	adds	r1, r4, r5
 8003620:	42a3      	cmp	r3, r4
 8003622:	6025      	str	r5, [r4, #0]
 8003624:	bf18      	it	ne
 8003626:	6059      	strne	r1, [r3, #4]
 8003628:	6863      	ldr	r3, [r4, #4]
 800362a:	bf08      	it	eq
 800362c:	f8c8 1000 	streq.w	r1, [r8]
 8003630:	5162      	str	r2, [r4, r5]
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	4638      	mov	r0, r7
 8003636:	f104 060b 	add.w	r6, r4, #11
 800363a:	f000 f829 	bl	8003690 <__malloc_unlock>
 800363e:	f026 0607 	bic.w	r6, r6, #7
 8003642:	1d23      	adds	r3, r4, #4
 8003644:	1af2      	subs	r2, r6, r3
 8003646:	d0ae      	beq.n	80035a6 <_malloc_r+0x22>
 8003648:	1b9b      	subs	r3, r3, r6
 800364a:	50a3      	str	r3, [r4, r2]
 800364c:	e7ab      	b.n	80035a6 <_malloc_r+0x22>
 800364e:	42a3      	cmp	r3, r4
 8003650:	6862      	ldr	r2, [r4, #4]
 8003652:	d1dd      	bne.n	8003610 <_malloc_r+0x8c>
 8003654:	f8c8 2000 	str.w	r2, [r8]
 8003658:	e7ec      	b.n	8003634 <_malloc_r+0xb0>
 800365a:	4623      	mov	r3, r4
 800365c:	6864      	ldr	r4, [r4, #4]
 800365e:	e7ac      	b.n	80035ba <_malloc_r+0x36>
 8003660:	4634      	mov	r4, r6
 8003662:	6876      	ldr	r6, [r6, #4]
 8003664:	e7b4      	b.n	80035d0 <_malloc_r+0x4c>
 8003666:	4613      	mov	r3, r2
 8003668:	e7cc      	b.n	8003604 <_malloc_r+0x80>
 800366a:	230c      	movs	r3, #12
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4638      	mov	r0, r7
 8003670:	f000 f80e 	bl	8003690 <__malloc_unlock>
 8003674:	e797      	b.n	80035a6 <_malloc_r+0x22>
 8003676:	6025      	str	r5, [r4, #0]
 8003678:	e7dc      	b.n	8003634 <_malloc_r+0xb0>
 800367a:	605b      	str	r3, [r3, #4]
 800367c:	deff      	udf	#255	; 0xff
 800367e:	bf00      	nop
 8003680:	20000260 	.word	0x20000260

08003684 <__malloc_lock>:
 8003684:	4801      	ldr	r0, [pc, #4]	; (800368c <__malloc_lock+0x8>)
 8003686:	f7ff bf0e 	b.w	80034a6 <__retarget_lock_acquire_recursive>
 800368a:	bf00      	nop
 800368c:	2000025c 	.word	0x2000025c

08003690 <__malloc_unlock>:
 8003690:	4801      	ldr	r0, [pc, #4]	; (8003698 <__malloc_unlock+0x8>)
 8003692:	f7ff bf09 	b.w	80034a8 <__retarget_lock_release_recursive>
 8003696:	bf00      	nop
 8003698:	2000025c 	.word	0x2000025c

0800369c <__ssputs_r>:
 800369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a0:	688e      	ldr	r6, [r1, #8]
 80036a2:	461f      	mov	r7, r3
 80036a4:	42be      	cmp	r6, r7
 80036a6:	680b      	ldr	r3, [r1, #0]
 80036a8:	4682      	mov	sl, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	4690      	mov	r8, r2
 80036ae:	d82c      	bhi.n	800370a <__ssputs_r+0x6e>
 80036b0:	898a      	ldrh	r2, [r1, #12]
 80036b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036b6:	d026      	beq.n	8003706 <__ssputs_r+0x6a>
 80036b8:	6965      	ldr	r5, [r4, #20]
 80036ba:	6909      	ldr	r1, [r1, #16]
 80036bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036c0:	eba3 0901 	sub.w	r9, r3, r1
 80036c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036c8:	1c7b      	adds	r3, r7, #1
 80036ca:	444b      	add	r3, r9
 80036cc:	106d      	asrs	r5, r5, #1
 80036ce:	429d      	cmp	r5, r3
 80036d0:	bf38      	it	cc
 80036d2:	461d      	movcc	r5, r3
 80036d4:	0553      	lsls	r3, r2, #21
 80036d6:	d527      	bpl.n	8003728 <__ssputs_r+0x8c>
 80036d8:	4629      	mov	r1, r5
 80036da:	f7ff ff53 	bl	8003584 <_malloc_r>
 80036de:	4606      	mov	r6, r0
 80036e0:	b360      	cbz	r0, 800373c <__ssputs_r+0xa0>
 80036e2:	6921      	ldr	r1, [r4, #16]
 80036e4:	464a      	mov	r2, r9
 80036e6:	f000 fd61 	bl	80041ac <memcpy>
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f4:	81a3      	strh	r3, [r4, #12]
 80036f6:	6126      	str	r6, [r4, #16]
 80036f8:	6165      	str	r5, [r4, #20]
 80036fa:	444e      	add	r6, r9
 80036fc:	eba5 0509 	sub.w	r5, r5, r9
 8003700:	6026      	str	r6, [r4, #0]
 8003702:	60a5      	str	r5, [r4, #8]
 8003704:	463e      	mov	r6, r7
 8003706:	42be      	cmp	r6, r7
 8003708:	d900      	bls.n	800370c <__ssputs_r+0x70>
 800370a:	463e      	mov	r6, r7
 800370c:	6820      	ldr	r0, [r4, #0]
 800370e:	4632      	mov	r2, r6
 8003710:	4641      	mov	r1, r8
 8003712:	f000 fcff 	bl	8004114 <memmove>
 8003716:	68a3      	ldr	r3, [r4, #8]
 8003718:	1b9b      	subs	r3, r3, r6
 800371a:	60a3      	str	r3, [r4, #8]
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	4433      	add	r3, r6
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	2000      	movs	r0, #0
 8003724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003728:	462a      	mov	r2, r5
 800372a:	f000 fd4d 	bl	80041c8 <_realloc_r>
 800372e:	4606      	mov	r6, r0
 8003730:	2800      	cmp	r0, #0
 8003732:	d1e0      	bne.n	80036f6 <__ssputs_r+0x5a>
 8003734:	6921      	ldr	r1, [r4, #16]
 8003736:	4650      	mov	r0, sl
 8003738:	f7ff feb8 	bl	80034ac <_free_r>
 800373c:	230c      	movs	r3, #12
 800373e:	f8ca 3000 	str.w	r3, [sl]
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	f04f 30ff 	mov.w	r0, #4294967295
 800374e:	e7e9      	b.n	8003724 <__ssputs_r+0x88>

08003750 <_svfiprintf_r>:
 8003750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003754:	4698      	mov	r8, r3
 8003756:	898b      	ldrh	r3, [r1, #12]
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	b09d      	sub	sp, #116	; 0x74
 800375c:	4607      	mov	r7, r0
 800375e:	460d      	mov	r5, r1
 8003760:	4614      	mov	r4, r2
 8003762:	d50e      	bpl.n	8003782 <_svfiprintf_r+0x32>
 8003764:	690b      	ldr	r3, [r1, #16]
 8003766:	b963      	cbnz	r3, 8003782 <_svfiprintf_r+0x32>
 8003768:	2140      	movs	r1, #64	; 0x40
 800376a:	f7ff ff0b 	bl	8003584 <_malloc_r>
 800376e:	6028      	str	r0, [r5, #0]
 8003770:	6128      	str	r0, [r5, #16]
 8003772:	b920      	cbnz	r0, 800377e <_svfiprintf_r+0x2e>
 8003774:	230c      	movs	r3, #12
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	e0d0      	b.n	8003920 <_svfiprintf_r+0x1d0>
 800377e:	2340      	movs	r3, #64	; 0x40
 8003780:	616b      	str	r3, [r5, #20]
 8003782:	2300      	movs	r3, #0
 8003784:	9309      	str	r3, [sp, #36]	; 0x24
 8003786:	2320      	movs	r3, #32
 8003788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800378c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003790:	2330      	movs	r3, #48	; 0x30
 8003792:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003938 <_svfiprintf_r+0x1e8>
 8003796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800379a:	f04f 0901 	mov.w	r9, #1
 800379e:	4623      	mov	r3, r4
 80037a0:	469a      	mov	sl, r3
 80037a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037a6:	b10a      	cbz	r2, 80037ac <_svfiprintf_r+0x5c>
 80037a8:	2a25      	cmp	r2, #37	; 0x25
 80037aa:	d1f9      	bne.n	80037a0 <_svfiprintf_r+0x50>
 80037ac:	ebba 0b04 	subs.w	fp, sl, r4
 80037b0:	d00b      	beq.n	80037ca <_svfiprintf_r+0x7a>
 80037b2:	465b      	mov	r3, fp
 80037b4:	4622      	mov	r2, r4
 80037b6:	4629      	mov	r1, r5
 80037b8:	4638      	mov	r0, r7
 80037ba:	f7ff ff6f 	bl	800369c <__ssputs_r>
 80037be:	3001      	adds	r0, #1
 80037c0:	f000 80a9 	beq.w	8003916 <_svfiprintf_r+0x1c6>
 80037c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037c6:	445a      	add	r2, fp
 80037c8:	9209      	str	r2, [sp, #36]	; 0x24
 80037ca:	f89a 3000 	ldrb.w	r3, [sl]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80a1 	beq.w	8003916 <_svfiprintf_r+0x1c6>
 80037d4:	2300      	movs	r3, #0
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295
 80037da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037de:	f10a 0a01 	add.w	sl, sl, #1
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	9307      	str	r3, [sp, #28]
 80037e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037ea:	931a      	str	r3, [sp, #104]	; 0x68
 80037ec:	4654      	mov	r4, sl
 80037ee:	2205      	movs	r2, #5
 80037f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f4:	4850      	ldr	r0, [pc, #320]	; (8003938 <_svfiprintf_r+0x1e8>)
 80037f6:	f7fc fcf3 	bl	80001e0 <memchr>
 80037fa:	9a04      	ldr	r2, [sp, #16]
 80037fc:	b9d8      	cbnz	r0, 8003836 <_svfiprintf_r+0xe6>
 80037fe:	06d0      	lsls	r0, r2, #27
 8003800:	bf44      	itt	mi
 8003802:	2320      	movmi	r3, #32
 8003804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003808:	0711      	lsls	r1, r2, #28
 800380a:	bf44      	itt	mi
 800380c:	232b      	movmi	r3, #43	; 0x2b
 800380e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003812:	f89a 3000 	ldrb.w	r3, [sl]
 8003816:	2b2a      	cmp	r3, #42	; 0x2a
 8003818:	d015      	beq.n	8003846 <_svfiprintf_r+0xf6>
 800381a:	9a07      	ldr	r2, [sp, #28]
 800381c:	4654      	mov	r4, sl
 800381e:	2000      	movs	r0, #0
 8003820:	f04f 0c0a 	mov.w	ip, #10
 8003824:	4621      	mov	r1, r4
 8003826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800382a:	3b30      	subs	r3, #48	; 0x30
 800382c:	2b09      	cmp	r3, #9
 800382e:	d94d      	bls.n	80038cc <_svfiprintf_r+0x17c>
 8003830:	b1b0      	cbz	r0, 8003860 <_svfiprintf_r+0x110>
 8003832:	9207      	str	r2, [sp, #28]
 8003834:	e014      	b.n	8003860 <_svfiprintf_r+0x110>
 8003836:	eba0 0308 	sub.w	r3, r0, r8
 800383a:	fa09 f303 	lsl.w	r3, r9, r3
 800383e:	4313      	orrs	r3, r2
 8003840:	9304      	str	r3, [sp, #16]
 8003842:	46a2      	mov	sl, r4
 8003844:	e7d2      	b.n	80037ec <_svfiprintf_r+0x9c>
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	1d19      	adds	r1, r3, #4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	9103      	str	r1, [sp, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	bfbb      	ittet	lt
 8003852:	425b      	neglt	r3, r3
 8003854:	f042 0202 	orrlt.w	r2, r2, #2
 8003858:	9307      	strge	r3, [sp, #28]
 800385a:	9307      	strlt	r3, [sp, #28]
 800385c:	bfb8      	it	lt
 800385e:	9204      	strlt	r2, [sp, #16]
 8003860:	7823      	ldrb	r3, [r4, #0]
 8003862:	2b2e      	cmp	r3, #46	; 0x2e
 8003864:	d10c      	bne.n	8003880 <_svfiprintf_r+0x130>
 8003866:	7863      	ldrb	r3, [r4, #1]
 8003868:	2b2a      	cmp	r3, #42	; 0x2a
 800386a:	d134      	bne.n	80038d6 <_svfiprintf_r+0x186>
 800386c:	9b03      	ldr	r3, [sp, #12]
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	9203      	str	r2, [sp, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	bfb8      	it	lt
 8003878:	f04f 33ff 	movlt.w	r3, #4294967295
 800387c:	3402      	adds	r4, #2
 800387e:	9305      	str	r3, [sp, #20]
 8003880:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003948 <_svfiprintf_r+0x1f8>
 8003884:	7821      	ldrb	r1, [r4, #0]
 8003886:	2203      	movs	r2, #3
 8003888:	4650      	mov	r0, sl
 800388a:	f7fc fca9 	bl	80001e0 <memchr>
 800388e:	b138      	cbz	r0, 80038a0 <_svfiprintf_r+0x150>
 8003890:	9b04      	ldr	r3, [sp, #16]
 8003892:	eba0 000a 	sub.w	r0, r0, sl
 8003896:	2240      	movs	r2, #64	; 0x40
 8003898:	4082      	lsls	r2, r0
 800389a:	4313      	orrs	r3, r2
 800389c:	3401      	adds	r4, #1
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a4:	4825      	ldr	r0, [pc, #148]	; (800393c <_svfiprintf_r+0x1ec>)
 80038a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038aa:	2206      	movs	r2, #6
 80038ac:	f7fc fc98 	bl	80001e0 <memchr>
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d038      	beq.n	8003926 <_svfiprintf_r+0x1d6>
 80038b4:	4b22      	ldr	r3, [pc, #136]	; (8003940 <_svfiprintf_r+0x1f0>)
 80038b6:	bb1b      	cbnz	r3, 8003900 <_svfiprintf_r+0x1b0>
 80038b8:	9b03      	ldr	r3, [sp, #12]
 80038ba:	3307      	adds	r3, #7
 80038bc:	f023 0307 	bic.w	r3, r3, #7
 80038c0:	3308      	adds	r3, #8
 80038c2:	9303      	str	r3, [sp, #12]
 80038c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c6:	4433      	add	r3, r6
 80038c8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ca:	e768      	b.n	800379e <_svfiprintf_r+0x4e>
 80038cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80038d0:	460c      	mov	r4, r1
 80038d2:	2001      	movs	r0, #1
 80038d4:	e7a6      	b.n	8003824 <_svfiprintf_r+0xd4>
 80038d6:	2300      	movs	r3, #0
 80038d8:	3401      	adds	r4, #1
 80038da:	9305      	str	r3, [sp, #20]
 80038dc:	4619      	mov	r1, r3
 80038de:	f04f 0c0a 	mov.w	ip, #10
 80038e2:	4620      	mov	r0, r4
 80038e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038e8:	3a30      	subs	r2, #48	; 0x30
 80038ea:	2a09      	cmp	r2, #9
 80038ec:	d903      	bls.n	80038f6 <_svfiprintf_r+0x1a6>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0c6      	beq.n	8003880 <_svfiprintf_r+0x130>
 80038f2:	9105      	str	r1, [sp, #20]
 80038f4:	e7c4      	b.n	8003880 <_svfiprintf_r+0x130>
 80038f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80038fa:	4604      	mov	r4, r0
 80038fc:	2301      	movs	r3, #1
 80038fe:	e7f0      	b.n	80038e2 <_svfiprintf_r+0x192>
 8003900:	ab03      	add	r3, sp, #12
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	462a      	mov	r2, r5
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <_svfiprintf_r+0x1f4>)
 8003908:	a904      	add	r1, sp, #16
 800390a:	4638      	mov	r0, r7
 800390c:	f3af 8000 	nop.w
 8003910:	1c42      	adds	r2, r0, #1
 8003912:	4606      	mov	r6, r0
 8003914:	d1d6      	bne.n	80038c4 <_svfiprintf_r+0x174>
 8003916:	89ab      	ldrh	r3, [r5, #12]
 8003918:	065b      	lsls	r3, r3, #25
 800391a:	f53f af2d 	bmi.w	8003778 <_svfiprintf_r+0x28>
 800391e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003920:	b01d      	add	sp, #116	; 0x74
 8003922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003926:	ab03      	add	r3, sp, #12
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	462a      	mov	r2, r5
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <_svfiprintf_r+0x1f4>)
 800392e:	a904      	add	r1, sp, #16
 8003930:	4638      	mov	r0, r7
 8003932:	f000 f9bd 	bl	8003cb0 <_printf_i>
 8003936:	e7eb      	b.n	8003910 <_svfiprintf_r+0x1c0>
 8003938:	08004304 	.word	0x08004304
 800393c:	0800430e 	.word	0x0800430e
 8003940:	00000000 	.word	0x00000000
 8003944:	0800369d 	.word	0x0800369d
 8003948:	0800430a 	.word	0x0800430a

0800394c <__sfputc_r>:
 800394c:	6893      	ldr	r3, [r2, #8]
 800394e:	3b01      	subs	r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	b410      	push	{r4}
 8003954:	6093      	str	r3, [r2, #8]
 8003956:	da08      	bge.n	800396a <__sfputc_r+0x1e>
 8003958:	6994      	ldr	r4, [r2, #24]
 800395a:	42a3      	cmp	r3, r4
 800395c:	db01      	blt.n	8003962 <__sfputc_r+0x16>
 800395e:	290a      	cmp	r1, #10
 8003960:	d103      	bne.n	800396a <__sfputc_r+0x1e>
 8003962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003966:	f7ff bc90 	b.w	800328a <__swbuf_r>
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	1c58      	adds	r0, r3, #1
 800396e:	6010      	str	r0, [r2, #0]
 8003970:	7019      	strb	r1, [r3, #0]
 8003972:	4608      	mov	r0, r1
 8003974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003978:	4770      	bx	lr

0800397a <__sfputs_r>:
 800397a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397c:	4606      	mov	r6, r0
 800397e:	460f      	mov	r7, r1
 8003980:	4614      	mov	r4, r2
 8003982:	18d5      	adds	r5, r2, r3
 8003984:	42ac      	cmp	r4, r5
 8003986:	d101      	bne.n	800398c <__sfputs_r+0x12>
 8003988:	2000      	movs	r0, #0
 800398a:	e007      	b.n	800399c <__sfputs_r+0x22>
 800398c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003990:	463a      	mov	r2, r7
 8003992:	4630      	mov	r0, r6
 8003994:	f7ff ffda 	bl	800394c <__sfputc_r>
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	d1f3      	bne.n	8003984 <__sfputs_r+0xa>
 800399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039a0 <_vfiprintf_r>:
 80039a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a4:	460d      	mov	r5, r1
 80039a6:	b09d      	sub	sp, #116	; 0x74
 80039a8:	4614      	mov	r4, r2
 80039aa:	4698      	mov	r8, r3
 80039ac:	4606      	mov	r6, r0
 80039ae:	b118      	cbz	r0, 80039b8 <_vfiprintf_r+0x18>
 80039b0:	6a03      	ldr	r3, [r0, #32]
 80039b2:	b90b      	cbnz	r3, 80039b8 <_vfiprintf_r+0x18>
 80039b4:	f7ff fb62 	bl	800307c <__sinit>
 80039b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039ba:	07d9      	lsls	r1, r3, #31
 80039bc:	d405      	bmi.n	80039ca <_vfiprintf_r+0x2a>
 80039be:	89ab      	ldrh	r3, [r5, #12]
 80039c0:	059a      	lsls	r2, r3, #22
 80039c2:	d402      	bmi.n	80039ca <_vfiprintf_r+0x2a>
 80039c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039c6:	f7ff fd6e 	bl	80034a6 <__retarget_lock_acquire_recursive>
 80039ca:	89ab      	ldrh	r3, [r5, #12]
 80039cc:	071b      	lsls	r3, r3, #28
 80039ce:	d501      	bpl.n	80039d4 <_vfiprintf_r+0x34>
 80039d0:	692b      	ldr	r3, [r5, #16]
 80039d2:	b99b      	cbnz	r3, 80039fc <_vfiprintf_r+0x5c>
 80039d4:	4629      	mov	r1, r5
 80039d6:	4630      	mov	r0, r6
 80039d8:	f7ff fc94 	bl	8003304 <__swsetup_r>
 80039dc:	b170      	cbz	r0, 80039fc <_vfiprintf_r+0x5c>
 80039de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039e0:	07dc      	lsls	r4, r3, #31
 80039e2:	d504      	bpl.n	80039ee <_vfiprintf_r+0x4e>
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	b01d      	add	sp, #116	; 0x74
 80039ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ee:	89ab      	ldrh	r3, [r5, #12]
 80039f0:	0598      	lsls	r0, r3, #22
 80039f2:	d4f7      	bmi.n	80039e4 <_vfiprintf_r+0x44>
 80039f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039f6:	f7ff fd57 	bl	80034a8 <__retarget_lock_release_recursive>
 80039fa:	e7f3      	b.n	80039e4 <_vfiprintf_r+0x44>
 80039fc:	2300      	movs	r3, #0
 80039fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003a00:	2320      	movs	r3, #32
 8003a02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a0a:	2330      	movs	r3, #48	; 0x30
 8003a0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003bc0 <_vfiprintf_r+0x220>
 8003a10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a14:	f04f 0901 	mov.w	r9, #1
 8003a18:	4623      	mov	r3, r4
 8003a1a:	469a      	mov	sl, r3
 8003a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a20:	b10a      	cbz	r2, 8003a26 <_vfiprintf_r+0x86>
 8003a22:	2a25      	cmp	r2, #37	; 0x25
 8003a24:	d1f9      	bne.n	8003a1a <_vfiprintf_r+0x7a>
 8003a26:	ebba 0b04 	subs.w	fp, sl, r4
 8003a2a:	d00b      	beq.n	8003a44 <_vfiprintf_r+0xa4>
 8003a2c:	465b      	mov	r3, fp
 8003a2e:	4622      	mov	r2, r4
 8003a30:	4629      	mov	r1, r5
 8003a32:	4630      	mov	r0, r6
 8003a34:	f7ff ffa1 	bl	800397a <__sfputs_r>
 8003a38:	3001      	adds	r0, #1
 8003a3a:	f000 80a9 	beq.w	8003b90 <_vfiprintf_r+0x1f0>
 8003a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a40:	445a      	add	r2, fp
 8003a42:	9209      	str	r2, [sp, #36]	; 0x24
 8003a44:	f89a 3000 	ldrb.w	r3, [sl]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80a1 	beq.w	8003b90 <_vfiprintf_r+0x1f0>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a58:	f10a 0a01 	add.w	sl, sl, #1
 8003a5c:	9304      	str	r3, [sp, #16]
 8003a5e:	9307      	str	r3, [sp, #28]
 8003a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a64:	931a      	str	r3, [sp, #104]	; 0x68
 8003a66:	4654      	mov	r4, sl
 8003a68:	2205      	movs	r2, #5
 8003a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6e:	4854      	ldr	r0, [pc, #336]	; (8003bc0 <_vfiprintf_r+0x220>)
 8003a70:	f7fc fbb6 	bl	80001e0 <memchr>
 8003a74:	9a04      	ldr	r2, [sp, #16]
 8003a76:	b9d8      	cbnz	r0, 8003ab0 <_vfiprintf_r+0x110>
 8003a78:	06d1      	lsls	r1, r2, #27
 8003a7a:	bf44      	itt	mi
 8003a7c:	2320      	movmi	r3, #32
 8003a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a82:	0713      	lsls	r3, r2, #28
 8003a84:	bf44      	itt	mi
 8003a86:	232b      	movmi	r3, #43	; 0x2b
 8003a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a90:	2b2a      	cmp	r3, #42	; 0x2a
 8003a92:	d015      	beq.n	8003ac0 <_vfiprintf_r+0x120>
 8003a94:	9a07      	ldr	r2, [sp, #28]
 8003a96:	4654      	mov	r4, sl
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f04f 0c0a 	mov.w	ip, #10
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aa4:	3b30      	subs	r3, #48	; 0x30
 8003aa6:	2b09      	cmp	r3, #9
 8003aa8:	d94d      	bls.n	8003b46 <_vfiprintf_r+0x1a6>
 8003aaa:	b1b0      	cbz	r0, 8003ada <_vfiprintf_r+0x13a>
 8003aac:	9207      	str	r2, [sp, #28]
 8003aae:	e014      	b.n	8003ada <_vfiprintf_r+0x13a>
 8003ab0:	eba0 0308 	sub.w	r3, r0, r8
 8003ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	9304      	str	r3, [sp, #16]
 8003abc:	46a2      	mov	sl, r4
 8003abe:	e7d2      	b.n	8003a66 <_vfiprintf_r+0xc6>
 8003ac0:	9b03      	ldr	r3, [sp, #12]
 8003ac2:	1d19      	adds	r1, r3, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	9103      	str	r1, [sp, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfbb      	ittet	lt
 8003acc:	425b      	neglt	r3, r3
 8003ace:	f042 0202 	orrlt.w	r2, r2, #2
 8003ad2:	9307      	strge	r3, [sp, #28]
 8003ad4:	9307      	strlt	r3, [sp, #28]
 8003ad6:	bfb8      	it	lt
 8003ad8:	9204      	strlt	r2, [sp, #16]
 8003ada:	7823      	ldrb	r3, [r4, #0]
 8003adc:	2b2e      	cmp	r3, #46	; 0x2e
 8003ade:	d10c      	bne.n	8003afa <_vfiprintf_r+0x15a>
 8003ae0:	7863      	ldrb	r3, [r4, #1]
 8003ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ae4:	d134      	bne.n	8003b50 <_vfiprintf_r+0x1b0>
 8003ae6:	9b03      	ldr	r3, [sp, #12]
 8003ae8:	1d1a      	adds	r2, r3, #4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	9203      	str	r2, [sp, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bfb8      	it	lt
 8003af2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003af6:	3402      	adds	r4, #2
 8003af8:	9305      	str	r3, [sp, #20]
 8003afa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003bd0 <_vfiprintf_r+0x230>
 8003afe:	7821      	ldrb	r1, [r4, #0]
 8003b00:	2203      	movs	r2, #3
 8003b02:	4650      	mov	r0, sl
 8003b04:	f7fc fb6c 	bl	80001e0 <memchr>
 8003b08:	b138      	cbz	r0, 8003b1a <_vfiprintf_r+0x17a>
 8003b0a:	9b04      	ldr	r3, [sp, #16]
 8003b0c:	eba0 000a 	sub.w	r0, r0, sl
 8003b10:	2240      	movs	r2, #64	; 0x40
 8003b12:	4082      	lsls	r2, r0
 8003b14:	4313      	orrs	r3, r2
 8003b16:	3401      	adds	r4, #1
 8003b18:	9304      	str	r3, [sp, #16]
 8003b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b1e:	4829      	ldr	r0, [pc, #164]	; (8003bc4 <_vfiprintf_r+0x224>)
 8003b20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b24:	2206      	movs	r2, #6
 8003b26:	f7fc fb5b 	bl	80001e0 <memchr>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d03f      	beq.n	8003bae <_vfiprintf_r+0x20e>
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <_vfiprintf_r+0x228>)
 8003b30:	bb1b      	cbnz	r3, 8003b7a <_vfiprintf_r+0x1da>
 8003b32:	9b03      	ldr	r3, [sp, #12]
 8003b34:	3307      	adds	r3, #7
 8003b36:	f023 0307 	bic.w	r3, r3, #7
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	9303      	str	r3, [sp, #12]
 8003b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b40:	443b      	add	r3, r7
 8003b42:	9309      	str	r3, [sp, #36]	; 0x24
 8003b44:	e768      	b.n	8003a18 <_vfiprintf_r+0x78>
 8003b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	e7a6      	b.n	8003a9e <_vfiprintf_r+0xfe>
 8003b50:	2300      	movs	r3, #0
 8003b52:	3401      	adds	r4, #1
 8003b54:	9305      	str	r3, [sp, #20]
 8003b56:	4619      	mov	r1, r3
 8003b58:	f04f 0c0a 	mov.w	ip, #10
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b62:	3a30      	subs	r2, #48	; 0x30
 8003b64:	2a09      	cmp	r2, #9
 8003b66:	d903      	bls.n	8003b70 <_vfiprintf_r+0x1d0>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0c6      	beq.n	8003afa <_vfiprintf_r+0x15a>
 8003b6c:	9105      	str	r1, [sp, #20]
 8003b6e:	e7c4      	b.n	8003afa <_vfiprintf_r+0x15a>
 8003b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b74:	4604      	mov	r4, r0
 8003b76:	2301      	movs	r3, #1
 8003b78:	e7f0      	b.n	8003b5c <_vfiprintf_r+0x1bc>
 8003b7a:	ab03      	add	r3, sp, #12
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	462a      	mov	r2, r5
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <_vfiprintf_r+0x22c>)
 8003b82:	a904      	add	r1, sp, #16
 8003b84:	4630      	mov	r0, r6
 8003b86:	f3af 8000 	nop.w
 8003b8a:	4607      	mov	r7, r0
 8003b8c:	1c78      	adds	r0, r7, #1
 8003b8e:	d1d6      	bne.n	8003b3e <_vfiprintf_r+0x19e>
 8003b90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b92:	07d9      	lsls	r1, r3, #31
 8003b94:	d405      	bmi.n	8003ba2 <_vfiprintf_r+0x202>
 8003b96:	89ab      	ldrh	r3, [r5, #12]
 8003b98:	059a      	lsls	r2, r3, #22
 8003b9a:	d402      	bmi.n	8003ba2 <_vfiprintf_r+0x202>
 8003b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b9e:	f7ff fc83 	bl	80034a8 <__retarget_lock_release_recursive>
 8003ba2:	89ab      	ldrh	r3, [r5, #12]
 8003ba4:	065b      	lsls	r3, r3, #25
 8003ba6:	f53f af1d 	bmi.w	80039e4 <_vfiprintf_r+0x44>
 8003baa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bac:	e71c      	b.n	80039e8 <_vfiprintf_r+0x48>
 8003bae:	ab03      	add	r3, sp, #12
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	462a      	mov	r2, r5
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <_vfiprintf_r+0x22c>)
 8003bb6:	a904      	add	r1, sp, #16
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 f879 	bl	8003cb0 <_printf_i>
 8003bbe:	e7e4      	b.n	8003b8a <_vfiprintf_r+0x1ea>
 8003bc0:	08004304 	.word	0x08004304
 8003bc4:	0800430e 	.word	0x0800430e
 8003bc8:	00000000 	.word	0x00000000
 8003bcc:	0800397b 	.word	0x0800397b
 8003bd0:	0800430a 	.word	0x0800430a

08003bd4 <_printf_common>:
 8003bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd8:	4616      	mov	r6, r2
 8003bda:	4699      	mov	r9, r3
 8003bdc:	688a      	ldr	r2, [r1, #8]
 8003bde:	690b      	ldr	r3, [r1, #16]
 8003be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bfb8      	it	lt
 8003be8:	4613      	movlt	r3, r2
 8003bea:	6033      	str	r3, [r6, #0]
 8003bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bf0:	4607      	mov	r7, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	b10a      	cbz	r2, 8003bfa <_printf_common+0x26>
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	6033      	str	r3, [r6, #0]
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	0699      	lsls	r1, r3, #26
 8003bfe:	bf42      	ittt	mi
 8003c00:	6833      	ldrmi	r3, [r6, #0]
 8003c02:	3302      	addmi	r3, #2
 8003c04:	6033      	strmi	r3, [r6, #0]
 8003c06:	6825      	ldr	r5, [r4, #0]
 8003c08:	f015 0506 	ands.w	r5, r5, #6
 8003c0c:	d106      	bne.n	8003c1c <_printf_common+0x48>
 8003c0e:	f104 0a19 	add.w	sl, r4, #25
 8003c12:	68e3      	ldr	r3, [r4, #12]
 8003c14:	6832      	ldr	r2, [r6, #0]
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	42ab      	cmp	r3, r5
 8003c1a:	dc26      	bgt.n	8003c6a <_printf_common+0x96>
 8003c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c20:	1e13      	subs	r3, r2, #0
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	bf18      	it	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	0692      	lsls	r2, r2, #26
 8003c2a:	d42b      	bmi.n	8003c84 <_printf_common+0xb0>
 8003c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c30:	4649      	mov	r1, r9
 8003c32:	4638      	mov	r0, r7
 8003c34:	47c0      	blx	r8
 8003c36:	3001      	adds	r0, #1
 8003c38:	d01e      	beq.n	8003c78 <_printf_common+0xa4>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	6922      	ldr	r2, [r4, #16]
 8003c3e:	f003 0306 	and.w	r3, r3, #6
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	bf02      	ittt	eq
 8003c46:	68e5      	ldreq	r5, [r4, #12]
 8003c48:	6833      	ldreq	r3, [r6, #0]
 8003c4a:	1aed      	subeq	r5, r5, r3
 8003c4c:	68a3      	ldr	r3, [r4, #8]
 8003c4e:	bf0c      	ite	eq
 8003c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c54:	2500      	movne	r5, #0
 8003c56:	4293      	cmp	r3, r2
 8003c58:	bfc4      	itt	gt
 8003c5a:	1a9b      	subgt	r3, r3, r2
 8003c5c:	18ed      	addgt	r5, r5, r3
 8003c5e:	2600      	movs	r6, #0
 8003c60:	341a      	adds	r4, #26
 8003c62:	42b5      	cmp	r5, r6
 8003c64:	d11a      	bne.n	8003c9c <_printf_common+0xc8>
 8003c66:	2000      	movs	r0, #0
 8003c68:	e008      	b.n	8003c7c <_printf_common+0xa8>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4652      	mov	r2, sl
 8003c6e:	4649      	mov	r1, r9
 8003c70:	4638      	mov	r0, r7
 8003c72:	47c0      	blx	r8
 8003c74:	3001      	adds	r0, #1
 8003c76:	d103      	bne.n	8003c80 <_printf_common+0xac>
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c80:	3501      	adds	r5, #1
 8003c82:	e7c6      	b.n	8003c12 <_printf_common+0x3e>
 8003c84:	18e1      	adds	r1, r4, r3
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	2030      	movs	r0, #48	; 0x30
 8003c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c8e:	4422      	add	r2, r4
 8003c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c98:	3302      	adds	r3, #2
 8003c9a:	e7c7      	b.n	8003c2c <_printf_common+0x58>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	47c0      	blx	r8
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d0e6      	beq.n	8003c78 <_printf_common+0xa4>
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7d9      	b.n	8003c62 <_printf_common+0x8e>
	...

08003cb0 <_printf_i>:
 8003cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	7e0f      	ldrb	r7, [r1, #24]
 8003cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cb8:	2f78      	cmp	r7, #120	; 0x78
 8003cba:	4691      	mov	r9, r2
 8003cbc:	4680      	mov	r8, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	469a      	mov	sl, r3
 8003cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cc6:	d807      	bhi.n	8003cd8 <_printf_i+0x28>
 8003cc8:	2f62      	cmp	r7, #98	; 0x62
 8003cca:	d80a      	bhi.n	8003ce2 <_printf_i+0x32>
 8003ccc:	2f00      	cmp	r7, #0
 8003cce:	f000 80d4 	beq.w	8003e7a <_printf_i+0x1ca>
 8003cd2:	2f58      	cmp	r7, #88	; 0x58
 8003cd4:	f000 80c0 	beq.w	8003e58 <_printf_i+0x1a8>
 8003cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ce0:	e03a      	b.n	8003d58 <_printf_i+0xa8>
 8003ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ce6:	2b15      	cmp	r3, #21
 8003ce8:	d8f6      	bhi.n	8003cd8 <_printf_i+0x28>
 8003cea:	a101      	add	r1, pc, #4	; (adr r1, 8003cf0 <_printf_i+0x40>)
 8003cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cf0:	08003d49 	.word	0x08003d49
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003cd9 	.word	0x08003cd9
 8003cfc:	08003cd9 	.word	0x08003cd9
 8003d00:	08003cd9 	.word	0x08003cd9
 8003d04:	08003cd9 	.word	0x08003cd9
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003cd9 	.word	0x08003cd9
 8003d10:	08003cd9 	.word	0x08003cd9
 8003d14:	08003cd9 	.word	0x08003cd9
 8003d18:	08003cd9 	.word	0x08003cd9
 8003d1c:	08003e61 	.word	0x08003e61
 8003d20:	08003d89 	.word	0x08003d89
 8003d24:	08003e1b 	.word	0x08003e1b
 8003d28:	08003cd9 	.word	0x08003cd9
 8003d2c:	08003cd9 	.word	0x08003cd9
 8003d30:	08003e83 	.word	0x08003e83
 8003d34:	08003cd9 	.word	0x08003cd9
 8003d38:	08003d89 	.word	0x08003d89
 8003d3c:	08003cd9 	.word	0x08003cd9
 8003d40:	08003cd9 	.word	0x08003cd9
 8003d44:	08003e23 	.word	0x08003e23
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	602a      	str	r2, [r5, #0]
 8003d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e09f      	b.n	8003e9c <_printf_i+0x1ec>
 8003d5c:	6820      	ldr	r0, [r4, #0]
 8003d5e:	682b      	ldr	r3, [r5, #0]
 8003d60:	0607      	lsls	r7, r0, #24
 8003d62:	f103 0104 	add.w	r1, r3, #4
 8003d66:	6029      	str	r1, [r5, #0]
 8003d68:	d501      	bpl.n	8003d6e <_printf_i+0xbe>
 8003d6a:	681e      	ldr	r6, [r3, #0]
 8003d6c:	e003      	b.n	8003d76 <_printf_i+0xc6>
 8003d6e:	0646      	lsls	r6, r0, #25
 8003d70:	d5fb      	bpl.n	8003d6a <_printf_i+0xba>
 8003d72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d76:	2e00      	cmp	r6, #0
 8003d78:	da03      	bge.n	8003d82 <_printf_i+0xd2>
 8003d7a:	232d      	movs	r3, #45	; 0x2d
 8003d7c:	4276      	negs	r6, r6
 8003d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d82:	485a      	ldr	r0, [pc, #360]	; (8003eec <_printf_i+0x23c>)
 8003d84:	230a      	movs	r3, #10
 8003d86:	e012      	b.n	8003dae <_printf_i+0xfe>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	1d19      	adds	r1, r3, #4
 8003d8e:	6029      	str	r1, [r5, #0]
 8003d90:	0605      	lsls	r5, r0, #24
 8003d92:	d501      	bpl.n	8003d98 <_printf_i+0xe8>
 8003d94:	681e      	ldr	r6, [r3, #0]
 8003d96:	e002      	b.n	8003d9e <_printf_i+0xee>
 8003d98:	0641      	lsls	r1, r0, #25
 8003d9a:	d5fb      	bpl.n	8003d94 <_printf_i+0xe4>
 8003d9c:	881e      	ldrh	r6, [r3, #0]
 8003d9e:	4853      	ldr	r0, [pc, #332]	; (8003eec <_printf_i+0x23c>)
 8003da0:	2f6f      	cmp	r7, #111	; 0x6f
 8003da2:	bf0c      	ite	eq
 8003da4:	2308      	moveq	r3, #8
 8003da6:	230a      	movne	r3, #10
 8003da8:	2100      	movs	r1, #0
 8003daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dae:	6865      	ldr	r5, [r4, #4]
 8003db0:	60a5      	str	r5, [r4, #8]
 8003db2:	2d00      	cmp	r5, #0
 8003db4:	bfa2      	ittt	ge
 8003db6:	6821      	ldrge	r1, [r4, #0]
 8003db8:	f021 0104 	bicge.w	r1, r1, #4
 8003dbc:	6021      	strge	r1, [r4, #0]
 8003dbe:	b90e      	cbnz	r6, 8003dc4 <_printf_i+0x114>
 8003dc0:	2d00      	cmp	r5, #0
 8003dc2:	d04b      	beq.n	8003e5c <_printf_i+0x1ac>
 8003dc4:	4615      	mov	r5, r2
 8003dc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003dca:	fb03 6711 	mls	r7, r3, r1, r6
 8003dce:	5dc7      	ldrb	r7, [r0, r7]
 8003dd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dd4:	4637      	mov	r7, r6
 8003dd6:	42bb      	cmp	r3, r7
 8003dd8:	460e      	mov	r6, r1
 8003dda:	d9f4      	bls.n	8003dc6 <_printf_i+0x116>
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d10b      	bne.n	8003df8 <_printf_i+0x148>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	07de      	lsls	r6, r3, #31
 8003de4:	d508      	bpl.n	8003df8 <_printf_i+0x148>
 8003de6:	6923      	ldr	r3, [r4, #16]
 8003de8:	6861      	ldr	r1, [r4, #4]
 8003dea:	4299      	cmp	r1, r3
 8003dec:	bfde      	ittt	le
 8003dee:	2330      	movle	r3, #48	; 0x30
 8003df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003df4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003df8:	1b52      	subs	r2, r2, r5
 8003dfa:	6122      	str	r2, [r4, #16]
 8003dfc:	f8cd a000 	str.w	sl, [sp]
 8003e00:	464b      	mov	r3, r9
 8003e02:	aa03      	add	r2, sp, #12
 8003e04:	4621      	mov	r1, r4
 8003e06:	4640      	mov	r0, r8
 8003e08:	f7ff fee4 	bl	8003bd4 <_printf_common>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d14a      	bne.n	8003ea6 <_printf_i+0x1f6>
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	b004      	add	sp, #16
 8003e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	f043 0320 	orr.w	r3, r3, #32
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	4833      	ldr	r0, [pc, #204]	; (8003ef0 <_printf_i+0x240>)
 8003e24:	2778      	movs	r7, #120	; 0x78
 8003e26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	6829      	ldr	r1, [r5, #0]
 8003e2e:	061f      	lsls	r7, r3, #24
 8003e30:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e34:	d402      	bmi.n	8003e3c <_printf_i+0x18c>
 8003e36:	065f      	lsls	r7, r3, #25
 8003e38:	bf48      	it	mi
 8003e3a:	b2b6      	uxthmi	r6, r6
 8003e3c:	07df      	lsls	r7, r3, #31
 8003e3e:	bf48      	it	mi
 8003e40:	f043 0320 	orrmi.w	r3, r3, #32
 8003e44:	6029      	str	r1, [r5, #0]
 8003e46:	bf48      	it	mi
 8003e48:	6023      	strmi	r3, [r4, #0]
 8003e4a:	b91e      	cbnz	r6, 8003e54 <_printf_i+0x1a4>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	f023 0320 	bic.w	r3, r3, #32
 8003e52:	6023      	str	r3, [r4, #0]
 8003e54:	2310      	movs	r3, #16
 8003e56:	e7a7      	b.n	8003da8 <_printf_i+0xf8>
 8003e58:	4824      	ldr	r0, [pc, #144]	; (8003eec <_printf_i+0x23c>)
 8003e5a:	e7e4      	b.n	8003e26 <_printf_i+0x176>
 8003e5c:	4615      	mov	r5, r2
 8003e5e:	e7bd      	b.n	8003ddc <_printf_i+0x12c>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	6826      	ldr	r6, [r4, #0]
 8003e64:	6961      	ldr	r1, [r4, #20]
 8003e66:	1d18      	adds	r0, r3, #4
 8003e68:	6028      	str	r0, [r5, #0]
 8003e6a:	0635      	lsls	r5, r6, #24
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	d501      	bpl.n	8003e74 <_printf_i+0x1c4>
 8003e70:	6019      	str	r1, [r3, #0]
 8003e72:	e002      	b.n	8003e7a <_printf_i+0x1ca>
 8003e74:	0670      	lsls	r0, r6, #25
 8003e76:	d5fb      	bpl.n	8003e70 <_printf_i+0x1c0>
 8003e78:	8019      	strh	r1, [r3, #0]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	6123      	str	r3, [r4, #16]
 8003e7e:	4615      	mov	r5, r2
 8003e80:	e7bc      	b.n	8003dfc <_printf_i+0x14c>
 8003e82:	682b      	ldr	r3, [r5, #0]
 8003e84:	1d1a      	adds	r2, r3, #4
 8003e86:	602a      	str	r2, [r5, #0]
 8003e88:	681d      	ldr	r5, [r3, #0]
 8003e8a:	6862      	ldr	r2, [r4, #4]
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f7fc f9a6 	bl	80001e0 <memchr>
 8003e94:	b108      	cbz	r0, 8003e9a <_printf_i+0x1ea>
 8003e96:	1b40      	subs	r0, r0, r5
 8003e98:	6060      	str	r0, [r4, #4]
 8003e9a:	6863      	ldr	r3, [r4, #4]
 8003e9c:	6123      	str	r3, [r4, #16]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea4:	e7aa      	b.n	8003dfc <_printf_i+0x14c>
 8003ea6:	6923      	ldr	r3, [r4, #16]
 8003ea8:	462a      	mov	r2, r5
 8003eaa:	4649      	mov	r1, r9
 8003eac:	4640      	mov	r0, r8
 8003eae:	47d0      	blx	sl
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d0ad      	beq.n	8003e10 <_printf_i+0x160>
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	079b      	lsls	r3, r3, #30
 8003eb8:	d413      	bmi.n	8003ee2 <_printf_i+0x232>
 8003eba:	68e0      	ldr	r0, [r4, #12]
 8003ebc:	9b03      	ldr	r3, [sp, #12]
 8003ebe:	4298      	cmp	r0, r3
 8003ec0:	bfb8      	it	lt
 8003ec2:	4618      	movlt	r0, r3
 8003ec4:	e7a6      	b.n	8003e14 <_printf_i+0x164>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4632      	mov	r2, r6
 8003eca:	4649      	mov	r1, r9
 8003ecc:	4640      	mov	r0, r8
 8003ece:	47d0      	blx	sl
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d09d      	beq.n	8003e10 <_printf_i+0x160>
 8003ed4:	3501      	adds	r5, #1
 8003ed6:	68e3      	ldr	r3, [r4, #12]
 8003ed8:	9903      	ldr	r1, [sp, #12]
 8003eda:	1a5b      	subs	r3, r3, r1
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	dcf2      	bgt.n	8003ec6 <_printf_i+0x216>
 8003ee0:	e7eb      	b.n	8003eba <_printf_i+0x20a>
 8003ee2:	2500      	movs	r5, #0
 8003ee4:	f104 0619 	add.w	r6, r4, #25
 8003ee8:	e7f5      	b.n	8003ed6 <_printf_i+0x226>
 8003eea:	bf00      	nop
 8003eec:	08004315 	.word	0x08004315
 8003ef0:	08004326 	.word	0x08004326

08003ef4 <__sflush_r>:
 8003ef4:	898a      	ldrh	r2, [r1, #12]
 8003ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	4605      	mov	r5, r0
 8003efc:	0710      	lsls	r0, r2, #28
 8003efe:	460c      	mov	r4, r1
 8003f00:	d458      	bmi.n	8003fb4 <__sflush_r+0xc0>
 8003f02:	684b      	ldr	r3, [r1, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	dc05      	bgt.n	8003f14 <__sflush_r+0x20>
 8003f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	dc02      	bgt.n	8003f14 <__sflush_r+0x20>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f16:	2e00      	cmp	r6, #0
 8003f18:	d0f9      	beq.n	8003f0e <__sflush_r+0x1a>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f20:	682f      	ldr	r7, [r5, #0]
 8003f22:	6a21      	ldr	r1, [r4, #32]
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	d032      	beq.n	8003f8e <__sflush_r+0x9a>
 8003f28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	075a      	lsls	r2, r3, #29
 8003f2e:	d505      	bpl.n	8003f3c <__sflush_r+0x48>
 8003f30:	6863      	ldr	r3, [r4, #4]
 8003f32:	1ac0      	subs	r0, r0, r3
 8003f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f36:	b10b      	cbz	r3, 8003f3c <__sflush_r+0x48>
 8003f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f3a:	1ac0      	subs	r0, r0, r3
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f42:	6a21      	ldr	r1, [r4, #32]
 8003f44:	4628      	mov	r0, r5
 8003f46:	47b0      	blx	r6
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	d106      	bne.n	8003f5c <__sflush_r+0x68>
 8003f4e:	6829      	ldr	r1, [r5, #0]
 8003f50:	291d      	cmp	r1, #29
 8003f52:	d82b      	bhi.n	8003fac <__sflush_r+0xb8>
 8003f54:	4a29      	ldr	r2, [pc, #164]	; (8003ffc <__sflush_r+0x108>)
 8003f56:	410a      	asrs	r2, r1
 8003f58:	07d6      	lsls	r6, r2, #31
 8003f5a:	d427      	bmi.n	8003fac <__sflush_r+0xb8>
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	6062      	str	r2, [r4, #4]
 8003f60:	04d9      	lsls	r1, r3, #19
 8003f62:	6922      	ldr	r2, [r4, #16]
 8003f64:	6022      	str	r2, [r4, #0]
 8003f66:	d504      	bpl.n	8003f72 <__sflush_r+0x7e>
 8003f68:	1c42      	adds	r2, r0, #1
 8003f6a:	d101      	bne.n	8003f70 <__sflush_r+0x7c>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b903      	cbnz	r3, 8003f72 <__sflush_r+0x7e>
 8003f70:	6560      	str	r0, [r4, #84]	; 0x54
 8003f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f74:	602f      	str	r7, [r5, #0]
 8003f76:	2900      	cmp	r1, #0
 8003f78:	d0c9      	beq.n	8003f0e <__sflush_r+0x1a>
 8003f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f7e:	4299      	cmp	r1, r3
 8003f80:	d002      	beq.n	8003f88 <__sflush_r+0x94>
 8003f82:	4628      	mov	r0, r5
 8003f84:	f7ff fa92 	bl	80034ac <_free_r>
 8003f88:	2000      	movs	r0, #0
 8003f8a:	6360      	str	r0, [r4, #52]	; 0x34
 8003f8c:	e7c0      	b.n	8003f10 <__sflush_r+0x1c>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4628      	mov	r0, r5
 8003f92:	47b0      	blx	r6
 8003f94:	1c41      	adds	r1, r0, #1
 8003f96:	d1c8      	bne.n	8003f2a <__sflush_r+0x36>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0c5      	beq.n	8003f2a <__sflush_r+0x36>
 8003f9e:	2b1d      	cmp	r3, #29
 8003fa0:	d001      	beq.n	8003fa6 <__sflush_r+0xb2>
 8003fa2:	2b16      	cmp	r3, #22
 8003fa4:	d101      	bne.n	8003faa <__sflush_r+0xb6>
 8003fa6:	602f      	str	r7, [r5, #0]
 8003fa8:	e7b1      	b.n	8003f0e <__sflush_r+0x1a>
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	e7ad      	b.n	8003f10 <__sflush_r+0x1c>
 8003fb4:	690f      	ldr	r7, [r1, #16]
 8003fb6:	2f00      	cmp	r7, #0
 8003fb8:	d0a9      	beq.n	8003f0e <__sflush_r+0x1a>
 8003fba:	0793      	lsls	r3, r2, #30
 8003fbc:	680e      	ldr	r6, [r1, #0]
 8003fbe:	bf08      	it	eq
 8003fc0:	694b      	ldreq	r3, [r1, #20]
 8003fc2:	600f      	str	r7, [r1, #0]
 8003fc4:	bf18      	it	ne
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	eba6 0807 	sub.w	r8, r6, r7
 8003fcc:	608b      	str	r3, [r1, #8]
 8003fce:	f1b8 0f00 	cmp.w	r8, #0
 8003fd2:	dd9c      	ble.n	8003f0e <__sflush_r+0x1a>
 8003fd4:	6a21      	ldr	r1, [r4, #32]
 8003fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fd8:	4643      	mov	r3, r8
 8003fda:	463a      	mov	r2, r7
 8003fdc:	4628      	mov	r0, r5
 8003fde:	47b0      	blx	r6
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	dc06      	bgt.n	8003ff2 <__sflush_r+0xfe>
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	e78e      	b.n	8003f10 <__sflush_r+0x1c>
 8003ff2:	4407      	add	r7, r0
 8003ff4:	eba8 0800 	sub.w	r8, r8, r0
 8003ff8:	e7e9      	b.n	8003fce <__sflush_r+0xda>
 8003ffa:	bf00      	nop
 8003ffc:	dfbffffe 	.word	0xdfbffffe

08004000 <_fflush_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	690b      	ldr	r3, [r1, #16]
 8004004:	4605      	mov	r5, r0
 8004006:	460c      	mov	r4, r1
 8004008:	b913      	cbnz	r3, 8004010 <_fflush_r+0x10>
 800400a:	2500      	movs	r5, #0
 800400c:	4628      	mov	r0, r5
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	b118      	cbz	r0, 800401a <_fflush_r+0x1a>
 8004012:	6a03      	ldr	r3, [r0, #32]
 8004014:	b90b      	cbnz	r3, 800401a <_fflush_r+0x1a>
 8004016:	f7ff f831 	bl	800307c <__sinit>
 800401a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f3      	beq.n	800400a <_fflush_r+0xa>
 8004022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004024:	07d0      	lsls	r0, r2, #31
 8004026:	d404      	bmi.n	8004032 <_fflush_r+0x32>
 8004028:	0599      	lsls	r1, r3, #22
 800402a:	d402      	bmi.n	8004032 <_fflush_r+0x32>
 800402c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402e:	f7ff fa3a 	bl	80034a6 <__retarget_lock_acquire_recursive>
 8004032:	4628      	mov	r0, r5
 8004034:	4621      	mov	r1, r4
 8004036:	f7ff ff5d 	bl	8003ef4 <__sflush_r>
 800403a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800403c:	07da      	lsls	r2, r3, #31
 800403e:	4605      	mov	r5, r0
 8004040:	d4e4      	bmi.n	800400c <_fflush_r+0xc>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	059b      	lsls	r3, r3, #22
 8004046:	d4e1      	bmi.n	800400c <_fflush_r+0xc>
 8004048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800404a:	f7ff fa2d 	bl	80034a8 <__retarget_lock_release_recursive>
 800404e:	e7dd      	b.n	800400c <_fflush_r+0xc>

08004050 <__swhatbuf_r>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	460c      	mov	r4, r1
 8004054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004058:	2900      	cmp	r1, #0
 800405a:	b096      	sub	sp, #88	; 0x58
 800405c:	4615      	mov	r5, r2
 800405e:	461e      	mov	r6, r3
 8004060:	da0d      	bge.n	800407e <__swhatbuf_r+0x2e>
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	bf0c      	ite	eq
 800406e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004072:	2340      	movne	r3, #64	; 0x40
 8004074:	2000      	movs	r0, #0
 8004076:	6031      	str	r1, [r6, #0]
 8004078:	602b      	str	r3, [r5, #0]
 800407a:	b016      	add	sp, #88	; 0x58
 800407c:	bd70      	pop	{r4, r5, r6, pc}
 800407e:	466a      	mov	r2, sp
 8004080:	f000 f862 	bl	8004148 <_fstat_r>
 8004084:	2800      	cmp	r0, #0
 8004086:	dbec      	blt.n	8004062 <__swhatbuf_r+0x12>
 8004088:	9901      	ldr	r1, [sp, #4]
 800408a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800408e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004092:	4259      	negs	r1, r3
 8004094:	4159      	adcs	r1, r3
 8004096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800409a:	e7eb      	b.n	8004074 <__swhatbuf_r+0x24>

0800409c <__smakebuf_r>:
 800409c:	898b      	ldrh	r3, [r1, #12]
 800409e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040a0:	079d      	lsls	r5, r3, #30
 80040a2:	4606      	mov	r6, r0
 80040a4:	460c      	mov	r4, r1
 80040a6:	d507      	bpl.n	80040b8 <__smakebuf_r+0x1c>
 80040a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	6123      	str	r3, [r4, #16]
 80040b0:	2301      	movs	r3, #1
 80040b2:	6163      	str	r3, [r4, #20]
 80040b4:	b002      	add	sp, #8
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	ab01      	add	r3, sp, #4
 80040ba:	466a      	mov	r2, sp
 80040bc:	f7ff ffc8 	bl	8004050 <__swhatbuf_r>
 80040c0:	9900      	ldr	r1, [sp, #0]
 80040c2:	4605      	mov	r5, r0
 80040c4:	4630      	mov	r0, r6
 80040c6:	f7ff fa5d 	bl	8003584 <_malloc_r>
 80040ca:	b948      	cbnz	r0, 80040e0 <__smakebuf_r+0x44>
 80040cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040d0:	059a      	lsls	r2, r3, #22
 80040d2:	d4ef      	bmi.n	80040b4 <__smakebuf_r+0x18>
 80040d4:	f023 0303 	bic.w	r3, r3, #3
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	81a3      	strh	r3, [r4, #12]
 80040de:	e7e3      	b.n	80040a8 <__smakebuf_r+0xc>
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	6020      	str	r0, [r4, #0]
 80040e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	9b00      	ldr	r3, [sp, #0]
 80040ec:	6163      	str	r3, [r4, #20]
 80040ee:	9b01      	ldr	r3, [sp, #4]
 80040f0:	6120      	str	r0, [r4, #16]
 80040f2:	b15b      	cbz	r3, 800410c <__smakebuf_r+0x70>
 80040f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040f8:	4630      	mov	r0, r6
 80040fa:	f000 f837 	bl	800416c <_isatty_r>
 80040fe:	b128      	cbz	r0, 800410c <__smakebuf_r+0x70>
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	81a3      	strh	r3, [r4, #12]
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	431d      	orrs	r5, r3
 8004110:	81a5      	strh	r5, [r4, #12]
 8004112:	e7cf      	b.n	80040b4 <__smakebuf_r+0x18>

08004114 <memmove>:
 8004114:	4288      	cmp	r0, r1
 8004116:	b510      	push	{r4, lr}
 8004118:	eb01 0402 	add.w	r4, r1, r2
 800411c:	d902      	bls.n	8004124 <memmove+0x10>
 800411e:	4284      	cmp	r4, r0
 8004120:	4623      	mov	r3, r4
 8004122:	d807      	bhi.n	8004134 <memmove+0x20>
 8004124:	1e43      	subs	r3, r0, #1
 8004126:	42a1      	cmp	r1, r4
 8004128:	d008      	beq.n	800413c <memmove+0x28>
 800412a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800412e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004132:	e7f8      	b.n	8004126 <memmove+0x12>
 8004134:	4402      	add	r2, r0
 8004136:	4601      	mov	r1, r0
 8004138:	428a      	cmp	r2, r1
 800413a:	d100      	bne.n	800413e <memmove+0x2a>
 800413c:	bd10      	pop	{r4, pc}
 800413e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004146:	e7f7      	b.n	8004138 <memmove+0x24>

08004148 <_fstat_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4d07      	ldr	r5, [pc, #28]	; (8004168 <_fstat_r+0x20>)
 800414c:	2300      	movs	r3, #0
 800414e:	4604      	mov	r4, r0
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	602b      	str	r3, [r5, #0]
 8004156:	f7fc fd72 	bl	8000c3e <_fstat>
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	d102      	bne.n	8004164 <_fstat_r+0x1c>
 800415e:	682b      	ldr	r3, [r5, #0]
 8004160:	b103      	cbz	r3, 8004164 <_fstat_r+0x1c>
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	bd38      	pop	{r3, r4, r5, pc}
 8004166:	bf00      	nop
 8004168:	20000258 	.word	0x20000258

0800416c <_isatty_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4d06      	ldr	r5, [pc, #24]	; (8004188 <_isatty_r+0x1c>)
 8004170:	2300      	movs	r3, #0
 8004172:	4604      	mov	r4, r0
 8004174:	4608      	mov	r0, r1
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	f7fc fd71 	bl	8000c5e <_isatty>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	d102      	bne.n	8004186 <_isatty_r+0x1a>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	b103      	cbz	r3, 8004186 <_isatty_r+0x1a>
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	20000258 	.word	0x20000258

0800418c <_sbrk_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4d06      	ldr	r5, [pc, #24]	; (80041a8 <_sbrk_r+0x1c>)
 8004190:	2300      	movs	r3, #0
 8004192:	4604      	mov	r4, r0
 8004194:	4608      	mov	r0, r1
 8004196:	602b      	str	r3, [r5, #0]
 8004198:	f7fc fd7a 	bl	8000c90 <_sbrk>
 800419c:	1c43      	adds	r3, r0, #1
 800419e:	d102      	bne.n	80041a6 <_sbrk_r+0x1a>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	b103      	cbz	r3, 80041a6 <_sbrk_r+0x1a>
 80041a4:	6023      	str	r3, [r4, #0]
 80041a6:	bd38      	pop	{r3, r4, r5, pc}
 80041a8:	20000258 	.word	0x20000258

080041ac <memcpy>:
 80041ac:	440a      	add	r2, r1
 80041ae:	4291      	cmp	r1, r2
 80041b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80041b4:	d100      	bne.n	80041b8 <memcpy+0xc>
 80041b6:	4770      	bx	lr
 80041b8:	b510      	push	{r4, lr}
 80041ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c2:	4291      	cmp	r1, r2
 80041c4:	d1f9      	bne.n	80041ba <memcpy+0xe>
 80041c6:	bd10      	pop	{r4, pc}

080041c8 <_realloc_r>:
 80041c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041cc:	4680      	mov	r8, r0
 80041ce:	4614      	mov	r4, r2
 80041d0:	460e      	mov	r6, r1
 80041d2:	b921      	cbnz	r1, 80041de <_realloc_r+0x16>
 80041d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041d8:	4611      	mov	r1, r2
 80041da:	f7ff b9d3 	b.w	8003584 <_malloc_r>
 80041de:	b92a      	cbnz	r2, 80041ec <_realloc_r+0x24>
 80041e0:	f7ff f964 	bl	80034ac <_free_r>
 80041e4:	4625      	mov	r5, r4
 80041e6:	4628      	mov	r0, r5
 80041e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ec:	f000 f81b 	bl	8004226 <_malloc_usable_size_r>
 80041f0:	4284      	cmp	r4, r0
 80041f2:	4607      	mov	r7, r0
 80041f4:	d802      	bhi.n	80041fc <_realloc_r+0x34>
 80041f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041fa:	d812      	bhi.n	8004222 <_realloc_r+0x5a>
 80041fc:	4621      	mov	r1, r4
 80041fe:	4640      	mov	r0, r8
 8004200:	f7ff f9c0 	bl	8003584 <_malloc_r>
 8004204:	4605      	mov	r5, r0
 8004206:	2800      	cmp	r0, #0
 8004208:	d0ed      	beq.n	80041e6 <_realloc_r+0x1e>
 800420a:	42bc      	cmp	r4, r7
 800420c:	4622      	mov	r2, r4
 800420e:	4631      	mov	r1, r6
 8004210:	bf28      	it	cs
 8004212:	463a      	movcs	r2, r7
 8004214:	f7ff ffca 	bl	80041ac <memcpy>
 8004218:	4631      	mov	r1, r6
 800421a:	4640      	mov	r0, r8
 800421c:	f7ff f946 	bl	80034ac <_free_r>
 8004220:	e7e1      	b.n	80041e6 <_realloc_r+0x1e>
 8004222:	4635      	mov	r5, r6
 8004224:	e7df      	b.n	80041e6 <_realloc_r+0x1e>

08004226 <_malloc_usable_size_r>:
 8004226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422a:	1f18      	subs	r0, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	bfbc      	itt	lt
 8004230:	580b      	ldrlt	r3, [r1, r0]
 8004232:	18c0      	addlt	r0, r0, r3
 8004234:	4770      	bx	lr
	...

08004238 <_init>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr

08004244 <_fini>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr
